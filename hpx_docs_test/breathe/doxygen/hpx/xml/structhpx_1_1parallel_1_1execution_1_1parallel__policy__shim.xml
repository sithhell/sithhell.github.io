<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kind="struct" language="C++" prot="public">
    <compoundname>hpx::parallel::execution::parallel_policy_shim</compoundname>
    <basecompoundref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" prot="public" virt="non-virtual">hpx::parallel::execution::parallel_policy</basecompoundref>
    <includes refid="execution__policy_8hpp" local="no">execution_policy.hpp</includes>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1_1rebind" prot="public">hpx::parallel::execution::parallel_policy_shim::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename Executor</type>
      </param>
      <param>
        <type>typename Parameters</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a701c83fdd6bd40f8a767088a0187d02e" prot="public" static="no">
        <type>Executor</type>
        <definition>typedef Executor hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::executor_type</definition>
        <argsstring></argsstring>
        <name>executor_type</name>
        <briefdescription>
<para>The type of the executor associated with this execution policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1063" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1063" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1afb7cf15ebec84874ec767b3f205dd4ba" prot="public" static="no">
        <type>Parameters</type>
        <definition>typedef Parameters hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::executor_parameters_type</definition>
        <argsstring></argsstring>
        <name>executor_parameters_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the associated executor parameters object which is associated with this execution policy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1067" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1067" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a662d093e1588987a35508a9c2a470df3" prot="public" static="no">
        <type>hpx::traits::executor_execution_category&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy_1a17c23b98baee010f403dca17e98b9a4c" kindref="member">executor_type</ref> &gt;::type</type>
        <definition>typedef hpx::traits::executor_execution_category&lt; executor_type &gt;::type hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::execution_category</definition>
        <argsstring></argsstring>
        <name>execution_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The category of the execution agents created by this execution policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1073" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1073" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a3b7db9afe9d42b131e662174a9bc6cfe" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__task__policy__shim" kindref="compound">parallel_task_policy_shim</ref>&lt; Executor, Parameters &gt;</type>
        <definition>parallel_task_policy_shim&lt;Executor, Parameters&gt; hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::operator()</definition>
        <argsstring>(task_policy_tag tag) const</argsstring>
        <name>operator()</name>
        <param>
          <type>task_policy_tag</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" kindref="compound">parallel_policy</ref> referencing a chunk size.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] Specify that the corresponding asynchronous execution policy should be used</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" kindref="compound">parallel_policy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1095" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1095" bodyend="1099"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a2dac3993838f19d501ab00fa44f790f9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor_</type>
          </param>
        </templateparamlist>
        <type>rebind_executor&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kindref="compound">parallel_policy_shim</ref>, Executor_, <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy_1a3e928d3001dee58d07354f0931d0f745" kindref="member">executor_parameters_type</ref> &gt;::type</type>
        <definition>rebind_executor&lt; parallel_policy_shim, Executor_, executor_parameters_type &gt;::type hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::on</definition>
        <argsstring>(Executor_ &amp;&amp;exec) const</argsstring>
        <name>on</name>
        <param>
          <type>Executor_ &amp;&amp;</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" kindref="compound">parallel_policy</ref> from the given executor</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Executor</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the executor to associate with this execution policy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The executor to use for the execution of the parallel algorithm the returned execution policy is used with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Requires: is_executor&lt;Executor&gt;::value is true</para></simplesect>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" kindref="compound">parallel_policy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1120" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1120" bodyend="1135"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1aacb6e2701701b6cd36fb733df058a903" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Parameters_</declname>
            <defname>Parameters_</defname>
          </param>
          <param>
            <type>typename ParametersType</type>
            <defval>typename executor_parameters_join&lt;Parameters_...&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>rebind_executor&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kindref="compound">parallel_policy_shim</ref>, <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy_1a17c23b98baee010f403dca17e98b9a4c" kindref="member">executor_type</ref>, ParametersType &gt;::type</type>
        <definition>rebind_executor&lt; parallel_policy_shim, executor_type, ParametersType &gt;::type hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::with</definition>
        <argsstring>(Parameters_ &amp;&amp;... params) const</argsstring>
        <name>with</name>
        <param>
          <type>Parameters_ &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kindref="compound">parallel_policy_shim</ref> from the given execution parameters</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the executor parameters to associate with this execution policy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The executor parameters to use for the execution of the parallel algorithm the returned execution policy is used with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Requires: is_executor_parameters&lt;Parameters&gt;::value is true</para></simplesect>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kindref="compound">parallel_policy_shim</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1156" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1156" bodyend="1163"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1aa8c344a9417f65f8e92f7c85bd8fe7b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Executor &amp;</type>
        <definition>Executor&amp; hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::executor</definition>
        <argsstring>()</argsstring>
        <name>executor</name>
        <briefdescription>
<para>Return the associated executor object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1166" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1166" bodyend="1166"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a45116988ab7e65c405b88951a10d1361" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Executor const  &amp;</type>
        <definition>Executor const&amp; hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::executor</definition>
        <argsstring>() const</argsstring>
        <name>executor</name>
        <briefdescription>
<para>Return the associated executor object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1168" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1168" bodyend="1168"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a26145c923d468fae4413488d1f111090" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Parameters &amp;</type>
        <definition>Parameters&amp; hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::parameters</definition>
        <argsstring>()</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Return the associated executor parameters object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1171" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1171" bodyend="1171"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1abbe0621435fb6a55d476cce533f06b5c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Parameters const  &amp;</type>
        <definition>Parameters const&amp; hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;::parameters</definition>
        <argsstring>() const</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Return the associated executor parameters object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="1173" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1173" bodyend="1173"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The class <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" kindref="compound">parallel_policy_shim</ref> is an execution policy type used as a unique type to disambiguate parallel algorithm overloading and indicate that a parallel algorithm&apos;s execution may be parallelized. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="67">
        <label>hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim"/>
        <childnode refid="68" relation="public-inheritance">
        </childnode>
      </node>
      <node id="68">
        <label>hpx::parallel::execution::parallel_policy</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="69">
        <label>hpx::parallel::execution::parallel_policy_shim&lt; Executor, Parameters &gt;</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim"/>
        <childnode refid="70" relation="public-inheritance">
        </childnode>
      </node>
      <node id="70">
        <label>hpx::parallel::execution::parallel_policy</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy"/>
      </node>
    </collaborationgraph>
    <location file="hpx/parallel/execution_policy.hpp" line="1061" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="1060" bodyend="1204"/>
    <listofallmembers>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a662d093e1588987a35508a9c2a470df3" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>execution_category</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1aa8c344a9417f65f8e92f7c85bd8fe7b2" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>executor</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a45116988ab7e65c405b88951a10d1361" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>executor</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1afb7cf15ebec84874ec767b3f205dd4ba" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>executor_parameters_type</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a701c83fdd6bd40f8a767088a0187d02e" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>executor_type</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a2dac3993838f19d501ab00fa44f790f9" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>on</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy_1a60d4707ab6d8c849399c4c461a822ce0" prot="public" virt="non-virtual" ambiguityscope="hpx::parallel::execution::parallel_policy::"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>on</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a3b7db9afe9d42b131e662174a9bc6cfe" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>operator()</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1a26145c923d468fae4413488d1f111090" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>parameters</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1abbe0621435fb6a55d476cce533f06b5c" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>parameters</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim_1aacb6e2701701b6cd36fb733df058a903" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>with</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy_1a2f8b0890678785a9a703a8621d7281ef" prot="public" virt="non-virtual" ambiguityscope="hpx::parallel::execution::parallel_policy::"><scope>hpx::parallel::execution::parallel_policy_shim</scope><name>with</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
