<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kind="struct" language="C++" prot="public">
    <compoundname>hpx::parallel::execution::sequenced_task_policy_shim</compoundname>
    <basecompoundref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" prot="public" virt="non-virtual">hpx::parallel::execution::sequenced_task_policy</basecompoundref>
    <includes refid="execution__policy_8hpp" local="no">execution_policy.hpp</includes>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1_1rebind" prot="public">hpx::parallel::execution::sequenced_task_policy_shim::rebind</innerclass>
    <templateparamlist>
      <param>
        <type>typename Executor</type>
      </param>
      <param>
        <type>typename Parameters</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a8266a091bab953435f91dd581ebefe6f" prot="public" static="no">
        <type>Executor</type>
        <definition>typedef Executor hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::executor_type</definition>
        <argsstring></argsstring>
        <name>executor_type</name>
        <briefdescription>
<para>The type of the executor associated with this execution policy. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="196" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="196" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a491f80046c2b447302d82ee8581ea852" prot="public" static="no">
        <type>Parameters</type>
        <definition>typedef Parameters hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::executor_parameters_type</definition>
        <argsstring></argsstring>
        <name>executor_parameters_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The type of the associated executor parameters object which is associated with this execution policy </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="200" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="200" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1aff2f1e3c8099e7bfd9f52af6b4d5bcfc" prot="public" static="no">
        <type>hpx::traits::executor_execution_category&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy_1a6a68c363631ef4ab977a5bd62b25e4bb" kindref="member">executor_type</ref> &gt;::type</type>
        <definition>typedef hpx::traits::executor_execution_category&lt; executor_type &gt;::type hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::execution_category</definition>
        <argsstring></argsstring>
        <name>execution_category</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The category of the execution agents created by this execution policy. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="206" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="206" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a6105db1818b56affe5efbcdc20157e89" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref> const  &amp;</type>
        <definition>sequenced_task_policy_shim const&amp; hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::operator()</definition>
        <argsstring>(task_policy_tag tag) const</argsstring>
        <name>operator()</name>
        <param>
          <type>task_policy_tag</type>
          <declname>tag</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" kindref="compound">sequenced_task_policy</ref> from itself</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>tag</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] Specify that the corresponding asynchronous execution policy should be used</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" kindref="compound">sequenced_task_policy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="227" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1aa89fb1f432bf0593eb786874cf72dda8" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Executor_</type>
          </param>
        </templateparamlist>
        <type>rebind_executor&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref>, Executor_, <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy_1af31ef5129fd4fae716ffd3b7c11e9b1b" kindref="member">executor_parameters_type</ref> &gt;::type</type>
        <definition>rebind_executor&lt; sequenced_task_policy_shim, Executor_, executor_parameters_type &gt;::type hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::on</definition>
        <argsstring>(Executor_ &amp;&amp;exec) const</argsstring>
        <name>on</name>
        <param>
          <type>Executor_ &amp;&amp;</type>
          <declname>exec</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" kindref="compound">sequenced_task_policy</ref> from the given executor</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Executor</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the executor to associate with this execution policy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>exec</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The executor to use for the execution of the parallel algorithm the returned execution policy is used with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Requires: is_executor&lt;Executor&gt;::value is true</para></simplesect>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" kindref="compound">sequenced_task_policy</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="252" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="252" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1ae37922ef6cf58cf12338d72d6879c40a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Parameters_</declname>
            <defname>Parameters_</defname>
          </param>
          <param>
            <type>typename ParametersType</type>
            <defval>typename executor_parameters_join&lt;Parameters_...&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>rebind_executor&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref>, <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy_1a6a68c363631ef4ab977a5bd62b25e4bb" kindref="member">executor_type</ref>, ParametersType &gt;::type</type>
        <definition>rebind_executor&lt; sequenced_task_policy_shim, executor_type, ParametersType &gt;::type hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::with</definition>
        <argsstring>(Parameters_ &amp;&amp;... params) const</argsstring>
        <name>with</name>
        <param>
          <type>Parameters_ &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref> from the given execution parameters</para><para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Parameters</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the executor parameters to associate with this execution policy.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>params</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The executor parameters to use for the execution of the parallel algorithm the returned execution policy is used with.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>Requires: all parameters are executor_parameters, different parameter types can&apos;t be duplicated</para></simplesect>
<simplesect kind="return"><para>The new <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="289" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="289" bodyend="297"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a93a5b36cb1d7c7b45841617a2d2263bb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Executor &amp;</type>
        <definition>Executor&amp; hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::executor</definition>
        <argsstring>()</argsstring>
        <name>executor</name>
        <briefdescription>
<para>Return the associated executor object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="300" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="300" bodyend="300"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a422728c3949bf740fe544d4dc4437d43" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Executor const  &amp;</type>
        <definition>Executor const&amp; hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::executor</definition>
        <argsstring>() const</argsstring>
        <name>executor</name>
        <briefdescription>
<para>Return the associated executor object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="302" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="302" bodyend="302"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a87256185a79187e4cdb6ef0de5a3a077" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>Parameters &amp;</type>
        <definition>Parameters&amp; hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::parameters</definition>
        <argsstring>()</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Return the associated executor parameters object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="305" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="305" bodyend="305"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a000e646b337a5e711b33a5758c1edfea" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>Parameters const  &amp;</type>
        <definition>Parameters const&amp; hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;::parameters</definition>
        <argsstring>() const</argsstring>
        <name>parameters</name>
        <briefdescription>
<para>Return the associated executor parameters object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/parallel/execution_policy.hpp" line="307" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="307" bodyend="307"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Extension: The class <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" kindref="compound">sequenced_task_policy_shim</ref> is an execution policy type used as a unique type to disambiguate parallel algorithm overloading based on combining a underlying <emphasis><ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" kindref="compound">sequenced_task_policy</ref></emphasis> and an executor and indicate that a parallel algorithm&apos;s execution may not be parallelized (has to run sequentially).</para><para>The algorithm returns a future representing the result of the corresponding algorithm when invoked with the <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__policy" kindref="compound">sequenced_policy</ref>. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="116">
        <label>hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim"/>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>hpx::parallel::execution::sequenced_task_policy</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="118">
        <label>hpx::parallel::execution::sequenced_task_policy_shim&lt; Executor, Parameters &gt;</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
      </node>
      <node id="119">
        <label>hpx::parallel::execution::sequenced_task_policy</label>
        <link refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy"/>
      </node>
    </collaborationgraph>
    <location file="hpx/parallel/execution_policy.hpp" line="194" column="1" bodyfile="hpx/parallel/execution_policy.hpp" bodystart="192" bodyend="338"/>
    <listofallmembers>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1aff2f1e3c8099e7bfd9f52af6b4d5bcfc" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>execution_category</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a93a5b36cb1d7c7b45841617a2d2263bb" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>executor</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a422728c3949bf740fe544d4dc4437d43" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>executor</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a491f80046c2b447302d82ee8581ea852" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>executor_parameters_type</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a8266a091bab953435f91dd581ebefe6f" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>executor_type</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1aa89fb1f432bf0593eb786874cf72dda8" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>on</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy_1a78110383396d55281a65ce9a1059ebb4" prot="public" virt="non-virtual" ambiguityscope="hpx::parallel::execution::sequenced_task_policy::"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>on</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a6105db1818b56affe5efbcdc20157e89" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>operator()</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a87256185a79187e4cdb6ef0de5a3a077" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>parameters</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1a000e646b337a5e711b33a5758c1edfea" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>parameters</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim_1ae37922ef6cf58cf12338d72d6879c40a" prot="public" virt="non-virtual"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>with</name></member>
      <member refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy_1a80f16f9cfef907f5dc2f9660dc872876" prot="public" virt="non-virtual" ambiguityscope="hpx::parallel::execution::sequenced_task_policy::"><scope>hpx::parallel::execution::sequenced_task_policy_shim</scope><name>with</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
