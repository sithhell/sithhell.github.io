<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1launch" kind="struct" language="C++" prot="public">
    <compoundname>hpx::launch</compoundname>
    <basecompoundref prot="public" virt="non-virtual">detail::policy_holder&lt;&gt;</basecompoundref>
    <includes refid="launch__policy_8hpp" local="no">launch_policy.hpp</includes>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structhpx_1_1launch_1aa02e7d34f6e84663a91b65f31e7264a3" prot="public" static="yes" mutable="no">
        <type>const detail::fork_policy</type>
        <definition>const detail::fork_policy hpx::launch::fork</definition>
        <argsstring></argsstring>
        <name>fork</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Predefined launch policy representing asynchronous execution.The new thread is executed in a preferred way </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="401" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="339" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1launch_1a63234dfc5eb5ddbd51fe2d0de1ecfa3c" prot="public" static="yes" mutable="no">
        <type>const detail::sync_policy</type>
        <definition>const detail::sync_policy hpx::launch::sync</definition>
        <argsstring></argsstring>
        <name>sync</name>
        <briefdescription>
<para>Predefined launch policy representing synchronous execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="404" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="404" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1launch_1a5f584d23f74552da911e2dcd527bf70c" prot="public" static="yes" mutable="no">
        <type>const detail::deferred_policy</type>
        <definition>const detail::deferred_policy hpx::launch::deferred</definition>
        <argsstring></argsstring>
        <name>deferred</name>
        <briefdescription>
<para>Predefined launch policy representing deferred execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="407" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="407" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1launch_1a6b5538fba9ce84786c7f6370181f5a2f" prot="public" static="yes" mutable="no">
        <type>const detail::apply_policy</type>
        <definition>const detail::apply_policy hpx::launch::apply</definition>
        <argsstring></argsstring>
        <name>apply</name>
        <briefdescription>
<para>Predefined launch policy representing fire and forget execution. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="410" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="410" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1launch_1a906b265d955a3249a317706556da83cf" prot="public" static="yes" mutable="no">
        <type>const detail::select_policy_generator</type>
        <definition>const detail::select_policy_generator hpx::launch::select</definition>
        <argsstring></argsstring>
        <name>select</name>
        <briefdescription>
<para>Predefined launch policy representing delayed policy selection. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="413" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="413" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1launch_1a3d36a8b0f33657ec03f7795692c94bc4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::launch::launch</definition>
        <argsstring>() noexcept</argsstring>
        <name>launch</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Default constructor. This creates a launch policy representing all possible launch modes </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/launch_policy.hpp" line="337" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="337" bodyend="338"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Launch policies for <emphasis>hpx::async</emphasis> etc. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="17">
        <label>detail::policy_holder&lt;&gt;</label>
      </node>
      <node id="16">
        <label>hpx::launch</label>
        <link refid="structhpx_1_1launch"/>
        <childnode refid="17" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="19">
        <label>detail::policy_holder&lt;&gt;</label>
      </node>
      <node id="18">
        <label>hpx::launch</label>
        <link refid="structhpx_1_1launch"/>
        <childnode refid="19" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="hpx/runtime/launch_policy.hpp" line="333" column="1" bodyfile="hpx/runtime/launch_policy.hpp" bodystart="332" bodyend="420"/>
    <listofallmembers>
      <member refid="structhpx_1_1launch_1a6b5538fba9ce84786c7f6370181f5a2f" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>apply</name></member>
      <member refid="structhpx_1_1launch_1a5f584d23f74552da911e2dcd527bf70c" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>deferred</name></member>
      <member refid="structhpx_1_1launch_1aa02e7d34f6e84663a91b65f31e7264a3" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>fork</name></member>
      <member refid="structhpx_1_1launch_1a3d36a8b0f33657ec03f7795692c94bc4" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>launch</name></member>
      <member refid="structhpx_1_1launch_1a906b265d955a3249a317706556da83cf" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>select</name></member>
      <member refid="structhpx_1_1launch_1a63234dfc5eb5ddbd51fe2d0de1ecfa3c" prot="public" virt="non-virtual"><scope>hpx::launch</scope><name>sync</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
