<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1resource_1_1partitioner" kind="class" language="C++" prot="public">
    <compoundname>hpx::resource::partitioner</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1resource_1_1partitioner_1a66bbd4414489502a29b959f602dbb6ae" prot="private" static="no" mutable="no">
        <type>detail::partitioner &amp;</type>
        <definition>detail::partitioner&amp; hpx::resource::partitioner::partitioner_</definition>
        <argsstring></argsstring>
        <name>partitioner_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="270" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="270" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a5ce1a56ceabf3e4a97bc5270a8856fa9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(util::function_nonser&lt; int(hpx::program_options::variables_map &amp;vm) &gt; const &amp;f, hpx::program_options::options_description const &amp;desc_cmdline, int argc, char **argv, std::vector&lt; std::string &gt; ini_config, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>util::function_nonser&lt; int(hpx::program_options::variables_map &amp;vm) &gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>hpx::program_options::options_description const &amp;</type>
          <declname>desc_cmdline</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ini_config</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="132" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="132" bodyend="142"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a4bba6633f3ccaecd918dbd48e8f060e5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(util::function_nonser&lt; int(int, char **)&gt; const &amp;f, int argc, char **argv, resource::partitioner_mode rpmode=resource::mode_default, hpx::runtime_mode mode=hpx::runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>util::function_nonser&lt; int(int, char **)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">hpx::runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>hpx::runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="145" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="145" bodyend="151"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1af9ca64e26b029246a4de28fe255eac53" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(util::function_nonser&lt; int(int, char **)&gt; const &amp;f, int argc, char **argv, std::vector&lt; std::string &gt; const &amp;cfg, resource::partitioner_mode rpmode=resource::mode_default, hpx::runtime_mode mode=hpx::runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>util::function_nonser&lt; int(int, char **)&gt; const &amp;</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">hpx::runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>hpx::runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="153" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="153" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1af11403a34747e93d4a78daf21436398f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(int argc, char **argv, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="161" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="161" bodyend="166"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1aacf20a9cc6b352458c0c663984e34cbe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(int argc, char **argv, std::vector&lt; std::string &gt; ini_config, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ini_config</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="168" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="168" bodyend="174"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1ad960f89e82c4b0d5dd10e55319f8fc79" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(hpx::program_options::options_description const &amp;desc_cmdline, int argc, char **argv, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>hpx::program_options::options_description const &amp;</type>
          <declname>desc_cmdline</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="176" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="176" bodyend="183"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a76876b92d609e301b36dc55a838c2b44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(hpx::program_options::options_description const &amp;desc_cmdline, int argc, char **argv, std::vector&lt; std::string &gt; ini_config, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>hpx::program_options::options_description const &amp;</type>
          <declname>desc_cmdline</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ini_config</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="185" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="185" bodyend="192"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a26d9487a4e3a1d09a1e31f6b52371852" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(std::nullptr_t f, int argc, char **argv, resource::partitioner_mode rpmode=resource::mode_default, hpx::runtime_mode mode=hpx::runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">hpx::runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>hpx::runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="194" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="194" bodyend="199"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1ada5cb4e70ee5a55bd8e5a395f8933bf6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(std::nullptr_t f, int argc, char **argv, std::vector&lt; std::string &gt; const &amp;cfg, resource::partitioner_mode rpmode=resource::mode_default, hpx::runtime_mode mode=hpx::runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>f</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt; const &amp;</type>
          <declname>cfg</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">hpx::runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>hpx::runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="201" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="201" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a4a4b7a89b96cabc733279433e483fe27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::resource::partitioner::partitioner</definition>
        <argsstring>(std::nullptr_t f, hpx::program_options::options_description const &amp;desc_cmdline, int argc, char **argv, std::vector&lt; std::string &gt; ini_config, resource::partitioner_mode rpmode=resource::mode_default, runtime_mode mode=runtime_mode_default)</argsstring>
        <name>partitioner</name>
        <param>
          <type>std::nullptr_t</type>
          <declname>f</declname>
        </param>
        <param>
          <type>hpx::program_options::options_description const &amp;</type>
          <declname>desc_cmdline</declname>
        </param>
        <param>
          <type>int</type>
          <declname>argc</declname>
        </param>
        <param>
          <type>char **</type>
          <declname>argv</declname>
        </param>
        <param>
          <type>std::vector&lt; std::string &gt;</type>
          <declname>ini_config</declname>
        </param>
        <param>
          <type>resource::partitioner_mode</type>
          <declname>rpmode</declname>
          <defval>resource::mode_default</defval>
        </param>
        <param>
          <type><ref refid="runtime__mode_8hpp_1a380cead581c9f4b6ec569a355f9440bf" kindref="member">runtime_mode</ref></type>
          <declname>mode</declname>
          <defval>runtime_mode_default</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="209" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="209" bodyend="217"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a4497d2cbafa68fb886ba2045e3cbd6d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::create_thread_pool</definition>
        <argsstring>(std::string const &amp;name, scheduling_policy sched=scheduling_policy::unspecified, hpx::threads::policies::scheduler_mode=hpx::threads::policies::scheduler_mode::default_mode)</argsstring>
        <name>create_thread_pool</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>scheduling_policy</type>
          <declname>sched</declname>
          <defval>scheduling_policy::unspecified</defval>
        </param>
        <param>
          <type>hpx::threads::policies::scheduler_mode</type>
          <defval>hpx::threads::policies::scheduler_mode::default_mode</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1ad559caef93ea53bdf561ef5b0893c578" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::create_thread_pool</definition>
        <argsstring>(std::string const &amp;name, scheduler_function scheduler_creation)</argsstring>
        <name>create_thread_pool</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>scheduler_function</type>
          <declname>scheduler_creation</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="228" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a3a44f4397fd710a74b1ab29ace8b12bc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::set_default_pool_name</definition>
        <argsstring>(std::string const &amp;name)</argsstring>
        <name>set_default_pool_name</name>
        <param>
          <type>std::string const &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="232" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a4724e82f36f222fe5a4967b765e4d9b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::resource::partitioner::get_default_pool_name</definition>
        <argsstring>() const</argsstring>
        <name>get_default_pool_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="234" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1ae994b2afde4fe9414c8e0b158615387b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(hpx::resource::pu const &amp;p, std::string const &amp;pool_name, std::size_t num_threads=1)</argsstring>
        <name>add_resource</name>
        <param>
          <type><ref refid="classhpx_1_1resource_1_1pu" kindref="compound">hpx::resource::pu</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="239" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="239" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a869f50bc0b69968d465cb77248d7e174" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(hpx::resource::pu const &amp;p, std::string const &amp;pool_name, bool exclusive, std::size_t num_threads=1)</argsstring>
        <name>add_resource</name>
        <param>
          <type><ref refid="classhpx_1_1resource_1_1pu" kindref="compound">hpx::resource::pu</ref> const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>num_threads</declname>
          <defval>1</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="244" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a05ba911a49ab6864ceb0a9d0b38cf866" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(std::vector&lt; hpx::resource::pu &gt; const &amp;pv, std::string const &amp;pool_name, bool exclusive=true)</argsstring>
        <name>add_resource</name>
        <param>
          <type>std::vector&lt; <ref refid="classhpx_1_1resource_1_1pu" kindref="compound">hpx::resource::pu</ref> &gt; const &amp;</type>
          <declname>pv</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="247" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a73ca88b3e2be88f01b41b5729a04ec9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(hpx::resource::core const &amp;c, std::string const &amp;pool_name, bool exclusive=true)</argsstring>
        <name>add_resource</name>
        <param>
          <type><ref refid="classhpx_1_1resource_1_1core" kindref="compound">hpx::resource::core</ref> const &amp;</type>
          <declname>c</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="249" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a7938d8bb4d31c1ca8886c83f23c3121c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(std::vector&lt; hpx::resource::core &gt; &amp;cv, std::string const &amp;pool_name, bool exclusive=true)</argsstring>
        <name>add_resource</name>
        <param>
          <type>std::vector&lt; <ref refid="classhpx_1_1resource_1_1core" kindref="compound">hpx::resource::core</ref> &gt; &amp;</type>
          <declname>cv</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="251" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a59e1cb220f7a395a7863c48091b08036" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(hpx::resource::numa_domain const &amp;nd, std::string const &amp;pool_name, bool exclusive=true)</argsstring>
        <name>add_resource</name>
        <param>
          <type><ref refid="classhpx_1_1resource_1_1numa__domain" kindref="compound">hpx::resource::numa_domain</ref> const &amp;</type>
          <declname>nd</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="253" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a539605633e7c948c737da90438642f2a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::resource::partitioner::add_resource</definition>
        <argsstring>(std::vector&lt; hpx::resource::numa_domain &gt; const &amp;ndv, std::string const &amp;pool_name, bool exclusive=true)</argsstring>
        <name>add_resource</name>
        <param>
          <type>std::vector&lt; <ref refid="classhpx_1_1resource_1_1numa__domain" kindref="compound">hpx::resource::numa_domain</ref> &gt; const &amp;</type>
          <declname>ndv</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>pool_name</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>exclusive</declname>
          <defval>true</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="255" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1ac6c0f5620c6f45f3a9a811d0113997e0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::vector&lt; <ref refid="classhpx_1_1resource_1_1numa__domain" kindref="compound">numa_domain</ref> &gt; const  &amp;</type>
        <definition>std::vector&lt;numa_domain&gt; const&amp; hpx::resource::partitioner::numa_domains</definition>
        <argsstring>() const</argsstring>
        <name>numa_domains</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="260" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a0f0d299d7ba09e46e8cb6e3745cb61da" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hpx::resource::partitioner::get_number_requested_threads</definition>
        <argsstring>()</argsstring>
        <name>get_number_requested_threads</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="264" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1resource_1_1partitioner_1a7649870f715111dbc2327e2b5378a479" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>hpx::threads::topology const  &amp;</type>
        <definition>hpx::threads::topology const&amp; hpx::resource::partitioner::get_topology</definition>
        <argsstring>() const</argsstring>
        <name>get_topology</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="hpx/runtime/resource/partitioner.hpp" line="267" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="hpx/runtime/resource/partitioner.hpp" line="130" column="1" bodyfile="hpx/runtime/resource/partitioner.hpp" bodystart="129" bodyend="271"/>
    <listofallmembers>
      <member refid="classhpx_1_1resource_1_1partitioner_1ae994b2afde4fe9414c8e0b158615387b" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a869f50bc0b69968d465cb77248d7e174" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a05ba911a49ab6864ceb0a9d0b38cf866" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a73ca88b3e2be88f01b41b5729a04ec9f" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a7938d8bb4d31c1ca8886c83f23c3121c" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a59e1cb220f7a395a7863c48091b08036" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a539605633e7c948c737da90438642f2a" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>add_resource</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a4497d2cbafa68fb886ba2045e3cbd6d3" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>create_thread_pool</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1ad559caef93ea53bdf561ef5b0893c578" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>create_thread_pool</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a4724e82f36f222fe5a4967b765e4d9b4" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>get_default_pool_name</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a0f0d299d7ba09e46e8cb6e3745cb61da" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>get_number_requested_threads</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a7649870f715111dbc2327e2b5378a479" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>get_topology</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1ac6c0f5620c6f45f3a9a811d0113997e0" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>numa_domains</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a5ce1a56ceabf3e4a97bc5270a8856fa9" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a4bba6633f3ccaecd918dbd48e8f060e5" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1af9ca64e26b029246a4de28fe255eac53" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1af11403a34747e93d4a78daf21436398f" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1aacf20a9cc6b352458c0c663984e34cbe" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1ad960f89e82c4b0d5dd10e55319f8fc79" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a76876b92d609e301b36dc55a838c2b44" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a26d9487a4e3a1d09a1e31f6b52371852" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1ada5cb4e70ee5a55bd8e5a395f8933bf6" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a4a4b7a89b96cabc733279433e483fe27" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a66bbd4414489502a29b959f602dbb6ae" prot="private" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>partitioner_</name></member>
      <member refid="classhpx_1_1resource_1_1partitioner_1a3a44f4397fd710a74b1ab29ace8b12bc" prot="public" virt="non-virtual"><scope>hpx::resource::partitioner</scope><name>set_default_pool_name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
