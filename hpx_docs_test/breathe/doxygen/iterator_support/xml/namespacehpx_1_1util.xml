<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util" kind="namespace" language="C++">
    <compoundname>hpx::util</compoundname>
    <innerclass refid="classhpx_1_1util_1_1iterator__adaptor" prot="public">hpx::util::iterator_adaptor</innerclass>
    <innerclass refid="classhpx_1_1util_1_1iterator__core__access" prot="public">hpx::util::iterator_core_access</innerclass>
    <innerclass refid="structhpx_1_1util_1_1iterator__facade" prot="public">hpx::util::iterator_facade</innerclass>
    <innerclass refid="classhpx_1_1util_1_1iterator__range" prot="public">hpx::util::iterator_range</innerclass>
    <innernamespace refid="namespacehpx_1_1util_1_1range__adl">hpx::util::range_adl</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1a4bbf5351f1aa4d6ab5a04650672ba790" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Category</type>
          </param>
          <param>
            <type>typename Reference</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename Pointer</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE util::detail::postfix_increment_result&lt; Derived, typename Derived::value_type, typename Derived::reference &gt;::type</type>
        <definition>HPX_HOST_DEVICE util::detail::postfix_increment_result&lt;Derived, typename Derived::value_type, typename Derived::reference&gt;::type hpx::util::operator++</definition>
        <argsstring>(iterator_facade&lt; Derived, T, Category, Reference, Distance, Pointer &gt; &amp;i, int)</argsstring>
        <name>operator++</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1iterator__facade" kindref="compound">iterator_facade</ref>&lt; Derived, T, Category, Reference, Distance, Pointer &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="428" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="428" bodyend="440"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1ada0560cbd89e469032078183dbda323b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline,==, bool)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="465" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="465" bodyend="469"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1a923f98c95be46715fdc676655d795db0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline, !=, bool)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <param>
          <type>!</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="471" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="471" bodyend="475"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1a674a85bc1848bb5d1709da8fe27aabb3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline,&lt;, bool)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="477" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="477" bodyend="484"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1ad9fd4d88786e3224600120a4b10bf3a4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline,&lt;=, bool)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <param>
          <type>&lt;=</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="495" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="495" bodyend="502"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1af7a640dac951e71d6e8ae74bce0b9056" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline, &gt;=, bool)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <param>
          <type>&gt;=</type>
        </param>
        <param>
          <type>bool</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="504" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="504" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1a0857e7be73458e319d748bee1a2d1871" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</definition>
        <argsstring>(inline, -, typename std::iterator_traits&lt; Derived2 &gt;::difference_type)</argsstring>
        <name>HPX_UTIL_ITERATOR_FACADE_INTEROP_HEAD</name>
        <param>
          <type>inline</type>
        </param>
        <param>
          <type>-</type>
        </param>
        <param>
          <type>typename std::iterator_traits&lt; Derived2 &gt;::difference_type</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="513" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="513" bodyend="521"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1abc3dfbb2f9558d47e7806d5323a382c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Category</type>
          </param>
          <param>
            <type>typename Reference</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename Pointer</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Derived</type>
        <definition>HPX_HOST_DEVICE Derived hpx::util::operator+</definition>
        <argsstring>(iterator_facade&lt; Derived, T, Category, Reference, Distance, Pointer &gt; const &amp;it, typename Derived::difference_type n)</argsstring>
        <name>operator+</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1iterator__facade" kindref="compound">iterator_facade</ref>&lt; Derived, T, Category, Reference, Distance, Pointer &gt; const &amp;</type>
          <declname>it</declname>
        </param>
        <param>
          <type>typename Derived::difference_type</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="527" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="527" bodyend="534"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__facade_8hpp_1a44bfcfda631623284b9b44887611257b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Derived</type>
          </param>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Category</type>
          </param>
          <param>
            <type>typename Reference</type>
          </param>
          <param>
            <type>typename Distance</type>
          </param>
          <param>
            <type>typename Pointer</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Derived</type>
        <definition>HPX_HOST_DEVICE Derived hpx::util::operator+</definition>
        <argsstring>(typename Derived::difference_type n, iterator_facade&lt; Derived, T, Category, Reference, Distance, Pointer &gt; const &amp;it)</argsstring>
        <name>operator+</name>
        <param>
          <type>typename Derived::difference_type</type>
          <declname>n</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1iterator__facade" kindref="compound">iterator_facade</ref>&lt; Derived, T, Category, Reference, Distance, Pointer &gt; const &amp;</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="538" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" bodystart="538" bodyend="545"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__range_8hpp_1afee7a7b5efc7ee1fa8ba7c61a49573f7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename traits::range_iterator&lt;Range&gt;::type</defval>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename traits::range_iterator&lt;Range&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structhpx_1_1traits_1_1is__range" kindref="compound">traits::is_range</ref>&lt; Range &gt;::value, <ref refid="classhpx_1_1util_1_1iterator__range" kindref="compound">iterator_range</ref>&lt; Iterator, Sentinel &gt; &gt;::type</type>
        <definition>std::enable_if&lt;traits::is_range&lt;Range&gt;::value, iterator_range&lt;Iterator, Sentinel&gt; &gt;::type hpx::util::make_iterator_range</definition>
        <argsstring>(Range &amp;r)</argsstring>
        <name>make_iterator_range</name>
        <param>
          <type>Range &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" line="66" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__range_8hpp_1acd605a06babb3f6a09f5c24710ff5b54" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Range</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename traits::range_iterator&lt;Range const&gt;::type</defval>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename traits::range_iterator&lt;Range const&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structhpx_1_1traits_1_1is__range" kindref="compound">traits::is_range</ref>&lt; Range &gt;::value, <ref refid="classhpx_1_1util_1_1iterator__range" kindref="compound">iterator_range</ref>&lt; Iterator, Sentinel &gt; &gt;::type</type>
        <definition>std::enable_if&lt;traits::is_range&lt;Range&gt;::value, iterator_range&lt;Iterator, Sentinel&gt; &gt;::type hpx::util::make_iterator_range</definition>
        <argsstring>(Range const &amp;r)</argsstring>
        <name>make_iterator_range</name>
        <param>
          <type>Range const &amp;</type>
          <declname>r</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" line="76" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2iterator__range_8hpp_1a4861c0614344bfc2e047a4bacc0910c9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>Iterator</defval>
          </param>
        </templateparamlist>
        <type>std::enable_if&lt; <ref refid="structhpx_1_1traits_1_1is__iterator" kindref="compound">traits::is_iterator</ref>&lt; Iterator &gt;::value, <ref refid="classhpx_1_1util_1_1iterator__range" kindref="compound">iterator_range</ref>&lt; Iterator, Sentinel &gt; &gt;::type</type>
        <definition>std::enable_if&lt;traits::is_iterator&lt;Iterator&gt;::value, iterator_range&lt;Iterator, Sentinel&gt; &gt;::type hpx::util::make_iterator_range</definition>
        <argsstring>(Iterator iterator, Sentinel sentinel)</argsstring>
        <name>make_iterator_range</name>
        <param>
          <type>Iterator</type>
          <declname>iterator</declname>
        </param>
        <param>
          <type>Sentinel</type>
          <declname>sentinel</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" line="84" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_range.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/iterator_support/include/hpx/iterator_support/iterator_facade.hpp" line="25" column="1"/>
  </compounddef>
</doxygen>
