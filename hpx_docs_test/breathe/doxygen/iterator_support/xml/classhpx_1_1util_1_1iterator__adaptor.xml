<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1iterator__adaptor" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::iterator_adaptor</compoundname>
    <basecompoundref refid="structhpx_1_1util_1_1iterator__facade" prot="public" virt="non-virtual">hpx::util::iterator_facade&lt; Derived, value_type, iterator_category, reference_type, difference_type, Pointer &gt;</basecompoundref>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Base</declname>
        <defname>Base</defname>
      </param>
      <param>
        <type>typename</type>
        <declname>Value</declname>
        <defname>Value</defname>
        <defval>void</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>Category</declname>
        <defname>Category</defname>
        <defval>void</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>Reference</declname>
        <defname>Reference</defname>
        <defval>void</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>Difference</declname>
        <defname>Difference</defname>
        <defval>void</defval>
      </param>
      <param>
        <type>typename</type>
        <declname>Pointer</declname>
        <defname>Pointer</defname>
        <defval>void</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1iterator__adaptor_1aa9f656e2c1cb46622c25aa030eee25ca" prot="protected" static="no">
        <type>hpx::util::detail::iterator_adaptor_base&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::type</type>
        <definition>typedef hpx::util::detail::iterator_adaptor_base&lt;Derived, Base, Value, Category, Reference, Difference, Pointer&gt;::type hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::base_adaptor_type</definition>
        <argsstring></argsstring>
        <name>base_adaptor_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="126" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="126" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1iterator__adaptor_1ae69a27a890207d4b895e7190c164d20b" prot="protected" static="no">
        <type><ref refid="classhpx_1_1util_1_1iterator__adaptor" kindref="compound">iterator_adaptor</ref>&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;</type>
        <definition>typedef iterator_adaptor&lt;Derived, Base, Value, Category, Reference, Difference, Pointer&gt; hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::iterator_adaptor_</definition>
        <argsstring></argsstring>
        <name>iterator_adaptor_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="149" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="149" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1iterator__adaptor_1abbf0cdd461f44819f1c80d480bda9e52" prot="public" static="no">
        <type>Base</type>
        <definition>typedef Base hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::base_type</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="138" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="138" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classhpx_1_1util_1_1iterator__adaptor_1ad00908d93ca5dd8443486a1fe00aeea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class hpx::util::iterator_core_access</definition>
        <argsstring></argsstring>
        <name>hpx::util::iterator_core_access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="128" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="128" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1iterator__adaptor_1a177808db7e36ba030cf18db95d4da09d" prot="private" static="no" mutable="no">
        <type>Base</type>
        <definition>Base hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::iterator_</definition>
        <argsstring></argsstring>
        <name>iterator_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="222" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="222" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a1cb74780e85efc9cf1d955008d1c3e48" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE</type>
        <definition>HPX_HOST_DEVICE hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::iterator_adaptor</definition>
        <argsstring>()</argsstring>
        <name>iterator_adaptor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="131" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="131" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1aee9eb18ff0d00f7161b0bc34769e10eb" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE</type>
        <definition>HPX_HOST_DEVICE hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::iterator_adaptor</definition>
        <argsstring>(Base const &amp;iter)</argsstring>
        <name>iterator_adaptor</name>
        <param>
          <type>Base const &amp;</type>
          <declname>iter</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="133" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="133" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1aca8573df000e27a2a260377f71644895" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE Base const  &amp;</type>
        <definition>HPX_HOST_DEVICE Base const&amp; hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::base</definition>
        <argsstring>() const</argsstring>
        <name>base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="140" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="140" bodyend="143"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a9b3d90754a1f40a764afd271d4abec28" prot="protected" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE Base const  &amp;</type>
        <definition>HPX_HOST_DEVICE Base const&amp; hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::base_reference</definition>
        <argsstring>() const</argsstring>
        <name>base_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="152" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="152" bodyend="155"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a5c65a14b01cc9e6105048e5ef20caf9f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE Base &amp;</type>
        <definition>HPX_HOST_DEVICE Base&amp; hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::base_reference</definition>
        <argsstring>()</argsstring>
        <name>base_reference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="157" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a64874b65d0d7c82f4fe88abc2c0fcee0" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE base_adaptor_type::reference</type>
        <definition>HPX_HOST_DEVICE base_adaptor_type::reference hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="168" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="168" bodyend="171"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a5877c8f463d0ef51a092a50680d82e39" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
          <param>
            <type>typename OtherIterator</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE bool</type>
        <definition>HPX_HOST_DEVICE bool hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::equal</definition>
        <argsstring>(iterator_adaptor&lt; OtherDerived, OtherIterator, V, C, R, D, P &gt; const &amp;x) const</argsstring>
        <name>equal</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1iterator__adaptor" kindref="compound">iterator_adaptor</ref>&lt; OtherDerived, OtherIterator, V, C, R, D, P &gt; const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="175" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="175" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a3b89284e11f71b42b6872c050750a4a8" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DifferenceType</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE void</type>
        <definition>HPX_HOST_DEVICE void hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::advance</definition>
        <argsstring>(DifferenceType n)</argsstring>
        <name>advance</name>
        <param>
          <type>DifferenceType</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="188" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1ae1a236469e487589fa759cd89c7335eb" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>HPX_HOST_DEVICE void</type>
        <definition>HPX_HOST_DEVICE void hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="193" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1aae90d79ce24826203c28353c35e94f83" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Iterator</type>
            <defval>Base</defval>
          </param>
          <param>
            <type>typename Enable</type>
            <defval>typename std::enable_if&lt;                <ref refid="structhpx_1_1traits_1_1is__bidirectional__iterator" kindref="compound">traits::is_bidirectional_iterator</ref>&lt;Iterator&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE void</type>
        <definition>HPX_HOST_DEVICE void hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::decrement</definition>
        <argsstring>()</argsstring>
        <name>decrement</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="202" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1iterator__adaptor_1a2bde62f773b02f1c5058c3f278dc641a" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename OtherDerived</type>
          </param>
          <param>
            <type>typename OtherIterator</type>
          </param>
          <param>
            <type>typename V</type>
          </param>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename R</type>
          </param>
          <param>
            <type>typename D</type>
          </param>
          <param>
            <type>typename P</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE base_adaptor_type::difference_type</type>
        <definition>HPX_HOST_DEVICE base_adaptor_type::difference_type hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::distance_to</definition>
        <argsstring>(iterator_adaptor&lt; OtherDerived, OtherIterator, V, C, R, D, P &gt; const &amp;y) const</argsstring>
        <name>distance_to</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1iterator__adaptor" kindref="compound">iterator_adaptor</ref>&lt; OtherDerived, OtherIterator, V, C, R, D, P &gt; const &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="211" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="211" bodyend="219"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="43">
        <label>hpx::util::detail::iterator_adaptor_base&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::type</label>
        <link refid="structhpx_1_1util_1_1iterator__facade"/>
        <childnode refid="44" relation="public-inheritance">
        </childnode>
      </node>
      <node id="42">
        <label>hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;</label>
        <link refid="classhpx_1_1util_1_1iterator__adaptor"/>
        <childnode refid="43" relation="public-inheritance">
        </childnode>
      </node>
      <node id="44">
        <label>hpx::util::detail::iterator_facade_base&lt; Derived, T, Category, Reference, Distance, Pointer &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="46">
        <label>hpx::util::detail::iterator_adaptor_base&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;::type</label>
        <link refid="structhpx_1_1util_1_1iterator__facade"/>
        <childnode refid="47" relation="public-inheritance">
        </childnode>
      </node>
      <node id="45">
        <label>hpx::util::iterator_adaptor&lt; Derived, Base, Value, Category, Reference, Difference, Pointer &gt;</label>
        <link refid="classhpx_1_1util_1_1iterator__adaptor"/>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>hpx::util::detail::iterator_facade_base&lt; Derived, T, Category, Reference, Distance, Pointer &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" line="122" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/iterator_adaptor.hpp" bodystart="119" bodyend="223"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a3b89284e11f71b42b6872c050750a4a8" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>advance</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1aca8573df000e27a2a260377f71644895" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>base</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1aa9f656e2c1cb46622c25aa030eee25ca" prot="protected" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>base_adaptor_type</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a9b3d90754a1f40a764afd271d4abec28" prot="protected" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>base_reference</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a5c65a14b01cc9e6105048e5ef20caf9f" prot="protected" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>base_reference</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1abbf0cdd461f44819f1c80d480bda9e52" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>base_type</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1aae90d79ce24826203c28353c35e94f83" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>decrement</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a64874b65d0d7c82f4fe88abc2c0fcee0" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>dereference</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a2bde62f773b02f1c5058c3f278dc641a" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>distance_to</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a5877c8f463d0ef51a092a50680d82e39" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>equal</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1ad00908d93ca5dd8443486a1fe00aeea2" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>hpx::util::iterator_core_access</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1ae1a236469e487589fa759cd89c7335eb" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>increment</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a177808db7e36ba030cf18db95d4da09d" prot="private" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>iterator_</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1a1cb74780e85efc9cf1d955008d1c3e48" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>iterator_adaptor</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1aee9eb18ff0d00f7161b0bc34769e10eb" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>iterator_adaptor</name></member>
      <member refid="classhpx_1_1util_1_1iterator__adaptor_1ae69a27a890207d4b895e7190c164d20b" prot="protected" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>iterator_adaptor_</name></member>
      <member refid="structhpx_1_1util_1_1iterator__facade_1a027b7d498caf7d0cefb2fbb8d9083ebc" prot="public" virt="non-virtual"><scope>hpx::util::iterator_adaptor</scope><name>iterator_facade</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
