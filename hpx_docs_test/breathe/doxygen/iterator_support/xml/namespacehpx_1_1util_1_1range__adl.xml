<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1range__adl" kind="namespace" language="C++">
    <compoundname>hpx::util::range_adl</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1abfdc1ecaac459e35e307015701cc13d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename detail::iterator&lt;C&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Iterator</type>
        <definition>HPX_HOST_DEVICE Iterator hpx::util::range_adl::begin</definition>
        <argsstring>(C &amp;c) noexcept(noexcept(detail::begin_impl(c, 0L)))</argsstring>
        <name>begin</name>
        <param>
          <type>C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="165" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1a6ffe6989784be72324271be4f9262848" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename detail::iterator&lt;C const&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Iterator</type>
        <definition>HPX_HOST_DEVICE Iterator hpx::util::range_adl::begin</definition>
        <argsstring>(C const &amp;c) noexcept(noexcept(detail::begin_impl(c, 0L)))</argsstring>
        <name>begin</name>
        <param>
          <type>C const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="173" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1ae82ff3f58c8becdad4af1f68297b3725" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename detail::sentinel&lt;C&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Sentinel</type>
        <definition>HPX_HOST_DEVICE Sentinel hpx::util::range_adl::end</definition>
        <argsstring>(C &amp;c) noexcept(noexcept(detail::end_impl(c, 0L)))</argsstring>
        <name>end</name>
        <param>
          <type>C &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="181" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="181" bodyend="185"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1a0da3cd92304dbd70ce3cf40668817956" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename detail::sentinel&lt;C const&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE Sentinel</type>
        <definition>HPX_HOST_DEVICE Sentinel hpx::util::range_adl::end</definition>
        <argsstring>(C const &amp;c) noexcept(noexcept(detail::end_impl(c, 0L)))</argsstring>
        <name>end</name>
        <param>
          <type>C const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="189" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="189" bodyend="193"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1afc6e6b1c9da8ddeeb63a39065efb28f2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename detail::iterator&lt;C const&gt;::type</defval>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename detail::sentinel&lt;C const&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::size_t</type>
        <definition>HPX_HOST_DEVICE std::size_t hpx::util::range_adl::size</definition>
        <argsstring>(C const &amp;c) noexcept(noexcept(detail::size_impl(c, 0L)))</argsstring>
        <name>size</name>
        <param>
          <type>C const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="198" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="198" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2iterator__support_2range_8hpp_1ad2b508dc7fe1a4858f71ca0ad32e8247" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename C</type>
          </param>
          <param>
            <type>typename Iterator</type>
            <defval>typename detail::iterator&lt;C const&gt;::type</defval>
          </param>
          <param>
            <type>typename Sentinel</type>
            <defval>typename detail::sentinel&lt;C const&gt;::type</defval>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE bool</type>
        <definition>HPX_HOST_DEVICE bool hpx::util::range_adl::empty</definition>
        <argsstring>(C const &amp;c) noexcept(noexcept(detail::empty_impl(c, 0L)))</argsstring>
        <name>empty</name>
        <param>
          <type>C const &amp;</type>
          <declname>c</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="207" column="1" bodyfile="libs/iterator_support/include/hpx/iterator_support/range.hpp" bodystart="207" bodyend="211"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/iterator_support/include/hpx/iterator_support/range.hpp" line="162" column="1"/>
  </compounddef>
</doxygen>
