<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1exception__info" kind="class" language="C++" prot="public">
    <compoundname>hpx::exception_info</compoundname>
    <derivedcompoundref refid="structhpx_1_1detail_1_1exception__with__info__base" prot="public" virt="non-virtual">hpx::detail::exception_with_info_base</derivedcompoundref>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classhpx_1_1exception__info_1a3bf7d1c60a9fbcce56e5f1851f92985b" prot="private" static="no">
        <type>std::shared_ptr&lt; detail::exception_info_node_base &gt;</type>
        <definition>using hpx::exception_info::node_ptr =  std::shared_ptr&lt;detail::exception_info_node_base&gt;</definition>
        <argsstring></argsstring>
        <name>node_ptr</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="122" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="122" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1exception__info_1a20d02554a25bd9ffa1870f59b0cb3978" prot="private" static="no" mutable="no">
        <type>node_ptr</type>
        <definition>node_ptr hpx::exception_info::_data</definition>
        <argsstring></argsstring>
        <name>_data</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="160" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="160" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1exception__info_1a736bda3358550804c90c22235e0723c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::exception_info::exception_info</definition>
        <argsstring>() noexcept</argsstring>
        <name>exception_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="125" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="125" bodyend="128"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1a5e4e98a7f3833245a8218a6d88ae9cc0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::exception_info::exception_info</definition>
        <argsstring>(exception_info const &amp;other) noexcept=default</argsstring>
        <name>exception_info</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="130" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1a0504fb456cac1b8147f98ae6b176c1f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::exception_info::exception_info</definition>
        <argsstring>(exception_info &amp;&amp;other) noexcept=default</argsstring>
        <name>exception_info</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="131" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1a4fc99455deb68cd1ff85180d5c1f5b0f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;</type>
        <definition>exception_info&amp; hpx::exception_info::operator=</definition>
        <argsstring>(exception_info const &amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1a3699ab07555515258a45a7dad88745fd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;</type>
        <definition>exception_info&amp; hpx::exception_info::operator=</definition>
        <argsstring>(exception_info &amp;&amp;other) noexcept=default</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="135" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1aaabf5fb27721f5c751755a7e7ea42d50" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hpx::exception_info::~exception_info</definition>
        <argsstring>()=default</argsstring>
        <name>~exception_info</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="137" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1aee5891e4dcdc6d4280b9b6fc18d0b300" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>ErrorInfo</declname>
            <defname>ErrorInfo</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;</type>
        <definition>exception_info&amp; hpx::exception_info::set</definition>
        <argsstring>(ErrorInfo &amp;&amp;... tagged_values)</argsstring>
        <name>set</name>
        <param>
          <type>ErrorInfo &amp;&amp;...</type>
          <declname>tagged_values</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="140" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="140" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1exception__info_1a5185a3dd356feafdff056cc4004d15b4" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Tag</type>
          </param>
        </templateparamlist>
        <type>Tag::type const  *</type>
        <definition>Tag::type const* hpx::exception_info::get</definition>
        <argsstring>() const noexcept</argsstring>
        <name>get</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="152" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="152" bodyend="157"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="11">
        <label>hpx::exception_info</label>
        <link refid="classhpx_1_1exception__info"/>
      </node>
      <node id="12">
        <label>hpx::detail::exception_with_info_base</label>
        <childnode refid="11" relation="public-inheritance">
        </childnode>
      </node>
      <node id="13">
        <label>hpx::detail::exception_with_info&lt; E &gt;</label>
        <childnode refid="12" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="121" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="120" bodyend="161"/>
    <listofallmembers>
      <member refid="classhpx_1_1exception__info_1a20d02554a25bd9ffa1870f59b0cb3978" prot="private" virt="non-virtual"><scope>hpx::exception_info</scope><name>_data</name></member>
      <member refid="classhpx_1_1exception__info_1a736bda3358550804c90c22235e0723c6" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>exception_info</name></member>
      <member refid="classhpx_1_1exception__info_1a5e4e98a7f3833245a8218a6d88ae9cc0" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>exception_info</name></member>
      <member refid="classhpx_1_1exception__info_1a0504fb456cac1b8147f98ae6b176c1f3" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>exception_info</name></member>
      <member refid="classhpx_1_1exception__info_1a5185a3dd356feafdff056cc4004d15b4" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>get</name></member>
      <member refid="classhpx_1_1exception__info_1a3bf7d1c60a9fbcce56e5f1851f92985b" prot="private" virt="non-virtual"><scope>hpx::exception_info</scope><name>node_ptr</name></member>
      <member refid="classhpx_1_1exception__info_1a4fc99455deb68cd1ff85180d5c1f5b0f" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>operator=</name></member>
      <member refid="classhpx_1_1exception__info_1a3699ab07555515258a45a7dad88745fd" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>operator=</name></member>
      <member refid="classhpx_1_1exception__info_1aee5891e4dcdc6d4280b9b6fc18d0b300" prot="public" virt="non-virtual"><scope>hpx::exception_info</scope><name>set</name></member>
      <member refid="classhpx_1_1exception__info_1aaabf5fb27721f5c751755a7e7ea42d50" prot="public" virt="virtual"><scope>hpx::exception_info</scope><name>~exception_info</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
