<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx" kind="namespace" language="C++">
    <compoundname>hpx</compoundname>
    <innerclass refid="classhpx_1_1error__code" prot="public">hpx::error_code</innerclass>
    <innerclass refid="structhpx_1_1error__info" prot="public">hpx::error_info</innerclass>
    <innerclass refid="classhpx_1_1exception" prot="public">hpx::exception</innerclass>
    <innerclass refid="classhpx_1_1exception__info" prot="public">hpx::exception_info</innerclass>
    <innerclass refid="classhpx_1_1exception__list" prot="public">hpx::exception_list</innerclass>
    <innerclass refid="structhpx_1_1thread__interrupted" prot="public">hpx::thread_interrupted</innerclass>
      <sectiondef kind="user-defined">
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a154bc03d8bffebc41d36767f98aea4b0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
<para>Returns a new <ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref> constructed from the given parameters. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="248" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="248" bodyend="251"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a61fb06ff5a3f5947e3880b4b1a3e61cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, char const *func, char const *file, long line, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>line</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="252" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="252" bodyend="256"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a1e7c6cb205e954cff6a0f5ebc16910dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, char const *msg, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
<para>Returns error_code(e, msg, mode). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="259" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="259" bodyend="263"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a9a429ed3e3c4c2caa9318db4e3aa59f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, char const *msg, char const *func, char const *file, long line, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>line</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="264" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="264" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a9afcc24e5e65a909548c8c46bae77e55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, std::string const &amp;msg, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
<para>Returns error_code(e, msg, mode). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="271" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="271" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a9f2d15bb1a55b29529922cc8e38397bc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(error e, std::string const &amp;msg, char const *func, char const *file, long line, throwmode mode=plain)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>error</type>
          <declname>e</declname>
        </param>
        <param>
          <type>std::string const &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>func</declname>
        </param>
        <param>
          <type>char const *</type>
          <declname>file</declname>
        </param>
        <param>
          <type>long</type>
          <declname>line</declname>
        </param>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="276" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a51904e4edf3e4e02436cb8cf39f427f7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_error_code</definition>
        <argsstring>(std::exception_ptr const &amp;e)</argsstring>
        <name>make_error_code</name>
        <param>
          <type>std::exception_ptr const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="281" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="281" bodyend="284"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663" prot="public" static="no">
        <name>error</name>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663aca008d80aec0aed361d392d4ea09adbb" prot="public">
          <name>success</name>
          <initializer>= 0</initializer>
          <briefdescription>
<para>The operation was successful. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ae6d4a6406208bade0f1a167020a72042" prot="public">
          <name>no_success</name>
          <initializer>= 1</initializer>
          <briefdescription>
<para>The operation did failed, but not in an unexpected manner. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ac947ec2d2ab5033a05ac3cfc58d4e80b" prot="public">
          <name>not_implemented</name>
          <initializer>= 2</initializer>
          <briefdescription>
<para>The operation is not implemented. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a3432e5de5a8148798886115101b4a0bd" prot="public">
          <name>out_of_memory</name>
          <initializer>= 3</initializer>
          <briefdescription>
<para>The operation caused an out of memory condition. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a791124b4f9f2743b5e0007a8db3e6ba2" prot="public">
          <name>bad_action_code</name>
          <initializer>= 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663adde80739c949dcda70afc6a19b406a33" prot="public">
          <name>bad_component_type</name>
          <initializer>= 5</initializer>
          <briefdescription>
<para>The specified component type is not known or otherwise invalid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a44a71ac839ebd0cc0525cd60f23fcc1d" prot="public">
          <name>network_error</name>
          <initializer>= 6</initializer>
          <briefdescription>
<para>A generic network error occurred. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af12106c406a20ef351d13a7d42a98edb" prot="public">
          <name>version_too_new</name>
          <initializer>= 7</initializer>
          <briefdescription>
<para>The version of the network representation for this object is too new. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a83cbe80f41a52a6ddc505163f458037c" prot="public">
          <name>version_too_old</name>
          <initializer>= 8</initializer>
          <briefdescription>
<para>The version of the network representation for this object is too old. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ae4195b751066048cc4ce2b3a2b238355" prot="public">
          <name>version_unknown</name>
          <initializer>= 9</initializer>
          <briefdescription>
<para>The version of the network representation for this object is unknown. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663add1b40835025fa6eb0c0fec9e9a91dac" prot="public">
          <name>unknown_component_address</name>
          <initializer>= 10</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a82f56d8efc405c3f67ed14f612bdfafa" prot="public">
          <name>duplicate_component_address</name>
          <initializer>= 11</initializer>
          <briefdescription>
<para>The given global id has already been registered. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663abfb0c9b0ab71f8bcbe9a40c88b6b6959" prot="public">
          <name>invalid_status</name>
          <initializer>= 12</initializer>
          <briefdescription>
<para>The operation was executed in an invalid status. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ad6980c3ad7fd111b69144dbf5323120f" prot="public">
          <name>bad_parameter</name>
          <initializer>= 13</initializer>
          <briefdescription>
<para>One of the supplied parameters is invalid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a389551c24ac850d917d405c0d9e0b4e5" prot="public">
          <name>internal_server_error</name>
          <initializer>= 14</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a013bf6b18f8179441729db6f5b5b9317" prot="public">
          <name>service_unavailable</name>
          <initializer>= 15</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663aeabcd8a14f94fb6b91076ea6c36c6d43" prot="public">
          <name>bad_request</name>
          <initializer>= 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a582c6d5a63f17052883d0e149c47ffee" prot="public">
          <name>repeated_request</name>
          <initializer>= 17</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a9fb3f6eea0cb547385d10424e33efffd" prot="public">
          <name>lock_error</name>
          <initializer>= 18</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a3316be183b7717bad1c3afa4677a5ad5" prot="public">
          <name>duplicate_console</name>
          <initializer>= 19</initializer>
          <briefdescription>
<para>There is more than one console locality. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a41c12b0a95b092580485f45bdf1a9012" prot="public">
          <name>no_registered_console</name>
          <initializer>= 20</initializer>
          <briefdescription>
<para>There is no registered console locality available. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a3ce19b6a4402ac3d097da32d37c05e13" prot="public">
          <name>startup_timed_out</name>
          <initializer>= 21</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a87684aa8b82891e4e0df7497d8f66e0c" prot="public">
          <name>uninitialized_value</name>
          <initializer>= 22</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a578be2bb16a0f9a494103414a392c971" prot="public">
          <name>bad_response_type</name>
          <initializer>= 23</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ab657307ce228d99a4bc8fb7f88bdbca5" prot="public">
          <name>deadlock</name>
          <initializer>= 24</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a1487984adb75f03a51df61d2dc796d93" prot="public">
          <name>assertion_failure</name>
          <initializer>= 25</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a05ec9382bba0a20ecfa536cc11e52288" prot="public">
          <name>null_thread_id</name>
          <initializer>= 26</initializer>
          <briefdescription>
<para>Attempt to invoke a API function from a non-HPX thread. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a05a10a9917188ab9c90efc2580e10b86" prot="public">
          <name>invalid_data</name>
          <initializer>= 27</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663adaabe7896fcf922ad9d1b1dd252bdb8c" prot="public">
          <name>yield_aborted</name>
          <initializer>= 28</initializer>
          <briefdescription>
<para>The yield operation was aborted. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a6a380e09b4eab4586edef3c477306f1d" prot="public">
          <name>dynamic_link_failure</name>
          <initializer>= 29</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a650fdd8b181791c2d413f36c52df57e7" prot="public">
          <name>commandline_option_error</name>
          <initializer>= 30</initializer>
          <briefdescription>
<para>One of the options given on the command line is erroneous. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a9cbfcd0d11f67e98346743910f0a8734" prot="public">
          <name>serialization_error</name>
          <initializer>= 31</initializer>
          <briefdescription>
<para>There was an error during serialization of this object. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a15fc69ad2726ae44d726b46ca099495f" prot="public">
          <name>unhandled_exception</name>
          <initializer>= 32</initializer>
          <briefdescription>
<para>An unhandled exception has been caught. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af84f866007602480dcdabf76d0edb7e9" prot="public">
          <name>kernel_error</name>
          <initializer>= 33</initializer>
          <briefdescription>
<para>The OS kernel reported an error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a268f1aa1007bf6d19185750eb7dd4cb6" prot="public">
          <name>broken_task</name>
          <initializer>= 34</initializer>
          <briefdescription>
<para>The task associated with this future object is not available anymore. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af8c8661032ad0b13d664a5d0da9f2897" prot="public">
          <name>task_moved</name>
          <initializer>= 35</initializer>
          <briefdescription>
<para>The task associated with this future object has been moved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ab2f9767e63f460403a4d04c2653f116f" prot="public">
          <name>task_already_started</name>
          <initializer>= 36</initializer>
          <briefdescription>
<para>The task associated with this future object has already been started. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a1888d3cf3b448da0638359fb4b6f7389" prot="public">
          <name>future_already_retrieved</name>
          <initializer>= 37</initializer>
          <briefdescription>
<para>The future object has already been retrieved. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af33732f3591315ee4f5afc7690e9ff7a" prot="public">
          <name>promise_already_satisfied</name>
          <initializer>= 38</initializer>
          <briefdescription>
<para>The value for this future object has already been set. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af347ea8bc644c07f8598afa1125ed223" prot="public">
          <name>future_does_not_support_cancellation</name>
          <initializer>= 39</initializer>
          <briefdescription>
<para>The future object does not support cancellation. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a8542d0646324b0101ce30772ed37dbf2" prot="public">
          <name>future_can_not_be_cancelled</name>
          <initializer>= 40</initializer>
          <briefdescription>
<para>The future can&apos;t be canceled at this time. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a2e101d20d9d18d59763eeab48c2fc737" prot="public">
          <name>no_state</name>
          <initializer>= 41</initializer>
          <briefdescription>
<para>The future object has no valid shared state. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ace0718584183efa14be4d43cfbd4bc36" prot="public">
          <name>broken_promise</name>
          <initializer>= 42</initializer>
          <briefdescription>
<para>The promise has been deleted. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a2a3bd9cf347766209afc71ed6894da7e" prot="public">
          <name>thread_resource_error</name>
          <initializer>= 43</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a1679da0b8f7b8f1d17ada849fb63e76d" prot="public">
          <name>future_cancelled</name>
          <initializer>= 44</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663ab1d1486a2e56a88c0d4b487206e01271" prot="public">
          <name>thread_cancelled</name>
          <initializer>= 45</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a1f481a109086007b837ce394cc6add80" prot="public">
          <name>thread_not_interruptable</name>
          <initializer>= 46</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a7dcb6be2702321cc7dd3e3d04043879c" prot="public">
          <name>duplicate_component_id</name>
          <initializer>= 47</initializer>
          <briefdescription>
<para>The component type has already been registered. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a5ecb4cecdedd9f2cdce3c78461731e97" prot="public">
          <name>unknown_error</name>
          <initializer>= 48</initializer>
          <briefdescription>
<para>An unknown error occurred. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a64c656cad0d9eb35e006015d1c0e3b90" prot="public">
          <name>bad_plugin_type</name>
          <initializer>= 49</initializer>
          <briefdescription>
<para>The specified plugin type is not known or otherwise invalid. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663aee903226fce36e7aff2be519526c3f5d" prot="public">
          <name>filesystem_error</name>
          <initializer>= 50</initializer>
          <briefdescription>
<para>The specified file does not exist or other filesystem related error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a7f789101d6c061aa2188b5ff27c49c6f" prot="public">
          <name>bad_function_call</name>
          <initializer>= 51</initializer>
          <briefdescription>
<para>equivalent of std::bad_function_call </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a244739d91451aca2344a5a40969a26e5" prot="public">
          <name>task_canceled_exception</name>
          <initializer>= 52</initializer>
          <briefdescription>
<para>parallel::v2::task_canceled_exception </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a135cea481091b4abd24d544aba811058" prot="public">
          <name>task_block_not_active</name>
          <initializer>= 53</initializer>
          <briefdescription>
<para>task_region is not active </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663af12e8a467ec1a58e3717b8c71d4de7ad" prot="public">
          <name>out_of_range</name>
          <initializer>= 54</initializer>
          <briefdescription>
<para>Equivalent to std::out_of_range. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a7aa5cac3ef81e8beb69c5a2f19621a96" prot="public">
          <name>length_error</name>
          <initializer>= 55</initializer>
          <briefdescription>
<para>Equivalent to std::length_error. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2error_8hpp_1aac5bec895c3a4b279fb5d442a87a6663a041510b51e9bab13f33b6f69134675f4" prot="public">
          <name>migration_needs_retry</name>
          <initializer>= 56</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
<para>migration failed because of global race, retry </para>          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Possible error conditions. </para>        </briefdescription>
        <detaileddescription>
<para>This enumeration lists all possible error conditions which can be reported from any of the API functions. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error.hpp" line="27" column="1" bodyfile="libs/errors/include/hpx/errors/error.hpp" bodystart="26" bodyend="151"/>
      </memberdef>
      <memberdef kind="enum" id="hpx_2errors_2exception__fwd_8hpp_1afe4f36b1e296ae734bcfa9f552b4af94" prot="public" static="no">
        <name>throwmode</name>
        <enumvalue id="hpx_2errors_2exception__fwd_8hpp_1afe4f36b1e296ae734bcfa9f552b4af94a4bb503f987a72e31443aa44bf9a9714c" prot="public">
          <name>plain</name>
          <initializer>= 0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2exception__fwd_8hpp_1afe4f36b1e296ae734bcfa9f552b4af94ab5f8a596fef817e576a4d1277466544c" prot="public">
          <name>rethrow</name>
          <initializer>= 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="hpx_2errors_2exception__fwd_8hpp_1afe4f36b1e296ae734bcfa9f552b4af94a056bfaf2e600091151e27eb7a0809eb9" prot="public">
          <name>lightweight</name>
          <initializer>=
            0x80</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Encode error category for new <ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref>. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_fwd.hpp" line="28" column="1" bodyfile="libs/errors/include/hpx/errors/exception_fwd.hpp" bodystart="27" bodyend="36"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpx_2errors_2exception_8hpp_1ae87157cfcb7c164d0d6ae3245b046bed" prot="public" static="no">
        <type>std::function&lt; <ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref>(std::string const  &amp;, std::string const  &amp;, long, std::string const  &amp;)&gt;</type>
        <definition>using hpx::custom_exception_info_handler_type = typedef std::function&lt;hpx::exception_info( std::string const&amp;, std::string const&amp;, long, std::string const&amp;)&gt;</definition>
        <argsstring></argsstring>
        <name>custom_exception_info_handler_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="108" column="1" bodyfile="libs/errors/include/hpx/errors/exception.hpp" bodystart="110" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2errors_2exception_8hpp_1ad9160c2938fee0aa9515228d172251cf" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using hpx::pre_exception_handler_type = typedef std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>pre_exception_handler_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="115" column="1" bodyfile="libs/errors/include/hpx/errors/exception.hpp" bodystart="115" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="hpx_2errors_2exception__fwd_8hpp_1a3c805fbcc4bc26b262633b5134b42014" prot="public" static="no" mutable="no">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::throws</definition>
        <argsstring></argsstring>
        <name>throws</name>
        <briefdescription>
<para>Predefined <ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref> object used as &quot;throw on error&quot; tag. </para>        </briefdescription>
        <detaileddescription>
<para>The predefined <ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref> object <emphasis>hpx::throws</emphasis> is supplied for use as a &quot;throw on error&quot; tag.</para><para>Functions that specify an argument in the form &apos;<ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref>&amp; ec=throws&apos; (with appropriate namespace qualifiers), have the following error handling semantics:</para><para>If &amp;ec != &amp;throws and an error occurred: ec.value() returns the implementation specific error number for the particular error that occurred and ec.category() returns the error_category for ec.value().</para><para>If &amp;ec != &amp;throws and an error did not occur, ec.clear().</para><para>If an error occurs and &amp;ec == &amp;throws, the function throws an exception of type <emphasis><ref refid="classhpx_1_1exception" kindref="compound">hpx::exception</ref></emphasis> or of a type derived from it. The exception&apos;s <emphasis>get_errorcode()</emphasis> member function returns a reference to an <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis> object with the behavior as specified above. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_fwd.hpp" line="59" column="1" bodyfile="libs/errors/include/hpx/errors/exception_fwd.hpp" bodystart="59" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1a9ffb2074fff8364079a75b53eaa4d374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::set_custom_exception_info_handler</definition>
        <argsstring>(custom_exception_info_handler_type f)</argsstring>
        <name>set_custom_exception_info_handler</name>
        <param>
          <type>custom_exception_info_handler_type</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="112" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1a98c2385f91ecef937a34f09eec8817a5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::set_pre_exception_handler</definition>
        <argsstring>(pre_exception_handler_type f)</argsstring>
        <name>set_pre_exception_handler</name>
        <param>
          <type>pre_exception_handler_type</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="117" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1ad28bf0e2a07a99c4d3eedaf1339af32c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::get_error_what</definition>
        <argsstring>(exception_info const &amp;xi)</argsstring>
        <name>get_error_what</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <briefdescription>
<para>Return the error message of the thrown exception. </para>        </briefdescription>
        <detaileddescription>
<para>The function <emphasis>hpx::get_error_what</emphasis> can be used to extract the diagnostic information element representing the error message as stored in the given exception instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xi</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter <computeroutput>e</computeroutput> will be inspected for the requested diagnostic information elements which have been stored at the point where the exception was thrown. This parameter can be one of the following types: <emphasis><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref></emphasis>, <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis>, <emphasis>std::exception</emphasis>, or <emphasis>std::exception_ptr</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The error message stored in the exception If the exception instance does not hold this information, the function will return an empty string.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(if one of the required allocations fails)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><emphasis>hpx::diagnostic_information()</emphasis>, <emphasis>hpx::get_error_host_name()</emphasis>, <emphasis>hpx::get_error_process_id()</emphasis>, <emphasis>hpx::get_error_function_name()</emphasis>, <emphasis>hpx::get_error_file_name()</emphasis>, <emphasis>hpx::get_error_line_number()</emphasis>, <emphasis>hpx::get_error_os_thread()</emphasis>, <emphasis>hpx::get_error_thread_id()</emphasis>, <emphasis>hpx::get_error_thread_description()</emphasis>, <emphasis>hpx::get_error()</emphasis> <emphasis>hpx::get_error_backtrace()</emphasis>, <emphasis>hpx::get_error_env()</emphasis>, <emphasis>hpx::get_error_config()</emphasis>, <emphasis>hpx::get_error_state()</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="343" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1af6349dbd4e6dd99a3dfd5ff6e4e74c21" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>error</type>
        <definition>error hpx::get_error</definition>
        <argsstring>(hpx::exception const &amp;e)</argsstring>
        <name>get_error</name>
        <param>
          <type><ref refid="classhpx_1_1exception" kindref="compound">hpx::exception</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
<para>Return the error code value of the exception thrown. </para>        </briefdescription>
        <detaileddescription>
<para>The function <emphasis>hpx::get_error</emphasis> can be used to extract the diagnostic information element representing the error value code as stored in the given exception instance.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>e</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter <computeroutput>e</computeroutput> will be inspected for the requested diagnostic information elements which have been stored at the point where the exception was thrown. This parameter can be one of the following types: <emphasis><ref refid="classhpx_1_1exception" kindref="compound">hpx::exception</ref></emphasis>, <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis>, or <emphasis>std::exception_ptr</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The error value code of the locality where the exception was thrown. If the exception instance does not hold this information, the function will return <emphasis>hpx::naming::invalid_locality_id</emphasis>.</para></simplesect>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>nothing</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><emphasis>hpx::diagnostic_information()</emphasis>, <emphasis>hpx::get_error_host_name()</emphasis>, <emphasis>hpx::get_error_process_id()</emphasis>, <emphasis>hpx::get_error_function_name()</emphasis>, <emphasis>hpx::get_error_file_name()</emphasis>, <emphasis>hpx::get_error_line_number()</emphasis>, <emphasis>hpx::get_error_os_thread()</emphasis>, <emphasis>hpx::get_error_thread_id()</emphasis>, <emphasis>hpx::get_error_thread_description()</emphasis>, <emphasis>hpx::get_error_backtrace()</emphasis>, <emphasis>hpx::get_error_env()</emphasis>, <emphasis>hpx::get_error_what()</emphasis>, <emphasis>hpx::get_error_config()</emphasis>, <emphasis>hpx::get_error_state()</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="397" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1a68dd22b15b787540208e0977a2e4b53d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>error</type>
        <definition>error hpx::get_error</definition>
        <argsstring>(hpx::error_code const &amp;e)</argsstring>
        <name>get_error</name>
        <param>
          <type><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref> const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="400" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1a754d205ce3b220a254c65f3d124ac405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::get_error_function_name</definition>
        <argsstring>(hpx::exception_info const &amp;xi)</argsstring>
        <name>get_error_function_name</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <briefdescription>
<para>Return the function name from which the exception was thrown. </para>        </briefdescription>
        <detaileddescription>
<para>The function <emphasis>hpx::get_error_function_name</emphasis> can be used to extract the diagnostic information element representing the name of the function as stored in the given exception instance.</para><para><simplesect kind="return"><para>The name of the function from which the exception was thrown. If the exception instance does not hold this information, the function will return an empty string.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xi</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter <computeroutput>e</computeroutput> will be inspected for the requested diagnostic information elements which have been stored at the point where the exception was thrown. This parameter can be one of the following types: <emphasis><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref></emphasis>, <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis>, <emphasis>std::exception</emphasis>, or <emphasis>std::exception_ptr</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(if one of the required allocations fails)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><emphasis>hpx::diagnostic_information()</emphasis>, <emphasis>hpx::get_error_host_name()</emphasis>, <emphasis>hpx::get_error_process_id()</emphasis> <emphasis>hpx::get_error_file_name()</emphasis>, <emphasis>hpx::get_error_line_number()</emphasis>, <emphasis>hpx::get_error_os_thread()</emphasis>, <emphasis>hpx::get_error_thread_id()</emphasis>, <emphasis>hpx::get_error_thread_description()</emphasis>, <emphasis>hpx::get_error()</emphasis>, <emphasis>hpx::get_error_backtrace()</emphasis>, <emphasis>hpx::get_error_env()</emphasis>, <emphasis>hpx::get_error_what()</emphasis>, <emphasis>hpx::get_error_config()</emphasis>, <emphasis>hpx::get_error_state()</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="434" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1a0af92c8ff70bbc40c078ef06a2ff4647" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::get_error_file_name</definition>
        <argsstring>(hpx::exception_info const &amp;xi)</argsstring>
        <name>get_error_file_name</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <briefdescription>
<para>Return the (source code) file name of the function from which the exception was thrown. </para>        </briefdescription>
        <detaileddescription>
<para>The function <emphasis>hpx::get_error_file_name</emphasis> can be used to extract the diagnostic information element representing the name of the source file as stored in the given exception instance.</para><para><simplesect kind="return"><para>The name of the source file of the function from which the exception was thrown. If the exception instance does not hold this information, the function will return an empty string.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xi</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter <computeroutput>e</computeroutput> will be inspected for the requested diagnostic information elements which have been stored at the point where the exception was thrown. This parameter can be one of the following types: <emphasis><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref></emphasis>, <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis>, <emphasis>std::exception</emphasis>, or <emphasis>std::exception_ptr</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>std::bad_alloc</parametername>
</parameternamelist>
<parameterdescription>
<para>(if one of the required allocations fails)</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><emphasis>hpx::diagnostic_information()</emphasis>, <emphasis>hpx::get_error_host_name()</emphasis>, <emphasis>hpx::get_error_process_id()</emphasis>, <emphasis>hpx::get_error_function_name()</emphasis>, <emphasis>hpx::get_error_line_number()</emphasis>, <emphasis>hpx::get_error_os_thread()</emphasis>, <emphasis>hpx::get_error_thread_id()</emphasis>, <emphasis>hpx::get_error_thread_description()</emphasis>, <emphasis>hpx::get_error()</emphasis>, <emphasis>hpx::get_error_backtrace()</emphasis>, <emphasis>hpx::get_error_env()</emphasis>, <emphasis>hpx::get_error_what()</emphasis>, <emphasis>hpx::get_error_config()</emphasis>, <emphasis>hpx::get_error_state()</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="477" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception_8hpp_1ae0112fceccd5a51798ed81d88906468e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>long</type>
        <definition>long hpx::get_error_line_number</definition>
        <argsstring>(hpx::exception_info const &amp;xi)</argsstring>
        <name>get_error_line_number</name>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <briefdescription>
<para>Return the line number in the (source code) file of the function from which the exception was thrown. </para>        </briefdescription>
        <detaileddescription>
<para>The function <emphasis>hpx::get_error_line_number</emphasis> can be used to extract the diagnostic information element representing the line number as stored in the given exception instance.</para><para><simplesect kind="return"><para>The line number of the place where the exception was thrown. If the exception instance does not hold this information, the function will return -1.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>xi</parametername>
</parameternamelist>
<parameterdescription>
<para>The parameter <computeroutput>e</computeroutput> will be inspected for the requested diagnostic information elements which have been stored at the point where the exception was thrown. This parameter can be one of the following types: <emphasis><ref refid="classhpx_1_1exception__info" kindref="compound">hpx::exception_info</ref></emphasis>, <emphasis><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref></emphasis>, <emphasis>std::exception</emphasis>, or <emphasis>std::exception_ptr</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<parameterlist kind="exception"><parameteritem>
<parameternamelist>
<parametername>nothing</parametername>
</parameternamelist>
<parameterdescription>
<para></para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="see"><para><emphasis>hpx::diagnostic_information()</emphasis>, <emphasis>hpx::get_error_host_name()</emphasis>, <emphasis>hpx::get_error_process_id()</emphasis>, <emphasis>hpx::get_error_function_name()</emphasis>, <emphasis>hpx::get_error_file_name()</emphasis> <emphasis>hpx::get_error_os_thread()</emphasis>, <emphasis>hpx::get_error_thread_id()</emphasis>, <emphasis>hpx::get_error_thread_description()</emphasis>, <emphasis>hpx::get_error()</emphasis>, <emphasis>hpx::get_error_backtrace()</emphasis>, <emphasis>hpx::get_error_env()</emphasis>, <emphasis>hpx::get_error_what()</emphasis>, <emphasis>hpx::get_error_config()</emphasis>, <emphasis>hpx::get_error_state()</emphasis> </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception.hpp" line="518" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1a5b4114afa3b2621be9c2581392931950" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>HPX_NORETURN void</type>
        <definition>HPX_NORETURN void hpx::throw_with_info</definition>
        <argsstring>(E &amp;&amp;e, exception_info &amp;&amp;xi=exception_info())</argsstring>
        <name>throw_with_info</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> &amp;&amp;</type>
          <declname>xi</declname>
          <defval><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref>()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="197" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="197" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1abf1ccc381aace155c6907ca4b7d14a3b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type>HPX_NORETURN void</type>
        <definition>HPX_NORETURN void hpx::throw_with_info</definition>
        <argsstring>(E &amp;&amp;e, exception_info const &amp;xi)</argsstring>
        <name>throw_with_info</name>
        <param>
          <type>E &amp;&amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> const &amp;</type>
          <declname>xi</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="216" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="216" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1acda348f9286f4f8adf9976792272c226" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> *</type>
        <definition>exception_info* hpx::get_exception_info</definition>
        <argsstring>(E &amp;e)</argsstring>
        <name>get_exception_info</name>
        <param>
          <type>E &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="223" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="223" bodyend="226"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1a5c6c451c5704ac8b4d0d727e1749258e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1exception__info" kindref="compound">exception_info</ref> const  *</type>
        <definition>exception_info const* hpx::get_exception_info</definition>
        <argsstring>(E const &amp;e)</argsstring>
        <name>get_exception_info</name>
        <param>
          <type>E const &amp;</type>
          <declname>e</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="229" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="229" bodyend="232"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1a076f4e242682de9693e1125b8a0a83ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename E</type>
          </param>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hpx::invoke_with_exception_info</definition>
        <argsstring>(E const &amp;e, F &amp;&amp;f) -&gt; decltype(std::forward&lt; F &gt;(f)(std::declval&lt; exception_info const *&gt;()))</argsstring>
        <name>invoke_with_exception_info</name>
        <param>
          <type>E const &amp;</type>
          <declname>e</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="236" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="236" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1aa44c53a25b8fa7b5ae7d2bc8ad23ab92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hpx::invoke_with_exception_info</definition>
        <argsstring>(std::exception_ptr const &amp;p, F &amp;&amp;f) -&gt; decltype(std::forward&lt; F &gt;(f)(std::declval&lt; exception_info const *&gt;()))</argsstring>
        <name>invoke_with_exception_info</name>
        <param>
          <type>std::exception_ptr const &amp;</type>
          <declname>p</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="244" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="244" bodyend="260"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2exception__info_8hpp_1acc829bf410729f963a87271917bf2012" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>auto</type>
        <definition>auto hpx::invoke_with_exception_info</definition>
        <argsstring>(hpx::error_code const &amp;ec, F &amp;&amp;f) -&gt; decltype(std::forward&lt; F &gt;(f)(std::declval&lt; exception_info const *&gt;()))</argsstring>
        <name>invoke_with_exception_info</name>
        <param>
          <type><ref refid="classhpx_1_1error__code" kindref="compound">hpx::error_code</ref> const &amp;</type>
          <declname>ec</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/exception_info.hpp" line="263" column="1" bodyfile="libs/errors/include/hpx/errors/exception_info.hpp" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1ae1b41e445d214ad2cf30f6e1ebd4e3bf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::system::error_category const  &amp;</type>
        <definition>boost::system::error_category const&amp; hpx::get_hpx_category</definition>
        <argsstring>()</argsstring>
        <name>get_hpx_category</name>
        <briefdescription>
<para>Returns generic HPX error category used for new errors. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="46" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1afff1a46978ac0e1d2439456547643ed9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>boost::system::error_category const  &amp;</type>
        <definition>boost::system::error_category const&amp; hpx::get_hpx_rethrow_category</definition>
        <argsstring>()</argsstring>
        <name>get_hpx_rethrow_category</name>
        <briefdescription>
<para>Returns generic HPX error category used for errors re-thrown after the exception has been de-serialized. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="50" column="1"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2errors_2error__code_8hpp_1a0e8512a8f49e2a6c8185061181419d8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref></type>
        <definition>error_code hpx::make_success_code</definition>
        <argsstring>(throwmode mode=plain)</argsstring>
        <name>make_success_code</name>
        <param>
          <type>throwmode</type>
          <declname>mode</declname>
          <defval>plain</defval>
        </param>
        <briefdescription>
<para>Returns <ref refid="classhpx_1_1error__code" kindref="compound">error_code</ref>(hpx::success, &quot;success&quot;, mode). </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/errors/include/hpx/errors/error_code.hpp" line="288" column="1" bodyfile="libs/errors/include/hpx/errors/error_code.hpp" bodystart="288" bodyend="291"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/errors/include/hpx/errors/exception.hpp" line="30" column="1"/>
  </compounddef>
</doxygen>
