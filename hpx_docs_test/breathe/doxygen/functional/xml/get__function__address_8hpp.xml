<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="get__function__address_8hpp" kind="file" language="C++">
    <compoundname>get_function_address.hpp</compoundname>
    <includes local="no">hpx/config.hpp</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">memory</includes>
    <includedby refid="hpx_2functional_2bind__front_8hpp" local="no">libs/functional/include/hpx/functional/bind_front.hpp</includedby>
    <includedby refid="hpx_2functional_2deferred__call_8hpp" local="no">libs/functional/include/hpx/functional/deferred_call.hpp</includedby>
    <includedby refid="hpx_2functional_2function_8hpp" local="no">libs/functional/include/hpx/functional/function.hpp</includedby>
    <includedby refid="hpx_2functional_2bind_8hpp" local="no">libs/functional/include/hpx/functional/bind.hpp</includedby>
    <includedby refid="hpx_2functional_2function__ref_8hpp" local="no">libs/functional/include/hpx/functional/function_ref.hpp</includedby>
    <includedby refid="hpx_2functional_2unique__function_8hpp" local="no">libs/functional/include/hpx/functional/unique_function.hpp</includedby>
    <includedby refid="hpx_2functional_2bind__back_8hpp" local="no">libs/functional/include/hpx/functional/bind_back.hpp</includedby>
    <includedby refid="hpx_2functional_2one__shot_8hpp" local="no">libs/functional/include/hpx/functional/one_shot.hpp</includedby>
    <incdepgraph>
      <node id="452">
        <label>hpx/config.hpp</label>
      </node>
      <node id="453">
        <label>cstddef</label>
      </node>
      <node id="451">
        <label>libs/functional/include/hpx/functional/traits/get_function_address.hpp</label>
        <link refid="get__function__address_8hpp"/>
        <childnode refid="452" relation="include">
        </childnode>
        <childnode refid="453" relation="include">
        </childnode>
        <childnode refid="454" relation="include">
        </childnode>
      </node>
      <node id="454">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="466">
        <label>libs/functional/include/hpx/functional/unique_function.hpp</label>
        <link refid="hpx_2functional_2unique__function_8hpp_source"/>
        <childnode refid="467" relation="include">
        </childnode>
      </node>
      <node id="465">
        <label>libs/functional/include_compatibility/hpx/util/function_ref.hpp</label>
        <link refid="compatibility_2hpx_2util_2function__ref_8hpp_source"/>
      </node>
      <node id="469">
        <label>libs/functional/include_compatibility/hpx/util/bind_back.hpp</label>
        <link refid="compatibility_2hpx_2util_2bind__back_8hpp_source"/>
      </node>
      <node id="459">
        <label>libs/functional/include_compatibility/hpx/util/deferred_call.hpp</label>
        <link refid="compatibility_2hpx_2util_2deferred__call_8hpp_source"/>
      </node>
      <node id="467">
        <label>libs/functional/include_compatibility/hpx/util/unique_function.hpp</label>
        <link refid="compatibility_2hpx_2util_2unique__function_8hpp_source"/>
      </node>
      <node id="463">
        <label>libs/functional/include_compatibility/hpx/util/bind.hpp</label>
        <link refid="compatibility_2hpx_2util_2bind_8hpp_source"/>
      </node>
      <node id="471">
        <label>libs/functional/include_compatibility/hpx/util/one_shot.hpp</label>
        <link refid="compatibility_2hpx_2util_2one__shot_8hpp_source"/>
      </node>
      <node id="460">
        <label>libs/functional/include/hpx/functional/function.hpp</label>
        <link refid="hpx_2functional_2function_8hpp_source"/>
        <childnode refid="461" relation="include">
        </childnode>
      </node>
      <node id="470">
        <label>libs/functional/include/hpx/functional/one_shot.hpp</label>
        <link refid="hpx_2functional_2one__shot_8hpp_source"/>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="471" relation="include">
        </childnode>
      </node>
      <node id="456">
        <label>libs/functional/include/hpx/functional/bind_front.hpp</label>
        <link refid="hpx_2functional_2bind__front_8hpp_source"/>
        <childnode refid="457" relation="include">
        </childnode>
      </node>
      <node id="458">
        <label>libs/functional/include/hpx/functional/deferred_call.hpp</label>
        <link refid="hpx_2functional_2deferred__call_8hpp_source"/>
        <childnode refid="459" relation="include">
        </childnode>
      </node>
      <node id="462">
        <label>libs/functional/include/hpx/functional/bind.hpp</label>
        <link refid="hpx_2functional_2bind_8hpp_source"/>
        <childnode refid="463" relation="include">
        </childnode>
      </node>
      <node id="461">
        <label>libs/functional/include_compatibility/hpx/util/function.hpp</label>
        <link refid="compatibility_2hpx_2util_2function_8hpp_source"/>
      </node>
      <node id="455">
        <label>libs/functional/include/hpx/functional/traits/get_function_address.hpp</label>
        <link refid="get__function__address_8hpp"/>
        <childnode refid="456" relation="include">
        </childnode>
        <childnode refid="458" relation="include">
        </childnode>
        <childnode refid="460" relation="include">
        </childnode>
        <childnode refid="462" relation="include">
        </childnode>
        <childnode refid="464" relation="include">
        </childnode>
        <childnode refid="466" relation="include">
        </childnode>
        <childnode refid="468" relation="include">
        </childnode>
        <childnode refid="470" relation="include">
        </childnode>
      </node>
      <node id="464">
        <label>libs/functional/include/hpx/functional/function_ref.hpp</label>
        <link refid="hpx_2functional_2function__ref_8hpp_source"/>
        <childnode refid="465" relation="include">
        </childnode>
      </node>
      <node id="468">
        <label>libs/functional/include/hpx/functional/bind_back.hpp</label>
        <link refid="hpx_2functional_2bind__back_8hpp_source"/>
        <childnode refid="469" relation="include">
        </childnode>
      </node>
      <node id="457">
        <label>libs/functional/include_compatibility/hpx/util/bind_front.hpp</label>
        <link refid="compatibility_2hpx_2util_2bind__front_8hpp_source"/>
      </node>
    </invincdepgraph>
    <innerclass refid="structhpx_1_1traits_1_1get__function__address" prot="public">hpx::traits::get_function_address</innerclass>
    <innerclass refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_5_08_07_ts_8_8_8_08_4" prot="public">hpx::traits::get_function_address&lt; R(*)(Ts...)&gt;</innerclass>
    <innerclass refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_obj_1_1_5_08_07_ts_8_8_8_08_4" prot="public">hpx::traits::get_function_address&lt; R(Obj::*)(Ts...)&gt;</innerclass>
    <innerclass refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_obj_1_1_5_08_07_ts_8_8_8_08_01const_01_4" prot="public">hpx::traits::get_function_address&lt; R(Obj::*)(Ts...) const &gt;</innerclass>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1traits">hpx::traits</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Hartmut<sp/>Kaiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_TRAITS_GET_FUNCTION_ADDRESS_FEB_19_2016_0801PM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_TRAITS_GET_FUNCTION_ADDRESS_FEB_19_2016_0801PM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;memory&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">traits<sp/>{</highlight></codeline>
<codeline lineno="15"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>By<sp/>default<sp/>we<sp/>return<sp/>the<sp/>address<sp/>of<sp/>the<sp/>object<sp/>which<sp/>is<sp/>used<sp/>to<sp/>invoke</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>the<sp/>trait.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Enable<sp/>=<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">&gt;</highlight></codeline>
<codeline lineno="18" refid="structhpx_1_1traits_1_1get__function__address" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1traits_1_1get__function__address" kindref="compound">get_function_address</ref></highlight></codeline>
<codeline lineno="19"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="20"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>call(F<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>f)<sp/>noexcept</highlight></codeline>
<codeline lineno="21"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="22"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(std::addressof(f));</highlight></codeline>
<codeline lineno="23"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="24"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>global<sp/>(and<sp/>static)<sp/>functions<sp/>we<sp/>return<sp/>the<sp/>function<sp/>address<sp/>itself</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="28" refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_5_08_07_ts_8_8_8_08_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1traits_1_1get__function__address" kindref="compound">get_function_address</ref>&lt;R<sp/>(*)(Ts...)&gt;</highlight></codeline>
<codeline lineno="29"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>call(R<sp/>(*f)(Ts...))<sp/>noexcept</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(f);</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>For<sp/>member<sp/>functions<sp/>we<sp/>return<sp/>the<sp/>first<sp/>sizeof(void*)<sp/>bytes<sp/>of<sp/>the</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>storage<sp/>the<sp/>member<sp/>function<sp/>pointer<sp/>occupies.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>BADBAD:<sp/>This<sp/>invokes<sp/>undefined<sp/>behavior.<sp/>What<sp/>it<sp/>does<sp/>is<sp/>to</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>access<sp/>the<sp/>first<sp/>sizeof(void*)<sp/>bytes<sp/>of<sp/>the<sp/>member</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>function<sp/>pointer.<sp/>In<sp/>our<sp/>case<sp/>this<sp/>is<sp/>not<sp/>a<sp/>problem<sp/>as</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>the<sp/>value<sp/>will<sp/>be<sp/>used<sp/>to<sp/>resolve<sp/>a<sp/>(debug)<sp/>symbol<sp/>only.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>The<sp/>value<sp/>is<sp/>never<sp/>dereferenced<sp/>or<sp/>used<sp/>in<sp/>any<sp/>other</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>way.<sp/>So<sp/>the<sp/>worst<sp/>what<sp/>can<sp/>happen<sp/>is<sp/>that<sp/>no<sp/>matching</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>symbol<sp/>is<sp/>found.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>On<sp/>some<sp/>systems<sp/>and<sp/>for<sp/>certain<sp/>types<sp/>of<sp/>member<sp/>function</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>pointers<sp/>this<sp/>might<sp/>even<sp/>give<sp/>the<sp/>correct<sp/>value</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>representing<sp/>the<sp/>symbol<sp/>corresponding<sp/>to<sp/>the<sp/>function.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>off</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="54" refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_obj_1_1_5_08_07_ts_8_8_8_08_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1traits_1_1get__function__address" kindref="compound">get_function_address</ref>&lt;R<sp/>(Obj::*)(Ts...)&gt;</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>call(R<sp/>(Obj::*f)(Ts...))<sp/>noexcept</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="64"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>||<sp/>(__CUDACC_VER_MAJOR__<sp/>&gt;=<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(HPX_GCC_DIAGNOSTIC_PRAGMA_CONTEXTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="67"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="69"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;f));</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>||<sp/>(__CUDACC_VER_MAJOR__<sp/>&gt;=<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(HPX_GCC_DIAGNOSTIC_PRAGMA_CONTEXTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="76"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="84"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="85"><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>R,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Obj,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="87" refid="structhpx_1_1traits_1_1get__function__address_3_01_r_07_obj_1_1_5_08_07_ts_8_8_8_08_01const_01_4" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1traits_1_1get__function__address" kindref="compound">get_function_address</ref>&lt;R<sp/>(Obj::*)(Ts...)<sp/>const&gt;</highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">static</highlight><highlight class="normal"><sp/>std::size_t<sp/>call(R<sp/>(Obj::*f)(Ts...)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">)<sp/>noexcept</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="95"><highlight class="normal"></highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="97"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>||<sp/>(__CUDACC_VER_MAJOR__<sp/>&gt;=<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(HPX_GCC_DIAGNOSTIC_PRAGMA_CONTEXTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>push</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>ignored<sp/>&quot;-Wstrict-aliasing&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="103"><highlight class="normal"></highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="normal">std::size_t</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(*</highlight><highlight class="keyword">reinterpret_cast&lt;</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(&amp;f));</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__GNUG__)<sp/>&amp;&amp;<sp/>!defined(__INTEL_COMPILER)<sp/>&amp;&amp;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="107"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>(!defined(__NVCC__)<sp/>||<sp/>(__CUDACC_VER_MAJOR__<sp/>&gt;=<sp/>8))</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>if<sp/>defined(HPX_GCC_DIAGNOSTIC_PRAGMA_CONTEXTS)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/><sp/><sp/>pragma<sp/>GCC<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="110"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>defined(__clang__)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="114"><highlight class="normal"></highlight><highlight class="preprocessor">#<sp/><sp/>pragma<sp/>clang<sp/>diagnostic<sp/>pop</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>clang-format<sp/>on</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="119"><highlight class="normal">}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::traits</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/functional/include/hpx/functional/traits/get_function_address.hpp"/>
  </compounddef>
</doxygen>
