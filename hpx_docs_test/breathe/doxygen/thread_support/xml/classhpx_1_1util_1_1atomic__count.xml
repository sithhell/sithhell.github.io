<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1atomic__count" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::atomic_count</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1atomic__count_1aab9b0470cd59869222281de170f34383" prot="private" static="no" mutable="no">
        <type>std::atomic&lt; long &gt;</type>
        <definition>std::atomic&lt;long&gt; hpx::util::atomic_count::value_</definition>
        <argsstring></argsstring>
        <name>value_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="60" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a7717ef4cbbd8c64ef10444f20673bbe5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::atomic_count::HPX_NON_COPYABLE</definition>
        <argsstring>(atomic_count)</argsstring>
        <name>HPX_NON_COPYABLE</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1atomic__count" kindref="compound">atomic_count</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="18" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a80a5399d553cad59f954b4a830f1683f" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::atomic_count::atomic_count</definition>
        <argsstring>(long value)</argsstring>
        <name>atomic_count</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="21" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="21" bodyend="24"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a0aeac0536c351cc2ceb07ad066507b71" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1atomic__count" kindref="compound">atomic_count</ref> &amp;</type>
        <definition>atomic_count&amp; hpx::util::atomic_count::operator=</definition>
        <argsstring>(long value)</argsstring>
        <name>operator=</name>
        <param>
          <type>long</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="26" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="26" bodyend="30"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a7bff47ad42234b5dce5bb3080953b59a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long hpx::util::atomic_count::operator++</definition>
        <argsstring>()</argsstring>
        <name>operator++</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="32" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="32" bodyend="35"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a99b86a8e309e642f6e5be287c192193b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>long</type>
        <definition>long hpx::util::atomic_count::operator--</definition>
        <argsstring>()</argsstring>
        <name>operator--</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="37" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="37" bodyend="40"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a1ee355532ec596a7edb9f65f041380fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1atomic__count" kindref="compound">atomic_count</ref> &amp;</type>
        <definition>atomic_count&amp; hpx::util::atomic_count::operator+=</definition>
        <argsstring>(long n)</argsstring>
        <name>operator+=</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="42" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="42" bodyend="46"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a9c2c7d34e2641fb708af384cb800f69c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1atomic__count" kindref="compound">atomic_count</ref> &amp;</type>
        <definition>atomic_count&amp; hpx::util::atomic_count::operator-=</definition>
        <argsstring>(long n)</argsstring>
        <name>operator-=</name>
        <param>
          <type>long</type>
          <declname>n</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="48" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="48" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1atomic__count_1a27b4a3d2ef22c197ce18f3e78362d5c9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::atomic_count::operator long</definition>
        <argsstring>() const</argsstring>
        <name>operator long</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="54" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" line="16" column="1" bodyfile="libs/thread_support/include/hpx/thread_support/atomic_count.hpp" bodystart="15" bodyend="61"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1atomic__count_1a80a5399d553cad59f954b4a830f1683f" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>atomic_count</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a7717ef4cbbd8c64ef10444f20673bbe5" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>HPX_NON_COPYABLE</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a27b4a3d2ef22c197ce18f3e78362d5c9" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator long</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a7bff47ad42234b5dce5bb3080953b59a" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator++</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a1ee355532ec596a7edb9f65f041380fb" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator+=</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a99b86a8e309e642f6e5be287c192193b" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator--</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a9c2c7d34e2641fb708af384cb800f69c" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator-=</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1a0aeac0536c351cc2ceb07ad066507b71" prot="public" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1atomic__count_1aab9b0470cd59869222281de170f34383" prot="private" virt="non-virtual"><scope>hpx::util::atomic_count</scope><name>value_</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
