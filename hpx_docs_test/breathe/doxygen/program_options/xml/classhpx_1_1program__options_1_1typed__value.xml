<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1typed__value" kind="class" language="C++" prot="public">
    <compoundname>hpx::program_options::typed_value</compoundname>
    <basecompoundref refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper" prot="public" virt="non-virtual">hpx::program_options::value_semantic_codecvt_helper&lt; Char &gt;</basecompoundref>
    <basecompoundref refid="classhpx_1_1program__options_1_1typed__value__base" prot="public" virt="non-virtual">hpx::program_options::typed_value_base</basecompoundref>
    <includes refid="value__semantic_8hpp" local="no">value_semantic.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
      <param>
        <type>class</type>
        <declname>Char</declname>
        <defname>Char</defname>
        <defval>char</defval>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1ad6931b47e433b08a49829df6bea6086f" prot="private" static="no" mutable="no">
        <type>T *</type>
        <definition>T* hpx::program_options::typed_value&lt; T, Char &gt;::m_store_to</definition>
        <argsstring></argsstring>
        <name>m_store_to</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="427" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="427" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a4cc208d64947b9caae05bf1bd4b08a3c" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::typed_value&lt; T, Char &gt;::m_value_name</definition>
        <argsstring></argsstring>
        <name>m_value_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="431" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="431" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1ad3a5346f690629ab0c49d4a69db4a259" prot="private" static="no" mutable="no">
        <type>hpx::util::any_nonser</type>
        <definition>hpx::util::any_nonser hpx::program_options::typed_value&lt; T, Char &gt;::m_default_value</definition>
        <argsstring></argsstring>
        <name>m_default_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="432" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a870d22f754efc776430ded6e33e26d7a" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::typed_value&lt; T, Char &gt;::m_default_value_as_text</definition>
        <argsstring></argsstring>
        <name>m_default_value_as_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="433" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a776325dc48c1605599e72b38d8951dbd" prot="private" static="no" mutable="no">
        <type>hpx::util::any_nonser</type>
        <definition>hpx::util::any_nonser hpx::program_options::typed_value&lt; T, Char &gt;::m_implicit_value</definition>
        <argsstring></argsstring>
        <name>m_implicit_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="434" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="434" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1adf59198f8346e0117865f14a48c4d1a0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::typed_value&lt; T, Char &gt;::m_implicit_value_as_text</definition>
        <argsstring></argsstring>
        <name>m_implicit_value_as_text</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="435" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a4631597f7d81158ff3627a3a61cecd07" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::m_composing</definition>
        <argsstring></argsstring>
        <name>m_composing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="436" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1ac2122e30e276cc8462b26757933fb44c" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::m_implicit</definition>
        <argsstring></argsstring>
        <name>m_implicit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="436" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1abffbad0a52550ad71d82a827158210b1" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::m_multitoken</definition>
        <argsstring></argsstring>
        <name>m_multitoken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="436" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a37130b114f29a01d02333879bad41c09" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::m_zero_tokens</definition>
        <argsstring></argsstring>
        <name>m_zero_tokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="436" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a8a3d409c6d0b67f7eb180cb17750f084" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::m_required</definition>
        <argsstring></argsstring>
        <name>m_required</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="436" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1typed__value_1a5eae4250c2e50851dd31b6eda85c24c6" prot="private" static="no" mutable="no">
        <type>std::function&lt; void(const T &amp;)&gt;</type>
        <definition>std::function&lt;void(const T&amp;)&gt; hpx::program_options::typed_value&lt; T, Char &gt;::m_notifier</definition>
        <argsstring></argsstring>
        <name>m_notifier</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="437" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="437" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1aafa14163659a1fc1d3d5d5ffe7a7fbb0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::typed_value&lt; T, Char &gt;::typed_value</definition>
        <argsstring>(T *store_to)</argsstring>
        <name>typed_value</name>
        <param>
          <type>T *</type>
          <declname>store_to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Ctor. The &apos;store_to&apos; parameter tells where to store the value when it&apos;s known. The parameter can be NULL. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="236" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="236" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a52f61a872f59d6e466532ef9aa43c8dc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::default_value</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>default_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies default value, which will be used if none is explicitly specified. The type &apos;T&apos; should provide operator&lt;&lt; for ostream. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="250" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="250" bodyend="255"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1ae1196710cdbd4b6a88cb50b0edf4990d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::default_value</definition>
        <argsstring>(const T &amp;v, const std::string &amp;textual)</argsstring>
        <name>default_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textual</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies default value, which will be used if none is explicitly specified. Unlike the above overload, the type &apos;T&apos; need not provide operator&lt;&lt; for ostream, but textual representation of default value must be provided by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="263" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="263" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1ab241b7762df1d15b6592eaa1266cf0a8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::implicit_value</definition>
        <argsstring>(const T &amp;v)</argsstring>
        <name>implicit_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies an implicit value, which will be used if the option is given, but without an adjacent value. Using this implies that an explicit value is optional, </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="274" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="274" bodyend="279"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a6149265f61a093065542d23ef8d64017" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::value_name</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>value_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies the name used to to the value in help message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="282" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="282" bodyend="286"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1aa6c0ec55e5a4d7170b9f5139ab0ce816" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::implicit_value</definition>
        <argsstring>(const T &amp;v, const std::string &amp;textual)</argsstring>
        <name>implicit_value</name>
        <param>
          <type>const T &amp;</type>
          <declname>v</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>textual</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies an implicit value, which will be used if the option is given, but without an adjacent value. Using this implies that an explicit value is optional, but if given, must be strictly adjacent to the option, i.e.: &apos;-ovalue&apos; or &apos;<ndash/>option=value&apos;. Giving &apos;-o&apos; or &apos;<ndash/>option&apos; will cause the implicit value to be applied. Unlike the above overload, the type &apos;T&apos; need not provide operator&lt;&lt; for ostream, but textual representation of default value must be provided by the user. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="298" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="298" bodyend="303"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a0a8373cfba6d7b0c46db4f07e1f5724b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::notifier</definition>
        <argsstring>(std::function&lt; void(const T &amp;)&gt; f)</argsstring>
        <name>notifier</name>
        <param>
          <type>std::function&lt; void(const T &amp;)&gt;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies a function to be called when the final value is determined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="307" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="307" bodyend="311"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a9071cdb33224e981c916120c9ff41388" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::composing</definition>
        <argsstring>()</argsstring>
        <name>composing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that the value is composing. See the &apos;is_composing&apos; method for explanation. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="316" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="316" bodyend="320"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a3ef775ed8490d09f8addbbfa0c5e3de3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::multitoken</definition>
        <argsstring>()</argsstring>
        <name>multitoken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that the value can span multiple tokens. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="324" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="324" bodyend="328"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a88e3dd6dad55412d38b6f7e7eea7b783" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::zero_tokens</definition>
        <argsstring>()</argsstring>
        <name>zero_tokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that no tokens may be provided as the value of this option, which means that only presence of the option is significant. For such option to be useful, either the &apos;validate&apos; function should be specialized, or the &apos;implicit_value&apos; method should be also used. In most cases, you can use the &apos;bool_switch&apos; function instead of using this method. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="337" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="337" bodyend="341"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a2c8caf0754bd6f294bdae0048d7f69d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1typed__value" kindref="compound">typed_value</ref> *</type>
        <definition>typed_value* hpx::program_options::typed_value&lt; T, Char &gt;::required</definition>
        <argsstring>()</argsstring>
        <name>required</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Specifies that the value must occur. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="344" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="344" bodyend="348"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1ad48fb90621ecc1165c1391b6915f1cd0" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::typed_value&lt; T, Char &gt;::name</definition>
        <argsstring>() const override</argsstring>
        <name>name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="351" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a37685a8c89615aa04393a356986444a9" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::is_composing</definition>
        <argsstring>() const override</argsstring>
        <name>is_composing</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="353" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="353" bodyend="356"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a8135fdc299c4bea0b8bb5d3942bcb584" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned hpx::program_options::typed_value&lt; T, Char &gt;::min_tokens</definition>
        <argsstring>() const override</argsstring>
        <name>min_tokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="358" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="358" bodyend="368"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1ab3b63745713e6c56eef35983738729a1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>unsigned</type>
        <definition>unsigned hpx::program_options::typed_value&lt; T, Char &gt;::max_tokens</definition>
        <argsstring>() const override</argsstring>
        <name>max_tokens</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="370" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="370" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1ae80c133fea4aa8d7a13859afd3bfb341" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::program_options::typed_value&lt; T, Char &gt;::is_required</definition>
        <argsstring>() const override</argsstring>
        <name>is_required</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="386" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="386" bodyend="389"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a81dd84e7677a72437058d61d34d41080" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::typed_value&lt; T, Char &gt;::xparse</definition>
        <argsstring>(hpx::util::any_nonser &amp;value_store, const std::vector&lt; std::basic_string&lt; Char &gt;&gt; &amp;new_tokens) const override</argsstring>
        <name>xparse</name>
        <param>
          <type>hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::basic_string&lt; Char &gt;&gt; &amp;</type>
          <declname>new_tokens</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates an instance of the &apos;validator&apos; class and calls its operator() to perform the actual conversion. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="393" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a0bbb81122bdefadf1bab32d1a41f3364" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>bool</type>
        <definition>virtual bool hpx::program_options::typed_value&lt; T, Char &gt;::apply_default</definition>
        <argsstring>(hpx::util::any_nonser &amp;value_store) const override</argsstring>
        <name>apply_default</name>
        <param>
          <type>hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If default value was specified via previous call to &apos;default_value&apos;, stores that value into &apos;value_store&apos;. Returns true if default value was stored. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="401" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="401" bodyend="413"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1adebd1e4690a338714cef8c8eba226b4a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::typed_value&lt; T, Char &gt;::notify</definition>
        <argsstring>(const hpx::util::any_nonser &amp;value_store) const override</argsstring>
        <name>notify</name>
        <param>
          <type>const hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If an address of variable to store value was specified when creating *this, stores the value there. Otherwise, does nothing. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="418" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1typed__value_1a1e3853a07565d14ee03325ce114229eb" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="virtual">
        <type>const std::type_info &amp;</type>
        <definition>const std::type_info&amp; hpx::program_options::typed_value&lt; T, Char &gt;::value_type</definition>
        <argsstring>() const override</argsstring>
        <name>value_type</name>
        <reimplements refid="classhpx_1_1program__options_1_1typed__value__base_1afd26ace8b618bf0aae16d288338b2902">value_type</reimplements>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="421" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="421" bodyend="424"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class which handles value of a specific type. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="196">
        <label>hpx::program_options::typed_value&lt; T, Char &gt;</label>
        <link refid="classhpx_1_1program__options_1_1typed__value"/>
        <childnode refid="197" relation="public-inheritance">
        </childnode>
        <childnode refid="198" relation="public-inheritance">
        </childnode>
      </node>
      <node id="198">
        <label>hpx::program_options::typed_value_base</label>
        <link refid="classhpx_1_1program__options_1_1typed__value__base"/>
      </node>
      <node id="197">
        <label>hpx::program_options::value_semantic_codecvt_helper&lt; Char &gt;</label>
        <link refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="199">
        <label>hpx::program_options::typed_value&lt; T, Char &gt;</label>
        <link refid="classhpx_1_1program__options_1_1typed__value"/>
        <childnode refid="200" relation="public-inheritance">
        </childnode>
        <childnode refid="201" relation="public-inheritance">
        </childnode>
      </node>
      <node id="201">
        <label>hpx::program_options::typed_value_base</label>
        <link refid="classhpx_1_1program__options_1_1typed__value__base"/>
      </node>
      <node id="200">
        <label>hpx::program_options::value_semantic_codecvt_helper&lt; Char &gt;</label>
        <link refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper"/>
      </node>
    </collaborationgraph>
    <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="232" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="229" bodyend="438"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a0bbb81122bdefadf1bab32d1a41f3364" prot="public" virt="virtual"><scope>hpx::program_options::typed_value</scope><name>apply_default</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a9071cdb33224e981c916120c9ff41388" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>composing</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a52f61a872f59d6e466532ef9aa43c8dc" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>default_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ae1196710cdbd4b6a88cb50b0edf4990d" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>default_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ab241b7762df1d15b6592eaa1266cf0a8" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>implicit_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1aa6c0ec55e5a4d7170b9f5139ab0ce816" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>implicit_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a37685a8c89615aa04393a356986444a9" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>is_composing</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ae80c133fea4aa8d7a13859afd3bfb341" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>is_required</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a4631597f7d81158ff3627a3a61cecd07" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_composing</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ad3a5346f690629ab0c49d4a69db4a259" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_default_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a870d22f754efc776430ded6e33e26d7a" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_default_value_as_text</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ac2122e30e276cc8462b26757933fb44c" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_implicit</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a776325dc48c1605599e72b38d8951dbd" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_implicit_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1adf59198f8346e0117865f14a48c4d1a0" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_implicit_value_as_text</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1abffbad0a52550ad71d82a827158210b1" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_multitoken</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a5eae4250c2e50851dd31b6eda85c24c6" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_notifier</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a8a3d409c6d0b67f7eb180cb17750f084" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_required</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ad6931b47e433b08a49829df6bea6086f" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_store_to</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a4cc208d64947b9caae05bf1bd4b08a3c" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_value_name</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a37130b114f29a01d02333879bad41c09" prot="private" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>m_zero_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ab3b63745713e6c56eef35983738729a1" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>max_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a8135fdc299c4bea0b8bb5d3942bcb584" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>min_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a3ef775ed8490d09f8addbbfa0c5e3de3" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>multitoken</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1ad48fb90621ecc1165c1391b6915f1cd0" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>name</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a0a8373cfba6d7b0c46db4f07e1f5724b" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>notifier</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1adebd1e4690a338714cef8c8eba226b4a" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>notify</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a2c8caf0754bd6f294bdae0048d7f69d7" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>required</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1aafa14163659a1fc1d3d5d5ffe7a7fbb0" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>typed_value</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a6149265f61a093065542d23ef8d64017" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>value_name</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a1e3853a07565d14ee03325ce114229eb" prot="public" virt="virtual"><scope>hpx::program_options::typed_value</scope><name>value_type</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a81dd84e7677a72437058d61d34d41080" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>xparse</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value_1a88e3dd6dad55412d38b6f7e7eea7b783" prot="public" virt="non-virtual"><scope>hpx::program_options::typed_value</scope><name>zero_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1typed__value__base_1a60c338eb5229ec794c3bcf68da68d9fa" prot="public" virt="virtual"><scope>hpx::program_options::typed_value</scope><name>~typed_value_base</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
