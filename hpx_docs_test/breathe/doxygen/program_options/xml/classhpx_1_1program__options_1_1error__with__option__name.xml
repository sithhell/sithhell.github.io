<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1error__with__option__name" kind="class" language="C++" prot="public">
    <compoundname>hpx::program_options::error_with_option_name</compoundname>
    <basecompoundref refid="classhpx_1_1program__options_1_1error" prot="public" virt="non-virtual">hpx::program_options::error</basecompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1error__with__no__option__name" prot="public" virt="non-virtual">hpx::program_options::error_with_no_option_name</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1invalid__syntax" prot="public" virt="non-virtual">hpx::program_options::invalid_syntax</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1multiple__occurrences" prot="public" virt="non-virtual">hpx::program_options::multiple_occurrences</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1multiple__values" prot="public" virt="non-virtual">hpx::program_options::multiple_values</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1required__option" prot="public" virt="non-virtual">hpx::program_options::required_option</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1validation__error" prot="public" virt="non-virtual">hpx::program_options::validation_error</derivedcompoundref>
    <includes refid="errors_8hpp" local="no">errors.hpp</includes>
      <sectiondef kind="protected-type">
      <memberdef kind="typedef" id="classhpx_1_1program__options_1_1error__with__option__name_1ad3a23ca94f6fb77cab3e171afbe63e23" prot="protected" static="no">
        <type>std::pair&lt; std::string, std::string &gt;</type>
        <definition>using hpx::program_options::error_with_option_name::string_pair =  std::pair&lt;std::string, std::string&gt;</definition>
        <argsstring></argsstring>
        <name>string_pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="146" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="146" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1error__with__option__name_1ad08d9687c8511639fd73615fb1c5c7e5" prot="protected" static="no" mutable="no">
        <type>int</type>
        <definition>int hpx::program_options::error_with_option_name::m_option_style</definition>
        <argsstring></argsstring>
        <name>m_option_style</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>can be 0 = no prefix (config file options) allow_long allow_dash_for_short allow_slash_for_short allow_long_disguise </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="141" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="141" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1error__with__option__name_1a8d9c3efa92db291b0e0f8a22249e4864" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, std::string &gt;</type>
        <definition>std::map&lt;std::string, std::string&gt; hpx::program_options::error_with_option_name::m_substitutions</definition>
        <argsstring></argsstring>
        <name>m_substitutions</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>substitutions from placeholders to values </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="145" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="145" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1error__with__option__name_1a98f723108458e193563832e3df1f07ab" prot="protected" static="no" mutable="no">
        <type>std::map&lt; std::string, string_pair &gt;</type>
        <definition>std::map&lt;std::string, string_pair&gt; hpx::program_options::error_with_option_name::m_substitution_defaults</definition>
        <argsstring></argsstring>
        <name>m_substitution_defaults</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="147" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1error__with__option__name_1ac8adc037b1f8683c8f2b97752d8417fa" prot="protected" static="no" mutable="yes">
        <type>std::string</type>
        <definition>std::string hpx::program_options::error_with_option_name::m_message</definition>
        <argsstring></argsstring>
        <name>m_message</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Used to hold the error text returned by <ref refid="classhpx_1_1program__options_1_1error__with__option__name_1a0fcfa7271ddc04650f36445463ab23db" kindref="member">what()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="215" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="215" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1error__with__option__name_1a134f824d91347da4b0b2761e1297a0cd" prot="public" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::error_with_option_name::m_error_template</definition>
        <argsstring></argsstring>
        <name>m_error_template</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>template with placeholders </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="151" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="151" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1ade012afab216c2fc9459acc43eaec793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::error_with_option_name::error_with_option_name</definition>
        <argsstring>(const std::string &amp;template_, const std::string &amp;option_name=&quot;&quot;, const std::string &amp;original_token=&quot;&quot;, int option_style=0)</argsstring>
        <name>error_with_option_name</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>template_</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>original_token</declname>
          <defval>&quot;&quot;</defval>
        </param>
        <param>
          <type>int</type>
          <declname>option_style</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a9ad92bead5bb8545653682ad675fc1f0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::error_with_option_name::~error_with_option_name</definition>
        <argsstring>() noexcept</argsstring>
        <name>~error_with_option_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>gcc says that throw specification on dtor is loosened without this line </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="160" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="160" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1ae31197640118ca6108a31b90a38b684e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::set_substitute</definition>
        <argsstring>(const std::string &amp;parameter_name, const std::string &amp;value)</argsstring>
        <name>set_substitute</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Substitute parameter_name-&gt;value to create the error message from the error template </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="165" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="165" bodyend="169"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a8fb32fc5333a833f7f2c2a0f8cec09de" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::set_substitute_default</definition>
        <argsstring>(const std::string &amp;parameter_name, const std::string &amp;from, const std::string &amp;to)</argsstring>
        <name>set_substitute_default</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>parameter_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If the parameter is missing, then make the from-&gt;to substitution instead </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="173" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="173" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a6fb7db39524adc2e646769a505fbd073" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::add_context</definition>
        <argsstring>(const std::string &amp;option_name, const std::string &amp;original_token, int option_style)</argsstring>
        <name>add_context</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>original_token</declname>
        </param>
        <param>
          <type>int</type>
          <declname>option_style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Add context to an exception </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="180" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="180" bodyend="186"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1aafaa36fc2ddb43600cb5058b4cca8c64" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::set_prefix</definition>
        <argsstring>(int option_style)</argsstring>
        <name>set_prefix</name>
        <param>
          <type>int</type>
          <declname>option_style</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="188" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="188" bodyend="191"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1af6e1934eb1358195fe96fa37a5410b55" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type>void</type>
        <definition>virtual void hpx::program_options::error_with_option_name::set_option_name</definition>
        <argsstring>(const std::string &amp;option_name)</argsstring>
        <name>set_option_name</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1error__with__no__option__name_1ab87e47fb0d7ff919d0bd761d02daa5fa">set_option_name</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>option_name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Overridden in <ref refid="classhpx_1_1program__options_1_1error__with__no__option__name" kindref="compound">error_with_no_option_name</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="194" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="194" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a8562ba15ccf457f4ac5e609337ff916d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::error_with_option_name::get_option_name</definition>
        <argsstring>() const</argsstring>
        <name>get_option_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="199" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="199" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1ad4b6ea7facfabaf9024568954ff1b46a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::set_original_token</definition>
        <argsstring>(const std::string &amp;original_token)</argsstring>
        <name>set_original_token</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>original_token</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="204" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a0fcfa7271ddc04650f36445463ab23db" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hpx::program_options::error_with_option_name::what</definition>
        <argsstring>() const noexcept override</argsstring>
        <name>what</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates the error_message on the fly Currently a thin wrapper for <ref refid="classhpx_1_1program__options_1_1error__with__option__name_1a372829ce0ee974d480b2cce57ea1db73" kindref="member">substitute_placeholders()</ref> </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="211" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a372829ce0ee974d480b2cce57ea1db73" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="virtual">
        <type>void</type>
        <definition>virtual void hpx::program_options::error_with_option_name::substitute_placeholders</definition>
        <argsstring>(const std::string &amp;error_template) const</argsstring>
        <name>substitute_placeholders</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1ambiguous__option_1ac94997d7f01ac5b76c8fec027058ee81">substitute_placeholders</reimplementedby>
        <param>
          <type>const std::string &amp;</type>
          <declname>error_template</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Makes all substitutions using the template </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="218" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a8a8e92acfe74094edc3a09c57376974d" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::error_with_option_name::replace_token</definition>
        <argsstring>(const std::string &amp;from, const std::string &amp;to) const</argsstring>
        <name>replace_token</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>from</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>to</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="222" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1a0b65fb289c649b71e52d0581173a0c8e" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::error_with_option_name::get_canonical_option_name</definition>
        <argsstring>() const</argsstring>
        <name>get_canonical_option_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Construct option name in accordance with the appropriate prefix style: i.e. long dash or short slash etc </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="227" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1error__with__option__name_1ab62af4c0675cc19fbf04f6ac9b7402ff" prot="protected" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::error_with_option_name::get_canonical_option_prefix</definition>
        <argsstring>() const</argsstring>
        <name>get_canonical_option_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="228" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Base class for most exceptions in the library.</para><para>Substitutes the values for the parameter name placeholders in the template to create the human readable error message</para><para>Placeholders are surrounded by % signs: example% Poor man&apos;s version of boost::format</para><para>If a parameter name is absent, perform default substitutions instead so ugly placeholders are never left in-place.</para><para>Options are displayed in &quot;canonical&quot; form This is the most unambiguous form of the <emphasis>parsed</emphasis> option name and would correspond to <ref refid="classhpx_1_1program__options_1_1option__description_1a4372907a05c63fae44c5c4d04c24b592" kindref="member">option_description::format_name()</ref> i.e. what is shown by print_usage()</para><para>The &quot;canonical&quot; form depends on whether the option is specified in short or long form, using dashes or slashes or without a prefix (from a configuration file) </para>    </detaileddescription>
    <inheritancegraph>
      <node id="83">
        <label>hpx::program_options::multiple_values</label>
        <link refid="classhpx_1_1program__options_1_1multiple__values"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="86">
        <label>hpx::program_options::invalid_bool_value</label>
        <link refid="classhpx_1_1program__options_1_1invalid__bool__value"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
      <node id="75">
        <label>std::logic_error</label>
      </node>
      <node id="85">
        <label>hpx::program_options::validation_error</label>
        <link refid="classhpx_1_1program__options_1_1validation__error"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="74">
        <label>hpx::program_options::error</label>
        <link refid="classhpx_1_1program__options_1_1error"/>
        <childnode refid="75" relation="public-inheritance">
        </childnode>
      </node>
      <node id="80">
        <label>hpx::program_options::invalid_command_line_syntax</label>
        <link refid="classhpx_1_1program__options_1_1invalid__command__line__syntax"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="73">
        <label>hpx::program_options::error_with_option_name</label>
        <link refid="classhpx_1_1program__options_1_1error__with__option__name"/>
        <childnode refid="74" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>hpx::program_options::multiple_occurrences</label>
        <link refid="classhpx_1_1program__options_1_1multiple__occurrences"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="78">
        <label>hpx::program_options::unknown_option</label>
        <link refid="classhpx_1_1program__options_1_1unknown__option"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>hpx::program_options::required_option</label>
        <link refid="classhpx_1_1program__options_1_1required__option"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="76">
        <label>hpx::program_options::error_with_no_option_name</label>
        <link refid="classhpx_1_1program__options_1_1error__with__no__option__name"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>hpx::program_options::invalid_config_file_syntax</label>
        <link refid="classhpx_1_1program__options_1_1invalid__config__file__syntax"/>
        <childnode refid="79" relation="public-inheritance">
        </childnode>
      </node>
      <node id="79">
        <label>hpx::program_options::invalid_syntax</label>
        <link refid="classhpx_1_1program__options_1_1invalid__syntax"/>
        <childnode refid="73" relation="public-inheritance">
        </childnode>
      </node>
      <node id="77">
        <label>hpx::program_options::ambiguous_option</label>
        <link refid="classhpx_1_1program__options_1_1ambiguous__option"/>
        <childnode refid="76" relation="public-inheritance">
        </childnode>
      </node>
      <node id="87">
        <label>hpx::program_options::invalid_option_value</label>
        <link refid="classhpx_1_1program__options_1_1invalid__option__value"/>
        <childnode refid="85" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="90">
        <label>std::logic_error</label>
      </node>
      <node id="89">
        <label>hpx::program_options::error</label>
        <link refid="classhpx_1_1program__options_1_1error"/>
        <childnode refid="90" relation="public-inheritance">
        </childnode>
      </node>
      <node id="88">
        <label>hpx::program_options::error_with_option_name</label>
        <link refid="classhpx_1_1program__options_1_1error__with__option__name"/>
        <childnode refid="89" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/program_options/include/hpx/program_options/errors.hpp" line="133" column="1" bodyfile="libs/program_options/include/hpx/program_options/errors.hpp" bodystart="132" bodyend="229"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a6fb7db39524adc2e646769a505fbd073" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>add_context</name></member>
      <member refid="classhpx_1_1program__options_1_1error_1ab26c4ac8097f493326e797cb5e49ce60" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>error</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ade012afab216c2fc9459acc43eaec793" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>error_with_option_name</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a0b65fb289c649b71e52d0581173a0c8e" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>get_canonical_option_name</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ab62af4c0675cc19fbf04f6ac9b7402ff" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>get_canonical_option_prefix</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a8562ba15ccf457f4ac5e609337ff916d" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>get_option_name</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a134f824d91347da4b0b2761e1297a0cd" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>m_error_template</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ac8adc037b1f8683c8f2b97752d8417fa" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>m_message</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ad08d9687c8511639fd73615fb1c5c7e5" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>m_option_style</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a98f723108458e193563832e3df1f07ab" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>m_substitution_defaults</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a8d9c3efa92db291b0e0f8a22249e4864" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>m_substitutions</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a8a8e92acfe74094edc3a09c57376974d" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>replace_token</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1af6e1934eb1358195fe96fa37a5410b55" prot="public" virt="virtual"><scope>hpx::program_options::error_with_option_name</scope><name>set_option_name</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ad4b6ea7facfabaf9024568954ff1b46a" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>set_original_token</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1aafaa36fc2ddb43600cb5058b4cca8c64" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>set_prefix</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ae31197640118ca6108a31b90a38b684e" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>set_substitute</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a8fb32fc5333a833f7f2c2a0f8cec09de" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>set_substitute_default</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1ad3a23ca94f6fb77cab3e171afbe63e23" prot="protected" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>string_pair</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a372829ce0ee974d480b2cce57ea1db73" prot="protected" virt="virtual"><scope>hpx::program_options::error_with_option_name</scope><name>substitute_placeholders</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a0fcfa7271ddc04650f36445463ab23db" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>what</name></member>
      <member refid="classhpx_1_1program__options_1_1error__with__option__name_1a9ad92bead5bb8545653682ad675fc1f0" prot="public" virt="non-virtual"><scope>hpx::program_options::error_with_option_name</scope><name>~error_with_option_name</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
