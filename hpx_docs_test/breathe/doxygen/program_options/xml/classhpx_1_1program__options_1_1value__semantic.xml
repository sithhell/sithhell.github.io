<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1value__semantic" kind="class" language="C++" prot="public" abstract="yes">
    <compoundname>hpx::program_options::value_semantic</compoundname>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01char_01_4" prot="public" virt="non-virtual">hpx::program_options::value_semantic_codecvt_helper&lt; char &gt;</derivedcompoundref>
    <derivedcompoundref refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01wchar__t_01_4" prot="public" virt="non-virtual">hpx::program_options::value_semantic_codecvt_helper&lt; wchar_t &gt;</derivedcompoundref>
    <includes refid="value__semantic_8hpp" local="no">value_semantic.hpp</includes>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1ad80cff54dd5b853fd030391e3039cb5b" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>std::string</type>
        <definition>virtual std::string hpx::program_options::value_semantic::name</definition>
        <argsstring>() const =0</argsstring>
        <name>name</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1ae87fb53082ed1ce6c38e8086c1a8a8f1">name</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the name of the option. The name is only meaningful for automatic help message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="72" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a167bc134dd276a4bec508bba48a5c8a4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned</type>
        <definition>virtual unsigned hpx::program_options::value_semantic::min_tokens</definition>
        <argsstring>() const =0</argsstring>
        <name>min_tokens</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1aedad190f7e15e4d228a8b4df5e492751">min_tokens</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The minimum number of tokens for this option that should be present on the command line. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="76" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a77b9c569a8b0177748cdc8456d96cf49" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>unsigned</type>
        <definition>virtual unsigned hpx::program_options::value_semantic::max_tokens</definition>
        <argsstring>() const =0</argsstring>
        <name>max_tokens</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1a6b9912b0e200405e6738637909f0e44c">max_tokens</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>The maximum number of tokens for this option that should be present on the command line. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="80" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a1c306c41e05017df2bffaa8795a9708a" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool hpx::program_options::value_semantic::is_composing</definition>
        <argsstring>() const =0</argsstring>
        <name>is_composing</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1ab5ab088eb7d46b9face84640105a772c">is_composing</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if values from different sources should be composed. Otherwise, value from the first source is used and values from other sources are discarded. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="86" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1aa2f3dd57bfe625dbe76bb707be256220" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool hpx::program_options::value_semantic::is_required</definition>
        <argsstring>() const =0</argsstring>
        <name>is_required</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1a9c96834f660faa838ee8e90a95229c49">is_required</reimplementedby>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if value must be given. Non-optional value </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="91" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a4483d8f19525a323309eeebe6a1cc701" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void hpx::program_options::value_semantic::parse</definition>
        <argsstring>(hpx::util::any_nonser &amp;value_store, const std::vector&lt; std::string &gt; &amp;new_tokens, bool utf8) const =0</argsstring>
        <name>parse</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01char_01_4_1ab08ba0a90e2fe557ad1e713e8809362d">parse</reimplementedby>
        <reimplementedby refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01wchar__t_01_4_1a7c2ea6f0bb7209f5a932f7d365c729ed">parse</reimplementedby>
        <param>
          <type>hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <param>
          <type>const std::vector&lt; std::string &gt; &amp;</type>
          <declname>new_tokens</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>utf8</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Parses a group of tokens that specify a value of option. Stores the result in &apos;value_store&apos;, using whatever representation is desired. May be be called several times if value of the same option is specified more than once. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="98" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a0d689252b6d6a961a885782934e274bc" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>bool</type>
        <definition>virtual bool hpx::program_options::value_semantic::apply_default</definition>
        <argsstring>(hpx::util::any_nonser &amp;value_store) const =0</argsstring>
        <name>apply_default</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1a659058151a15d2d86ee0060ab415693f">apply_default</reimplementedby>
        <param>
          <type>hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called to assign default value to &apos;value_store&apos;. Returns true if default value is assigned, and false if no default value exists. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="104" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1aa72fb034c6ae89b6c73ee2e4b7fc0172" prot="public" static="no" const="yes" explicit="no" inline="no" virt="pure-virtual">
        <type>void</type>
        <definition>virtual void hpx::program_options::value_semantic::notify</definition>
        <argsstring>(const hpx::util::any_nonser &amp;value_store) const =0</argsstring>
        <name>notify</name>
        <reimplementedby refid="classhpx_1_1program__options_1_1untyped__value_1a3331126acdd983f12e94823c904c6350">notify</reimplementedby>
        <param>
          <type>const hpx::util::any_nonser &amp;</type>
          <declname>value_store</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Called when final value of an option is determined. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="109" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1value__semantic_1a65e85d853ce018535bc7f4d249c14659" prot="public" static="no" const="no" explicit="no" inline="yes" virt="virtual">
        <type></type>
        <definition>virtual hpx::program_options::value_semantic::~value_semantic</definition>
        <argsstring>()</argsstring>
        <name>~value_semantic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="111" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="111" bodyend="111"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class which specifies how the option&apos;s value is to be parsed and converted into C++ types. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="232">
        <label>hpx::program_options::value_semantic_codecvt_helper&lt; char &gt;</label>
        <link refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01char_01_4"/>
        <childnode refid="231" relation="public-inheritance">
        </childnode>
      </node>
      <node id="234">
        <label>hpx::program_options::value_semantic_codecvt_helper&lt; wchar_t &gt;</label>
        <link refid="classhpx_1_1program__options_1_1value__semantic__codecvt__helper_3_01wchar__t_01_4"/>
        <childnode refid="231" relation="public-inheritance">
        </childnode>
      </node>
      <node id="233">
        <label>hpx::program_options::untyped_value</label>
        <link refid="classhpx_1_1program__options_1_1untyped__value"/>
        <childnode refid="232" relation="public-inheritance">
        </childnode>
      </node>
      <node id="231">
        <label>hpx::program_options::value_semantic</label>
        <link refid="classhpx_1_1program__options_1_1value__semantic"/>
      </node>
    </inheritancegraph>
    <location file="libs/program_options/include/hpx/program_options/value_semantic.hpp" line="67" column="1" bodyfile="libs/program_options/include/hpx/program_options/value_semantic.hpp" bodystart="66" bodyend="112"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a0d689252b6d6a961a885782934e274bc" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>apply_default</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a1c306c41e05017df2bffaa8795a9708a" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>is_composing</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1aa2f3dd57bfe625dbe76bb707be256220" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>is_required</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a77b9c569a8b0177748cdc8456d96cf49" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>max_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a167bc134dd276a4bec508bba48a5c8a4" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>min_tokens</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1ad80cff54dd5b853fd030391e3039cb5b" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>name</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1aa72fb034c6ae89b6c73ee2e4b7fc0172" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>notify</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a4483d8f19525a323309eeebe6a1cc701" prot="public" virt="pure-virtual"><scope>hpx::program_options::value_semantic</scope><name>parse</name></member>
      <member refid="classhpx_1_1program__options_1_1value__semantic_1a65e85d853ce018535bc7f4d249c14659" prot="public" virt="virtual"><scope>hpx::program_options::value_semantic</scope><name>~value_semantic</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
