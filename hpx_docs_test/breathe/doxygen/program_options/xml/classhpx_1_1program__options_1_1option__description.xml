<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1option__description" kind="class" language="C++" prot="public">
    <compoundname>hpx::program_options::option_description</compoundname>
    <includes refid="options__description_8hpp" local="no">options_description.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="enum" id="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9" prot="public" static="no">
        <name>match_result</name>
        <enumvalue id="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9a264c328e7c47be3141b51a63c7878ea9" prot="public">
          <name>no_match</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9a383757040266c8502ae7fb1d1ce3866e" prot="public">
          <name>full_match</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9aa2b80fae0ba7ce43765a6b6d12a15fa0" prot="public">
          <name>approximate_match</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="124" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="123" bodyend="128"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1option__description_1a8b8aa3a36cc1eaa904505157d4a5a30d" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::option_description::m_short_name</definition>
        <argsstring></argsstring>
        <name>m_short_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>a one-character &quot;switch&quot; name - with its prefix, so that this is either empty or has length 2 (e.g. &quot;-c&quot; </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="180" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="180" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1option__description_1aa5652d8bacfac385d153b6ac7c6b8067" prot="private" static="no" mutable="no">
        <type>std::vector&lt; std::string &gt;</type>
        <definition>std::vector&lt;std::string&gt; hpx::program_options::option_description::m_long_names</definition>
        <argsstring></argsstring>
        <name>m_long_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>one or more names by which this option may be specified on a command-line or in a config file, which are not a single-letter switch. The names here are <emphasis>without</emphasis> any prefix. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="188" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="188" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1option__description_1a37a338292ffa04a2ff12c74897af86ad" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::program_options::option_description::m_description</definition>
        <argsstring></argsstring>
        <name>m_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="190" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="190" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1option__description_1a2baba6b577bc708fb439e96b23d1cda6" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const value_semantic&gt; hpx::program_options::option_description::m_value_semantic</definition>
        <argsstring></argsstring>
        <name>m_value_semantic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="194" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="194" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a7cb4691632fecd4e0e58e0d697a2c4d3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::option_description::option_description</definition>
        <argsstring>()</argsstring>
        <name>option_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="88" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a6072fce0f78690e09cf04a75392fe6d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::option_description::option_description</definition>
        <argsstring>(const char *name, const value_semantic *s)</argsstring>
        <name>option_description</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref> *</type>
          <declname>s</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the object with the passed data.</para><para>Note: it would be nice to make the second parameter auto_ptr, to explicitly pass ownership. Unfortunately, it&apos;s often needed to create objects of types derived from &apos;<ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref>&apos;: <ref refid="classhpx_1_1program__options_1_1options__description" kindref="compound">options_description</ref> d; d.add_options()(&quot;a&quot;, parameter&lt;int&gt;(&quot;n&quot;)-&gt;default_value(1)); Here, the static type returned by &apos;parameter&apos; should be derived from <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref>.</para><para>Alas, derived-&gt;base conversion for auto_ptr does not really work, see <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2000/n1232.pdf">http://www.open-std.org/jtc1/sc22/wg21/docs/papers/2000/n1232.pdf</ulink> <ulink url="http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#84">http://www.open-std.org/jtc1/sc22/wg21/docs/cwg_defects.html#84</ulink></para><para>So, we have to use plain old pointers. Besides, users are not expected to use the constructor directly.</para><para>The &apos;name&apos; parameter is interpreted by the following rules:<itemizedlist>
<listitem><para>if there&apos;s no &quot;,&quot; character in &apos;name&apos;, it specifies long name</para></listitem><listitem><para>otherwise, the part before &quot;,&quot; specifies long name and the part after -- short name. </para></listitem></itemizedlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="114" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a9b4f6e8b24b4d3088e984a4278d73682" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::option_description::option_description</definition>
        <argsstring>(const char *name, const value_semantic *s, const char *description)</argsstring>
        <name>option_description</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref> *</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>description</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Initializes the class with the passed data. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="118" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a3bdf7f3e9db2b844bcadc848e880e954" prot="public" static="no" const="no" explicit="no" inline="no" virt="virtual">
        <type></type>
        <definition>virtual hpx::program_options::option_description::~option_description</definition>
        <argsstring>()</argsstring>
        <name>~option_description</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="121" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1abb8a174df914a715938d5d3f8e8ffaf7" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>match_result</type>
        <definition>match_result hpx::program_options::option_description::match</definition>
        <argsstring>(const std::string &amp;option, bool approx, bool long_ignore_case, bool short_ignore_case) const</argsstring>
        <name>match</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>option</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>approx</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>long_ignore_case</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>short_ignore_case</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Given &apos;option&apos;, specified in the input source, returns &apos;true&apos; if &apos;option&apos; specifies *this. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="133" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a93a61d334c6bfb6b3e832f523bc159a9" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::program_options::option_description::key</definition>
        <argsstring>(const std::string &amp;option) const</argsstring>
        <name>key</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>option</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the key that should identify the option, in particular in the <ref refid="classhpx_1_1program__options_1_1variables__map" kindref="compound">variables_map</ref> class. The &apos;option&apos; parameter is the option spelling from the input source. If option name contains &apos;*&apos;, returns &apos;option&apos;. If long name was specified, it&apos;s the long name, otherwise it&apos;s a short name with pre-pended &apos;-&apos;. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="144" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1aff4eb02a923e50a2884dd504cf63d59f" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::option_description::canonical_display_name</definition>
        <argsstring>(int canonical_option_style=0) const</argsstring>
        <name>canonical_display_name</name>
        <param>
          <type>int</type>
          <declname>canonical_option_style</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the canonical name for the option description to enable the user to recognized a matching option. 1) For short options (&apos;-&apos;, &apos;/&apos;), returns the short name prefixed. 2) For long options (&apos;<ndash/>&apos; / &apos;-&apos;) returns the first long name prefixed 3) All other cases, returns the first long name (if present) or the short name, un-prefixed. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="153" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1ad64bd4b2cb319d2e162b8ce19b1c023c" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::program_options::option_description::long_name</definition>
        <argsstring>() const</argsstring>
        <name>long_name</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="156" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1ac45efc70403e9b746886bc7850fdcc21" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::pair&lt; const std::string *, std::size_t &gt;</type>
        <definition>const std::pair&lt;const std::string*, std::size_t&gt; hpx::program_options::option_description::long_names</definition>
        <argsstring>() const</argsstring>
        <name>long_names</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="158" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a6286d23c082f36f6037aba46325afb98" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::program_options::option_description::description</definition>
        <argsstring>() const</argsstring>
        <name>description</name>
        <briefdescription>
<para>Explanation of this option. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="161" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a273988bd7285542294720c05d418eb46" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::shared_ptr&lt; const <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const value_semantic&gt; hpx::program_options::option_description::semantic</definition>
        <argsstring>() const</argsstring>
        <name>semantic</name>
        <briefdescription>
<para>Semantic of option&apos;s value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="164" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a4372907a05c63fae44c5c4d04c24b592" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::option_description::format_name</definition>
        <argsstring>() const</argsstring>
        <name>format_name</name>
        <briefdescription>
<para>Returns the option name, formatted suitably for usage message. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="167" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1a7459452c0713c11a9595bde2c64f79b4" prot="public" static="no" const="yes" explicit="no" inline="no" virt="non-virtual">
        <type>std::string</type>
        <definition>std::string hpx::program_options::option_description::format_parameter</definition>
        <argsstring>() const</argsstring>
        <name>format_parameter</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the parameter name and properties, formatted suitably for usage message. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="171" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1option__description_1afe979560d0482daff9cc49bd4c1f8c21" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="classhpx_1_1program__options_1_1option__description" kindref="compound">option_description</ref> &amp;</type>
        <definition>option_description&amp; hpx::program_options::option_description::set_names</definition>
        <argsstring>(const char *name)</argsstring>
        <name>set_names</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="174" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Describes one possible command line/config file option. There are two kinds of properties of an option. First describe it syntactically and are used only to validate input. Second affect interpretation of the option, for example default value for it or function that should be called when the value is finally known. Routines which perform parsing never use second kind of properties -- they are side effect free. <simplesect kind="see"><para><ref refid="classhpx_1_1program__options_1_1options__description" kindref="compound">options_description</ref> </para></simplesect>
</para>    </detaileddescription>
    <location file="libs/program_options/include/hpx/program_options/options_description.hpp" line="86" column="1" bodyfile="libs/program_options/include/hpx/program_options/options_description.hpp" bodystart="85" bodyend="195"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9aa2b80fae0ba7ce43765a6b6d12a15fa0" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>approximate_match</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1aff4eb02a923e50a2884dd504cf63d59f" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>canonical_display_name</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a6286d23c082f36f6037aba46325afb98" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>description</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a4372907a05c63fae44c5c4d04c24b592" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>format_name</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a7459452c0713c11a9595bde2c64f79b4" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>format_parameter</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9a383757040266c8502ae7fb1d1ce3866e" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>full_match</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a93a61d334c6bfb6b3e832f523bc159a9" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>key</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1ad64bd4b2cb319d2e162b8ce19b1c023c" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>long_name</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1ac45efc70403e9b746886bc7850fdcc21" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>long_names</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a37a338292ffa04a2ff12c74897af86ad" prot="private" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>m_description</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1aa5652d8bacfac385d153b6ac7c6b8067" prot="private" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>m_long_names</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a8b8aa3a36cc1eaa904505157d4a5a30d" prot="private" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>m_short_name</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a2baba6b577bc708fb439e96b23d1cda6" prot="private" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>m_value_semantic</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1abb8a174df914a715938d5d3f8e8ffaf7" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>match</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>match_result</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a365b36f4f79ad3aaf69e2221b2c544d9a264c328e7c47be3141b51a63c7878ea9" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>no_match</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a7cb4691632fecd4e0e58e0d697a2c4d3" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>option_description</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a6072fce0f78690e09cf04a75392fe6d6" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>option_description</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a9b4f6e8b24b4d3088e984a4278d73682" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>option_description</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a273988bd7285542294720c05d418eb46" prot="public" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>semantic</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1afe979560d0482daff9cc49bd4c1f8c21" prot="private" virt="non-virtual"><scope>hpx::program_options::option_description</scope><name>set_names</name></member>
      <member refid="classhpx_1_1program__options_1_1option__description_1a3bdf7f3e9db2b844bcadc848e880e954" prot="public" virt="virtual"><scope>hpx::program_options::option_description</scope><name>~option_description</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
