<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1variable__value" kind="class" language="C++" prot="public">
    <compoundname>hpx::program_options::variable_value</compoundname>
    <includes refid="variables__map_8hpp" local="no">variables_map.hpp</includes>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1variable__value_1a2a746ec9872bf4d73d57b1d3e7809de3" prot="private" static="no" mutable="no">
        <type>hpx::util::any_nonser</type>
        <definition>hpx::util::any_nonser hpx::program_options::variable_value::v</definition>
        <argsstring></argsstring>
        <name>v</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="112" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1variable__value_1a81af1fecb026ac954e01fd702fc11a93" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::variable_value::m_defaulted</definition>
        <argsstring></argsstring>
        <name>m_defaulted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="113" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1variable__value_1a05ab63b0f67577af3d26e49cb097fe53" prot="private" static="no" mutable="no">
        <type>std::shared_ptr&lt; const <ref refid="classhpx_1_1program__options_1_1value__semantic" kindref="compound">value_semantic</ref> &gt;</type>
        <definition>std::shared_ptr&lt;const value_semantic&gt; hpx::program_options::variable_value::m_value_semantic</definition>
        <argsstring></argsstring>
        <name>m_value_semantic</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="119" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="119" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classhpx_1_1program__options_1_1variable__value_1ac3a2b216728637e16ed13cf8f3ad4208" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class variables_map</definition>
        <argsstring></argsstring>
        <name>variables_map</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="124" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="124" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="classhpx_1_1program__options_1_1variable__value_1afe48e90e5f922d0e7e65fcdadb73a46c" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend void</type>
        <definition>void store</definition>
        <argsstring>(const basic_parsed_options&lt; char &gt; &amp;options, variables_map &amp;m, bool)</argsstring>
        <name>store</name>
        <param>
          <type>const <ref refid="classhpx_1_1program__options_1_1basic__parsed__options" kindref="compound">basic_parsed_options</ref>&lt; char &gt; &amp;</type>
          <declname>options</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1program__options_1_1variables__map" kindref="compound">variables_map</ref> &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>bool</type>
          <defname>utf8</defname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Stores in &apos;m&apos; all options that are defined in &apos;options&apos;. If &apos;m&apos; already has a non-defaulted value of an option, that value is not changed, even if &apos;options&apos; specify some value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="121" column="1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1af336ddfea50bb3acedabf9590fc2d01c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::variable_value::variable_value</definition>
        <argsstring>()</argsstring>
        <name>variable_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="76" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1af55d599d76639c154c1299fe1187443e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::variable_value::variable_value</definition>
        <argsstring>(const hpx::util::any_nonser &amp;xv, bool xdefaulted)</argsstring>
        <name>variable_value</name>
        <param>
          <type>const hpx::util::any_nonser &amp;</type>
          <declname>xv</declname>
        </param>
        <param>
          <type>bool</type>
          <declname>xdefaulted</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="80" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="80" bodyend="84"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1abfcbaa93bc7602efc964a0e4dd01694b" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>const T &amp;</type>
        <definition>const T&amp; hpx::program_options::variable_value::as</definition>
        <argsstring>() const</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>If stored value if of type T, returns that value. Otherwise, throws boost::bad_any_cast exception. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="89" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="89" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1a8d1dc38b75e36743939cc4ba16659333" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class T</type>
          </param>
        </templateparamlist>
        <type>T &amp;</type>
        <definition>T&amp; hpx::program_options::variable_value::as</definition>
        <argsstring>()</argsstring>
        <name>as</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>This is an overloaded member function, provided for convenience. It differs from the above function only in what argument(s) it accepts. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="95" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="95" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1a06f0e11dfddd469e6d756b857bfce210" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::program_options::variable_value::empty</definition>
        <argsstring>() const</argsstring>
        <name>empty</name>
        <briefdescription>
<para>Returns true if no value is stored. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="101" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="212" bodyend="215"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1a2c2e4d5d6169b019a8bb8f5a1d20c29c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::program_options::variable_value::defaulted</definition>
        <argsstring>() const</argsstring>
        <name>defaulted</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns true if the value was not explicitly given, but has default value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="104" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="217" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1aa9d252ecd12a9f02a396d0cfcfe87066" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const hpx::util::any_nonser &amp;</type>
        <definition>const hpx::util::any_nonser &amp; hpx::program_options::variable_value::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the contained value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="106" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1variable__value_1a7a4e05541be3bcfa1204de7a17229263" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>hpx::util::any_nonser &amp;</type>
        <definition>hpx::util::any_nonser &amp; hpx::program_options::variable_value::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the contained value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="109" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="227" bodyend="230"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Class holding value of option. Contains details about how the value is set and allows to conveniently obtain the value. </para>    </detaileddescription>
    <location file="libs/program_options/include/hpx/program_options/variables_map.hpp" line="74" column="1" bodyfile="libs/program_options/include/hpx/program_options/variables_map.hpp" bodystart="73" bodyend="125"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1variable__value_1abfcbaa93bc7602efc964a0e4dd01694b" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>as</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a8d1dc38b75e36743939cc4ba16659333" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>as</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a2c2e4d5d6169b019a8bb8f5a1d20c29c" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>defaulted</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a06f0e11dfddd469e6d756b857bfce210" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>empty</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a81af1fecb026ac954e01fd702fc11a93" prot="private" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>m_defaulted</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a05ab63b0f67577af3d26e49cb097fe53" prot="private" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>m_value_semantic</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1afe48e90e5f922d0e7e65fcdadb73a46c" prot="private" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>store</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a2a746ec9872bf4d73d57b1d3e7809de3" prot="private" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>v</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1aa9d252ecd12a9f02a396d0cfcfe87066" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>value</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1a7a4e05541be3bcfa1204de7a17229263" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>value</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1af336ddfea50bb3acedabf9590fc2d01c" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>variable_value</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1af55d599d76639c154c1299fe1187443e" prot="public" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>variable_value</name></member>
      <member refid="classhpx_1_1program__options_1_1variable__value_1ac3a2b216728637e16ed13cf8f3ad4208" prot="private" virt="non-virtual"><scope>hpx::program_options::variable_value</scope><name>variables_map</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
