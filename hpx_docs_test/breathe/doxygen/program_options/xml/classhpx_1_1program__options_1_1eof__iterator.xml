<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1program__options_1_1eof__iterator" kind="class" language="C++" prot="public">
    <compoundname>hpx::program_options::eof_iterator</compoundname>
    <basecompoundref prot="public" virt="non-virtual">util::iterator_facade&lt; Derived, ValueType const, std::forward_iterator_tag &gt;</basecompoundref>
    <includes refid="eof__iterator_8hpp" local="no">eof_iterator.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>Derived</declname>
        <defname>Derived</defname>
      </param>
      <param>
        <type>class</type>
        <declname>ValueType</declname>
        <defname>ValueType</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classhpx_1_1program__options_1_1eof__iterator_1ad00908d93ca5dd8443486a1fe00aeea2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class hpx::util::iterator_core_access</definition>
        <argsstring></argsstring>
        <name>hpx::util::iterator_core_access</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="88" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="88" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1eof__iterator_1a0e139b19e02528bd2813f2b377c72492" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::m_at_eof</definition>
        <argsstring></argsstring>
        <name>m_at_eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="108" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="108" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1program__options_1_1eof__iterator_1a0b778cc6331c886ef05007c9fe18e103" prot="private" static="no" mutable="no">
        <type>ValueType</type>
        <definition>ValueType hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::m_value</definition>
        <argsstring></argsstring>
        <name>m_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="109" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="109" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1a94bbf816742288f43381a0c0e421fc59" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::eof_iterator</definition>
        <argsstring>()</argsstring>
        <name>eof_iterator</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="67" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="67" bodyend="70"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1a1b6477ca01a98ed2247d99671b946ce9" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>ValueType &amp;</type>
        <definition>ValueType&amp; hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Returns the reference which should be used by derived class to store the next value. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="75" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="75" bodyend="78"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1a65937fa955028476b6028986ac28537f" prot="protected" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::found_eof</definition>
        <argsstring>()</argsstring>
        <name>found_eof</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Should be called by derived class to indicate that it can&apos;t produce next element. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="82" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1a5790c24fab1ac69d1c446410d693e29e" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::increment</definition>
        <argsstring>()</argsstring>
        <name>increment</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="90" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="90" bodyend="93"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1aff04d3b09a9874a3bd7e939df8952494" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::equal</definition>
        <argsstring>(const eof_iterator &amp;other) const</argsstring>
        <name>equal</name>
        <param>
          <type>const <ref refid="classhpx_1_1program__options_1_1eof__iterator" kindref="compound">eof_iterator</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="95" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="95" bodyend="101"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1program__options_1_1eof__iterator_1ae4b3b650d486a3ee0389e2de075bcd3e" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const ValueType &amp;</type>
        <definition>const ValueType&amp; hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;::dereference</definition>
        <argsstring>() const</argsstring>
        <name>dereference</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="103" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="103" bodyend="106"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The &apos;<ref refid="classhpx_1_1program__options_1_1eof__iterator" kindref="compound">eof_iterator</ref>&apos; class is useful for constructing forward iterators in cases where iterator extract data from some source and it&apos;s easy to detect &apos;eof&apos; -- i.e. the situation where there&apos;s no data. One apparent example is reading lines from a file.</para><para>Implementing such iterators using &apos;iterator_facade&apos; directly would require to create class with three core operation, a couple of constructors. When using &apos;<ref refid="classhpx_1_1program__options_1_1eof__iterator" kindref="compound">eof_iterator</ref>&apos;, the derived class should define only one method to get new value, plus a couple of constructors.</para><para>The basic idea is that iterator has &apos;eof&apos; bit. Two iterators are equal only if both have their &apos;eof&apos; bits set. The &apos;get&apos; method either obtains the new value or sets the &apos;eof&apos; bit.</para><para>Specifically, derived class should define:</para><para><orderedlist>
<listitem><para>A default constructor, which creates iterator with &apos;eof&apos; bit set. The constructor body should call &apos;found_eof&apos; method defined here.</para></listitem><listitem><para>Some other constructor. It should initialize some &apos;data pointer&apos; used in iterator operation and then call &apos;get&apos;.</para></listitem><listitem><para>The &apos;get&apos; method. It should operate this way:<itemizedlist>
<listitem><para>look at some &apos;data pointer&apos; to see if new element is available; if not, it should call &apos;found_eof&apos;.</para></listitem><listitem><para>extract new element and store it at location returned by the &apos;value&apos; method.</para></listitem><listitem><para>advance the data pointer.</para></listitem></itemizedlist>
</para></listitem></orderedlist>
</para><para>Essentially, the &apos;get&apos; method has the functionality of both &apos;increment&apos; and &apos;dereference&apos;. It&apos;s very good for the cases where data extraction implicitly moves data pointer, like for stream operation. </para>    </detaileddescription>
    <inheritancegraph>
      <node id="38">
        <label>hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;</label>
        <link refid="classhpx_1_1program__options_1_1eof__iterator"/>
        <childnode refid="39" relation="public-inheritance">
        </childnode>
      </node>
      <node id="39">
        <label>util::iterator_facade&lt; Derived, ValueType const, std::forward_iterator_tag &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="40">
        <label>hpx::program_options::eof_iterator&lt; Derived, ValueType &gt;</label>
        <link refid="classhpx_1_1program__options_1_1eof__iterator"/>
        <childnode refid="41" relation="public-inheritance">
        </childnode>
      </node>
      <node id="41">
        <label>util::iterator_facade&lt; Derived, ValueType const, std::forward_iterator_tag &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libs/program_options/include/hpx/program_options/eof_iterator.hpp" line="65" column="1" bodyfile="libs/program_options/include/hpx/program_options/eof_iterator.hpp" bodystart="62" bodyend="110"/>
    <listofallmembers>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1ae4b3b650d486a3ee0389e2de075bcd3e" prot="private" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>dereference</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a94bbf816742288f43381a0c0e421fc59" prot="public" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>eof_iterator</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1aff04d3b09a9874a3bd7e939df8952494" prot="private" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>equal</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a65937fa955028476b6028986ac28537f" prot="protected" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>found_eof</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1ad00908d93ca5dd8443486a1fe00aeea2" prot="public" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>hpx::util::iterator_core_access</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a5790c24fab1ac69d1c446410d693e29e" prot="private" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>increment</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a0e139b19e02528bd2813f2b377c72492" prot="private" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>m_at_eof</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a0b778cc6331c886ef05007c9fe18e103" prot="private" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>m_value</name></member>
      <member refid="classhpx_1_1program__options_1_1eof__iterator_1a1b6477ca01a98ed2247d99671b946ce9" prot="protected" virt="non-virtual"><scope>hpx::program_options::eof_iterator</scope><name>value</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
