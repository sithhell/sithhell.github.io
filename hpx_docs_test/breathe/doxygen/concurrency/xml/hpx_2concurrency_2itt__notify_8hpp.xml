<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hpx_2concurrency_2itt__notify_8hpp" kind="file" language="C++">
    <compoundname>itt_notify.hpp</compoundname>
    <includes local="no">hpx/config.hpp</includes>
    <includes local="no">cstddef</includes>
    <includes local="no">cstdint</includes>
    <includes local="no">cstring</includes>
    <includedby refid="hpx_2concurrency_2spinlock_8hpp" local="no">libs/concurrency/include/hpx/concurrency/spinlock.hpp</includedby>
    <includedby refid="hpx_2concurrency_2spinlock__pool_8hpp" local="no">libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp</includedby>
    <includedby refid="compatibility_2hpx_2util_2itt__notify_8hpp" local="no">libs/concurrency/include_compatibility/hpx/util/itt_notify.hpp</includedby>
    <incdepgraph>
      <node id="87">
        <label>cstdint</label>
      </node>
      <node id="85">
        <label>hpx/config.hpp</label>
      </node>
      <node id="86">
        <label>cstddef</label>
      </node>
      <node id="84">
        <label>libs/concurrency/include/hpx/concurrency/itt_notify.hpp</label>
        <link refid="hpx_2concurrency_2itt__notify_8hpp"/>
        <childnode refid="85" relation="include">
        </childnode>
        <childnode refid="86" relation="include">
        </childnode>
        <childnode refid="87" relation="include">
        </childnode>
        <childnode refid="88" relation="include">
        </childnode>
      </node>
      <node id="88">
        <label>cstring</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="90">
        <label>libs/concurrency/include/hpx/concurrency/spinlock.hpp</label>
        <link refid="hpx_2concurrency_2spinlock_8hpp_source"/>
        <childnode refid="91" relation="include">
        </childnode>
      </node>
      <node id="94">
        <label>libs/concurrency/include_compatibility/hpx/util/itt_notify.hpp</label>
        <link refid="compatibility_2hpx_2util_2itt__notify_8hpp_source"/>
      </node>
      <node id="92">
        <label>libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp</label>
        <link refid="hpx_2concurrency_2spinlock__pool_8hpp_source"/>
        <childnode refid="93" relation="include">
        </childnode>
      </node>
      <node id="93">
        <label>libs/concurrency/include_compatibility/hpx/util/spinlock_pool.hpp</label>
        <link refid="compatibility_2hpx_2util_2spinlock__pool_8hpp_source"/>
      </node>
      <node id="91">
        <label>libs/concurrency/include_compatibility/hpx/util/spinlock.hpp</label>
        <link refid="compatibility_2hpx_2util_2spinlock_8hpp_source"/>
      </node>
      <node id="89">
        <label>libs/concurrency/include/hpx/concurrency/itt_notify.hpp</label>
        <link refid="hpx_2concurrency_2itt__notify_8hpp"/>
        <childnode refid="90" relation="include">
        </childnode>
        <childnode refid="92" relation="include">
        </childnode>
        <childnode refid="94" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1stack__context" prot="public">hpx::util::itt::stack_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1caller__context" prot="public">hpx::util::itt::caller_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1domain" prot="public">hpx::util::itt::domain</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1thread__domain" prot="public">hpx::util::itt::thread_domain</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1id" prot="public">hpx::util::itt::id</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1frame__context" prot="public">hpx::util::itt::frame_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1undo__frame__context" prot="public">hpx::util::itt::undo_frame_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1mark__context" prot="public">hpx::util::itt::mark_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1undo__mark__context" prot="public">hpx::util::itt::undo_mark_context</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1string__handle" prot="public">hpx::util::itt::string_handle</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1task" prot="public">hpx::util::itt::task</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1heap__function" prot="public">hpx::util::itt::heap_function</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1heap__allocate" prot="public">hpx::util::itt::heap_allocate</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1heap__free" prot="public">hpx::util::itt::heap_free</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1heap__internal__access" prot="public">hpx::util::itt::heap_internal_access</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1counter" prot="public">hpx::util::itt::counter</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1event" prot="public">hpx::util::itt::event</innerclass>
    <innerclass refid="structhpx_1_1util_1_1itt_1_1mark__event" prot="public">hpx::util::itt::mark_event</innerclass>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1util">hpx::util</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1itt">hpx::util::itt</innernamespace>
      <sectiondef kind="define">
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a3b3d86aa314dc60323c749ec849ccc06" prot="public" static="no">
        <name>HPX_ITT_SYNC_CREATE</name>
        <param><defname>obj</defname></param>
        <param><defname>type</defname></param>
        <param><defname>name</defname></param>
        <initializer>itt_sync_create(obj, type, name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="23" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="23" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a76876c5254737e03ebafefe077c26813" prot="public" static="no">
        <name>HPX_ITT_SYNC_RENAME</name>
        <param><defname>obj</defname></param>
        <param><defname>name</defname></param>
        <initializer>itt_sync_rename(obj, name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="24" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="24" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a004b5201ed7ca07ff4da3c9b05030eaa" prot="public" static="no">
        <name>HPX_ITT_SYNC_PREPARE</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_prepare(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="25" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="25" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a3e59db98f88ea2a1b78a097e848cf835" prot="public" static="no">
        <name>HPX_ITT_SYNC_CANCEL</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_cancel(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="26" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a7dacfa040af14f068ecd94ce460a56c7" prot="public" static="no">
        <name>HPX_ITT_SYNC_ACQUIRED</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_acquired(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="27" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1af224a8fdb2e8d86ade3fc67b2f6e4868" prot="public" static="no">
        <name>HPX_ITT_SYNC_RELEASING</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_releasing(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="28" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="28" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a08f290649235ca814dc3851dca990061" prot="public" static="no">
        <name>HPX_ITT_SYNC_RELEASED</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_released(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="29" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="29" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a87e3c41144b875b37a30459a32adf585" prot="public" static="no">
        <name>HPX_ITT_SYNC_DESTROY</name>
        <param><defname>obj</defname></param>
        <initializer>itt_sync_destroy(obj)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="30" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a0344d37c74c874d9377be7b48ce4ae0e" prot="public" static="no">
        <name>HPX_ITT_STACK_CREATE</name>
        <param><defname>ctx</defname></param>
        <initializer>ctx = itt_stack_create()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="32" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a99671bdc5c44d2e5e126fce6c90b05b9" prot="public" static="no">
        <name>HPX_ITT_STACK_CALLEE_ENTER</name>
        <param><defname>ctx</defname></param>
        <initializer>itt_stack_enter(ctx)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="33" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="33" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a47bc51aa00c7e9a1e352d9711e36e402" prot="public" static="no">
        <name>HPX_ITT_STACK_CALLEE_LEAVE</name>
        <param><defname>ctx</defname></param>
        <initializer>itt_stack_leave(ctx)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="34" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="34" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1ab5ed3a1e04e3ec14fc7bd219ef4a0251" prot="public" static="no">
        <name>HPX_ITT_STACK_DESTROY</name>
        <param><defname>ctx</defname></param>
        <initializer>itt_stack_destroy(ctx)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="35" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="35" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1ad0eb39dfa985b0487e714943223ee71f" prot="public" static="no">
        <name>HPX_ITT_FRAME_BEGIN</name>
        <param><defname>frame</defname></param>
        <param><defname>id</defname></param>
        <initializer>itt_frame_begin(frame, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="37" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="37" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a2984b8674c64fc0f1550adcfc98005c2" prot="public" static="no">
        <name>HPX_ITT_FRAME_END</name>
        <param><defname>frame</defname></param>
        <param><defname>id</defname></param>
        <initializer>itt_frame_end(frame, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="38" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aac318f06aeb739e68ddcb7eafa2965a6" prot="public" static="no">
        <name>HPX_ITT_MARK_CREATE</name>
        <param><defname>mark</defname></param>
        <param><defname>name</defname></param>
        <initializer>mark = itt_mark_create(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="40" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="40" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a50c64c5532ad5d587876de873097cf8a" prot="public" static="no">
        <name>HPX_ITT_MARK_OFF</name>
        <param><defname>mark</defname></param>
        <initializer>itt_mark_off(mark)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="41" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="41" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a112f7512d81d4b7584e3503a416d69d6" prot="public" static="no">
        <name>HPX_ITT_MARK</name>
        <param><defname>mark</defname></param>
        <param><defname>parameter</defname></param>
        <initializer>itt_mark(mark, parameter)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="42" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="42" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a11f925783a39c4ad0eba84baac50ebcd" prot="public" static="no">
        <name>HPX_ITT_THREAD_SET_NAME</name>
        <param><defname>name</defname></param>
        <initializer>itt_thread_set_name(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="44" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1afd5cbef29e9625bd551c41484d30512d" prot="public" static="no">
        <name>HPX_ITT_THREAD_IGNORE</name>
        <param></param>
        <initializer>itt_thread_ignore()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="45" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1ae2f29fc17f1a73839ddc916f00e3527c" prot="public" static="no">
        <name>HPX_ITT_TASK_BEGIN</name>
        <param><defname>domain</defname></param>
        <param><defname>name</defname></param>
        <initializer>itt_task_begin(domain, name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="47" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aaa49d61a3cdeaefd998616de9fdde5e9" prot="public" static="no">
        <name>HPX_ITT_TASK_BEGIN_ID</name>
        <param><defname>domain</defname></param>
        <param><defname>id</defname></param>
        <param><defname>name</defname></param>
        <initializer>itt_task_begin(domain, id, name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="48" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1abc70ed67cd9cef8e4769da25fb3ac744" prot="public" static="no">
        <name>HPX_ITT_TASK_END</name>
        <param><defname>domain</defname></param>
        <initializer>itt_task_end(domain)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="49" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aeed01cd969a7571838db7fd58166a907" prot="public" static="no">
        <name>HPX_ITT_DOMAIN_CREATE</name>
        <param><defname>name</defname></param>
        <initializer>itt_domain_create(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="51" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a0700404196336cb3240606dc96a13a7c" prot="public" static="no">
        <name>HPX_ITT_STRING_HANDLE_CREATE</name>
        <param><defname>name</defname></param>
        <initializer>itt_string_handle_create(name)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="52" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a8ccf2542aaf63ae20ff93300b537495e" prot="public" static="no">
        <name>HPX_ITT_MAKE_ID</name>
        <param><defname>addr</defname></param>
        <param><defname>extra</defname></param>
        <initializer>itt_make_id(addr, extra)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="54" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a5a955a4335cedf019088b1110de09843" prot="public" static="no">
        <name>HPX_ITT_ID_CREATE</name>
        <param><defname>domain</defname></param>
        <param><defname>id</defname></param>
        <initializer>itt_id_create(domain, id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="55" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a598c7a328e7ad8930e1b5f9b12ad0f16" prot="public" static="no">
        <name>HPX_ITT_ID_DESTROY</name>
        <param><defname>id</defname></param>
        <initializer>itt_id_destroy(id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="56" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="56" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a1e5e311c51e73cf414413d32125cd7b5" prot="public" static="no">
        <name>HPX_ITT_HEAP_FUNCTION_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>domain</defname></param>
        <initializer>itt_heap_function_create(name, domain)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="58" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1af561042632f2294d99f95001183ee7fe" prot="public" static="no">
        <name>HPX_ITT_HEAP_ALLOCATE_BEGIN</name>
        <param><defname>f</defname></param>
        <param><defname>size</defname></param>
        <param><defname>initialized</defname></param>
        <initializer>itt_heap_allocate_begin(f, size, initialized)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="60" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a4346b2152e98b338de3a74cd65c75221" prot="public" static="no">
        <name>HPX_ITT_HEAP_ALLOCATE_END</name>
        <param><defname>f</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>size</defname></param>
        <param><defname>initialized</defname></param>
        <initializer>itt_heap_allocate_end(f, addr, size, initialized)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="62" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a956d02297a5f7abbe68e98920ecac7b9" prot="public" static="no">
        <name>HPX_ITT_HEAP_FREE_BEGIN</name>
        <param><defname>f</defname></param>
        <param><defname>addr</defname></param>
        <initializer>itt_heap_free_begin(f, addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="64" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1ad5d0f7fc3db27c894402dcf242a541d8" prot="public" static="no">
        <name>HPX_ITT_HEAP_FREE_END</name>
        <param><defname>f</defname></param>
        <param><defname>addr</defname></param>
        <initializer>itt_heap_free_end(f, addr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="65" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a12dd6374337803b50b7293a8bfbc3765" prot="public" static="no">
        <name>HPX_ITT_HEAP_REALLOCATE_BEGIN</name>
        <param><defname>f</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>new_size</defname></param>
        <param><defname>initialized</defname></param>
        <initializer>itt_heap_reallocate_begin(f, addr, new_size, initialized)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="66" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="66" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1af1bac00dc7cf0c7858d1689bacb5f9bf" prot="public" static="no">
        <name>HPX_ITT_HEAP_REALLOCATE_END</name>
        <param><defname>f</defname></param>
        <param><defname>addr</defname></param>
        <param><defname>new_addr</defname></param>
        <param><defname>new_size</defname></param>
        <param><defname>initialized</defname></param>
        <initializer>itt_heap_reallocate_end(f, addr, new_addr, new_size, initialized)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="68" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="68" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aad6709e9d8d390e6f364fbcba3630a3a" prot="public" static="no">
        <name>HPX_ITT_HEAP_INTERNAL_ACCESS_BEGIN</name>
        <param></param>
        <initializer>itt_heap_internal_access_begin()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="70" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aca37892a56ce1805596eeb28a778d005" prot="public" static="no">
        <name>HPX_ITT_HEAP_INTERNAL_ACCESS_END</name>
        <param></param>
        <initializer>itt_heap_internal_access_end()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="71" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="71" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a99b742a5060b0073cccb31f4c34036e4" prot="public" static="no">
        <name>HPX_ITT_COUNTER_CREATE</name>
        <param><defname>name</defname></param>
        <param><defname>domain</defname></param>
        <initializer>itt_counter_create(name, domain)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="73" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="73" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a86d4436bde2bfcc562e4da3dc4b72387" prot="public" static="no">
        <name>HPX_ITT_COUNTER_CREATE_TYPED</name>
        <param><defname>name</defname></param>
        <param><defname>domain</defname></param>
        <param><defname>type</defname></param>
        <initializer>itt_counter_create_typed(name, domain, type)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="75" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="75" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a9a075baca4aa07bb223c0f6e3bdff0c5" prot="public" static="no">
        <name>HPX_ITT_COUNTER_SET_VALUE</name>
        <param><defname>id</defname></param>
        <param><defname>value_ptr</defname></param>
        <initializer>itt_counter_set_value(id, value_ptr)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="77" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="77" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1aeaf76aa0b83b8342b9e78acfc4f2eba4" prot="public" static="no">
        <name>HPX_ITT_COUNTER_DESTROY</name>
        <param><defname>id</defname></param>
        <initializer>itt_counter_destroy(id)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="79" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="79" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="hpx_2concurrency_2itt__notify_8hpp_1a58c0d1caf4f1ba5604d5a50c5230cc3b" prot="public" static="no">
        <name>HPX_ITT_METADATA_ADD</name>
        <param><defname>domain</defname></param>
        <param><defname>id</defname></param>
        <param><defname>key</defname></param>
        <param><defname>data</defname></param>
        <initializer>itt_metadata_add(domain, id, key, data)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="81" column="9" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="81" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpx_2concurrency_2itt__notify_8hpp_1a3907115617c96d09c646554d1a386bdf" prot="public" static="no">
        <type>void *</type>
        <definition>typedef void* __itt_heap_function</definition>
        <argsstring></argsstring>
        <name>__itt_heap_function</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="19" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="18" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a0731a9d25222b10208abda34db9ca1c9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_create</definition>
        <argsstring>(void *, const char *, const char *)</argsstring>
        <name>itt_sync_create</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="560" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="560" bodyend="560"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a1bdf496cb8ab71c3f41291742deb64b5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_rename</definition>
        <argsstring>(void *, const char *)</argsstring>
        <name>itt_sync_rename</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="561" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="561" bodyend="561"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a2c00a68c968bc17c67862598e57169ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_prepare</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_prepare</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="562" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="562" bodyend="562"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1af9dd48506d049ca0a415e80c80736b7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_acquired</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_acquired</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="563" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="563" bodyend="563"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1ab78c29f6f5404bacd2cc59deed5fcb10" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_cancel</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_cancel</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="564" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="564" bodyend="564"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a05f9f28187eb1dffdc34099c8326aa24" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_releasing</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_releasing</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="565" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="565" bodyend="565"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1aaa3d0bea0e4821afdb4f14f3d5068db8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_released</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_released</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="566" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="566" bodyend="566"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a6646276e1ab6afa49d114baceb564a96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_sync_destroy</definition>
        <argsstring>(void *)</argsstring>
        <name>itt_sync_destroy</name>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="567" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="567" bodyend="567"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a5898329e4c924a6f653ee3b905dd7c2f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_caller *</type>
        <definition>___itt_caller* itt_stack_create</definition>
        <argsstring>()</argsstring>
        <name>itt_stack_create</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="569" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="569" bodyend="572"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1abdf0bbbe2bdd32e941295444fdcf35d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_stack_enter</definition>
        <argsstring>(___itt_caller *)</argsstring>
        <name>itt_stack_enter</name>
        <param>
          <type>___itt_caller *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="573" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="573" bodyend="573"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a97c6e4a7d1f0171c9b662a20d1b05b9c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_stack_leave</definition>
        <argsstring>(___itt_caller *)</argsstring>
        <name>itt_stack_leave</name>
        <param>
          <type>___itt_caller *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="574" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="574" bodyend="574"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a5b79d9b6502e99f16f947a8f08386d40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_stack_destroy</definition>
        <argsstring>(___itt_caller *)</argsstring>
        <name>itt_stack_destroy</name>
        <param>
          <type>___itt_caller *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="575" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="575" bodyend="575"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1aef513096179d3f1e18eb5364ce427570" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_frame_begin</definition>
        <argsstring>(___itt_domain const *, ___itt_id *)</argsstring>
        <name>itt_frame_begin</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="577" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="577" bodyend="577"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a25e92fb8c9bec4219ecbe59b1d5a2f4c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_frame_end</definition>
        <argsstring>(___itt_domain const *, ___itt_id *)</argsstring>
        <name>itt_frame_end</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="578" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="578" bodyend="578"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a838b60a58783d8493947644777a5b6b6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int itt_mark_create</definition>
        <argsstring>(char const *)</argsstring>
        <name>itt_mark_create</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="580" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="580" bodyend="583"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1ac7d9ad05a80aa289a9ac9b3d93cbd745" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_mark_off</definition>
        <argsstring>(int)</argsstring>
        <name>itt_mark_off</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="584" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="584" bodyend="584"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a0b4c0cfb8b42b06990536c2f56147df5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_mark</definition>
        <argsstring>(int, char const *)</argsstring>
        <name>itt_mark</name>
        <param>
          <type>int</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="585" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="585" bodyend="585"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1afff976c0a3e652499d1165e559af7e8a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_thread_set_name</definition>
        <argsstring>(char const *)</argsstring>
        <name>itt_thread_set_name</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="587" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="587" bodyend="587"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1af4be886bd5c58d1e8124343fe1f2bd18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_thread_ignore</definition>
        <argsstring>()</argsstring>
        <name>itt_thread_ignore</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="588" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="588" bodyend="588"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1af5eab67492c6a098e008b536c348c9cd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_task_begin</definition>
        <argsstring>(___itt_domain const *, ___itt_string_handle *)</argsstring>
        <name>itt_task_begin</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="590" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="590" bodyend="590"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1afdc5fb028993ec41081d0dbbd0a641db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_task_begin</definition>
        <argsstring>(___itt_domain const *, ___itt_id *, ___itt_string_handle *)</argsstring>
        <name>itt_task_begin</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="591" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="591" bodyend="594"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1adafc062f1f52eb51a8b2743af1db1423" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_task_end</definition>
        <argsstring>(___itt_domain const *)</argsstring>
        <name>itt_task_end</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="595" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="595" bodyend="595"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a99c890f8401f3569626f1e58ccbb25ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_domain *</type>
        <definition>___itt_domain* itt_domain_create</definition>
        <argsstring>(char const *)</argsstring>
        <name>itt_domain_create</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="597" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="597" bodyend="600"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a5a9afbc6a859926c4d564e2bc54792fc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_string_handle *</type>
        <definition>___itt_string_handle* itt_string_handle_create</definition>
        <argsstring>(char const *)</argsstring>
        <name>itt_string_handle_create</name>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="601" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="601" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a8028a5289d16e291fb8c3250ec72a8ad" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_id *</type>
        <definition>___itt_id* itt_make_id</definition>
        <argsstring>(void *, unsigned long)</argsstring>
        <name>itt_make_id</name>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>unsigned</type>
          <declname>long</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="606" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="606" bodyend="609"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a2da85f3ab7dc1ff1dbb430f26c00fa67" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_id_create</definition>
        <argsstring>(___itt_domain const *, ___itt_id *)</argsstring>
        <name>itt_id_create</name>
        <param>
          <type>___itt_domain const *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="610" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="610" bodyend="610"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a8e48ba10739c92e8438cbca1ce2cf035" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_id_destroy</definition>
        <argsstring>(___itt_id *)</argsstring>
        <name>itt_id_destroy</name>
        <param>
          <type>___itt_id *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="611" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="611" bodyend="611"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a4127d865bf8be0ccb53ef6aa7351f760" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>__itt_heap_function</type>
        <definition>__itt_heap_function itt_heap_function_create</definition>
        <argsstring>(const char *, const char *)</argsstring>
        <name>itt_heap_function_create</name>
        <param>
          <type>const char *</type>
        </param>
        <param>
          <type>const char *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="613" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="613" bodyend="616"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a928684a8772b4bbe53dc605fe7f7c299" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_allocate_begin</definition>
        <argsstring>(__itt_heap_function, std::size_t, int)</argsstring>
        <name>itt_heap_allocate_begin</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="617" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="617" bodyend="617"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a8d910243e18774243dc6812d7418988e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_allocate_end</definition>
        <argsstring>(__itt_heap_function, void **, std::size_t, int)</argsstring>
        <name>itt_heap_allocate_end</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="618" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="618" bodyend="620"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a202a9cff4b338fe274077f3a98917302" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_free_begin</definition>
        <argsstring>(__itt_heap_function, void *)</argsstring>
        <name>itt_heap_free_begin</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="621" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="621" bodyend="621"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a36c630232d6b72d9cecbe9bd5540009a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_free_end</definition>
        <argsstring>(__itt_heap_function, void *)</argsstring>
        <name>itt_heap_free_end</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="622" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="622" bodyend="622"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1aaeafff292fb8f1cd1c1a414a9ff9bd85" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_reallocate_begin</definition>
        <argsstring>(__itt_heap_function, void *, std::size_t, int)</argsstring>
        <name>itt_heap_reallocate_begin</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="623" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="623" bodyend="626"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a6ba757aeea92caf8dbcde1d48cbbbd0f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_reallocate_end</definition>
        <argsstring>(__itt_heap_function, void *, void **, std::size_t, int)</argsstring>
        <name>itt_heap_reallocate_end</name>
        <param>
          <type>__itt_heap_function</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <param>
          <type>void **</type>
        </param>
        <param>
          <type>std::size_t</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="627" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="627" bodyend="630"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a85eecf4d36d8c227babc084f325188e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_internal_access_begin</definition>
        <argsstring>()</argsstring>
        <name>itt_heap_internal_access_begin</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="631" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="631" bodyend="631"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a814f2a6a7cb5ed746531db595625fe1d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_heap_internal_access_end</definition>
        <argsstring>()</argsstring>
        <name>itt_heap_internal_access_end</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="632" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="632" bodyend="632"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1acab1a397eef91d9b4996cfff902a9ccf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_counter *</type>
        <definition>___itt_counter* itt_counter_create</definition>
        <argsstring>(char const *, char const *)</argsstring>
        <name>itt_counter_create</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="634" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="634" bodyend="637"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1af02e908e2464a61bf96f9c0ae86d9258" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>___itt_counter *</type>
        <definition>___itt_counter* itt_counter_create_typed</definition>
        <argsstring>(char const *, char const *, int)</argsstring>
        <name>itt_counter_create_typed</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="638" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="638" bodyend="641"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a7efc2232d15afa02d726040489f0ca8f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_counter_destroy</definition>
        <argsstring>(___itt_counter *)</argsstring>
        <name>itt_counter_destroy</name>
        <param>
          <type>___itt_counter *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="642" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="642" bodyend="642"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1ac7b5f4dbd376ff2d41b0ba578530efb8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_counter_set_value</definition>
        <argsstring>(___itt_counter *, void *)</argsstring>
        <name>itt_counter_set_value</name>
        <param>
          <type>___itt_counter *</type>
        </param>
        <param>
          <type>void *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="643" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="643" bodyend="643"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1aa1a4e1235a830c6c2be2dab56f6724ab" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int itt_event_create</definition>
        <argsstring>(char const *, int)</argsstring>
        <name>itt_event_create</name>
        <param>
          <type>char const *</type>
        </param>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="645" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="645" bodyend="648"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a3464250dea11c4430602fd0833e763b7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int itt_event_start</definition>
        <argsstring>(int)</argsstring>
        <name>itt_event_start</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="649" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="649" bodyend="652"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1aacab9fce0b333289d281ee181de660fe" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>int</type>
        <definition>int itt_event_end</definition>
        <argsstring>(int)</argsstring>
        <name>itt_event_end</name>
        <param>
          <type>int</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="653" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="653" bodyend="656"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a73ef7c3593970fb01745c43105e85a18" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_metadata_add</definition>
        <argsstring>(___itt_domain *, ___itt_id *, ___itt_string_handle *, std::uint64_t const &amp;)</argsstring>
        <name>itt_metadata_add</name>
        <param>
          <type>___itt_domain *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <param>
          <type>std::uint64_t const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="658" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="658" bodyend="661"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a8e6394dfd903014add4b698f62e83a32" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_metadata_add</definition>
        <argsstring>(___itt_domain *, ___itt_id *, ___itt_string_handle *, double const &amp;)</argsstring>
        <name>itt_metadata_add</name>
        <param>
          <type>___itt_domain *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <param>
          <type>double const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="662" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="662" bodyend="665"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a158aa4f75bac044d7ea72a9987004c44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_metadata_add</definition>
        <argsstring>(___itt_domain *, ___itt_id *, ___itt_string_handle *, char const *)</argsstring>
        <name>itt_metadata_add</name>
        <param>
          <type>___itt_domain *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <param>
          <type>char const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="666" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="666" bodyend="669"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2itt__notify_8hpp_1a6d89e084cdb97002896baed5c5f758ff" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void itt_metadata_add</definition>
        <argsstring>(___itt_domain *, ___itt_id *, ___itt_string_handle *, void const *)</argsstring>
        <name>itt_metadata_add</name>
        <param>
          <type>___itt_domain *</type>
        </param>
        <param>
          <type>___itt_id *</type>
        </param>
        <param>
          <type>___itt_string_handle *</type>
        </param>
        <param>
          <type>void const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" line="670" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/itt_notify.hpp" bodystart="670" bodyend="673"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2007-2017<sp/>Hartmut<sp/>Kaiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_UTIL_ITT_NOTIFY_AUG_17_2010_1237PM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_UTIL_ITT_NOTIFY_AUG_17_2010_1237PM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstddef&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstdint&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;cstring&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_caller;</highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_string_handle;</highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_domain;</highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_id;</highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>__itt_heap_function;</highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_counter;</highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_CREATE(obj,<sp/>type,<sp/>name)<sp/>itt_sync_create(obj,<sp/>type,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_RENAME(obj,<sp/>name)<sp/>itt_sync_rename(obj,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_PREPARE(obj)<sp/>itt_sync_prepare(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_CANCEL(obj)<sp/>itt_sync_cancel(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_ACQUIRED(obj)<sp/>itt_sync_acquired(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_RELEASING(obj)<sp/>itt_sync_releasing(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_RELEASED(obj)<sp/>itt_sync_released(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_SYNC_DESTROY(obj)<sp/>itt_sync_destroy(obj)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_STACK_CREATE(ctx)<sp/>ctx<sp/>=<sp/>itt_stack_create()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_STACK_CALLEE_ENTER(ctx)<sp/>itt_stack_enter(ctx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_STACK_CALLEE_LEAVE(ctx)<sp/>itt_stack_leave(ctx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_STACK_DESTROY(ctx)<sp/>itt_stack_destroy(ctx)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_FRAME_BEGIN(frame,<sp/>id)<sp/>itt_frame_begin(frame,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_FRAME_END(frame,<sp/>id)<sp/>itt_frame_end(frame,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_MARK_CREATE(mark,<sp/>name)<sp/>mark<sp/>=<sp/>itt_mark_create(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_MARK_OFF(mark)<sp/>itt_mark_off(mark)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_MARK(mark,<sp/>parameter)<sp/>itt_mark(mark,<sp/>parameter)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_THREAD_SET_NAME(name)<sp/>itt_thread_set_name(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_THREAD_IGNORE()<sp/>itt_thread_ignore()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="46"><highlight class="normal"></highlight></codeline>
<codeline lineno="47"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_TASK_BEGIN(domain,<sp/>name)<sp/>itt_task_begin(domain,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_TASK_BEGIN_ID(domain,<sp/>id,<sp/>name)<sp/>itt_task_begin(domain,<sp/>id,<sp/>name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="49"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_TASK_END(domain)<sp/>itt_task_end(domain)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="50"><highlight class="normal"></highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_DOMAIN_CREATE(name)<sp/>itt_domain_create(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_STRING_HANDLE_CREATE(name)<sp/>itt_string_handle_create(name)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_MAKE_ID(addr,<sp/>extra)<sp/>itt_make_id(addr,<sp/>extra)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_ID_CREATE(domain,<sp/>id)<sp/>itt_id_create(domain,<sp/>id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="56"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_ID_DESTROY(id)<sp/>itt_id_destroy(id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="57"><highlight class="normal"></highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_FUNCTION_CREATE(name,<sp/>domain)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="59"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_heap_function_create(name,<sp/>domain)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_ALLOCATE_BEGIN(f,<sp/>size,<sp/>initialized)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="61"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_heap_allocate_begin(f,<sp/>size,<sp/>initialized)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="62"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_ALLOCATE_END(f,<sp/>addr,<sp/>size,<sp/>initialized)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_heap_allocate_end(f,<sp/>addr,<sp/>size,<sp/>initialized)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="64"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_FREE_BEGIN(f,<sp/>addr)<sp/>itt_heap_free_begin(f,<sp/>addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="65"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_FREE_END(f,<sp/>addr)<sp/>itt_heap_free_end(f,<sp/>addr)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="66"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_REALLOCATE_BEGIN(f,<sp/>addr,<sp/>new_size,<sp/>initialized)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="67"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_heap_reallocate_begin(f,<sp/>addr,<sp/>new_size,<sp/>initialized)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="68"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_REALLOCATE_END(f,<sp/>addr,<sp/>new_addr,<sp/>new_size,<sp/>initialized)<sp/><sp/>\</highlight></codeline>
<codeline lineno="69"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_heap_reallocate_end(f,<sp/>addr,<sp/>new_addr,<sp/>new_size,<sp/>initialized)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="70"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_INTERNAL_ACCESS_BEGIN()<sp/>itt_heap_internal_access_begin()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_HEAP_INTERNAL_ACCESS_END()<sp/>itt_heap_internal_access_end()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_COUNTER_CREATE(name,<sp/>domain)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="74"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_counter_create(name,<sp/>domain)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_COUNTER_CREATE_TYPED(name,<sp/>domain,<sp/>type)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="76"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_counter_create_typed(name,<sp/>domain,<sp/>type)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="77"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_COUNTER_SET_VALUE(id,<sp/>value_ptr)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="78"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_counter_set_value(id,<sp/>value_ptr)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_COUNTER_DESTROY(id)<sp/>itt_counter_destroy(id)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_ITT_METADATA_ADD(domain,<sp/>id,<sp/>key,<sp/>data)<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>\</highlight></codeline>
<codeline lineno="82"><highlight class="preprocessor"><sp/><sp/><sp/><sp/>itt_metadata_add(domain,<sp/>id,<sp/>key,<sp/>data)<sp/></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="comment">//<sp/>decide<sp/>whether<sp/>to<sp/>use<sp/>the<sp/>ITT<sp/>notify<sp/>API<sp/>if<sp/>it&apos;s<sp/>available</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="86"><highlight class="normal"></highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>HPX_HAVE_ITTNOTIFY<sp/>!=<sp/>0</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>use_ittnotify_api;</highlight></codeline>
<codeline lineno="89"><highlight class="normal"></highlight></codeline>
<codeline lineno="91"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_create(</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>objtype,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>objname);</highlight></codeline>
<codeline lineno="93"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_rename(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*<sp/>name);</highlight></codeline>
<codeline lineno="94"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_prepare(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="95"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_acquired(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="96"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_cancel(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="97"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_releasing(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="98"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_released(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="99"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_destroy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr);</highlight></codeline>
<codeline lineno="100"><highlight class="normal"></highlight></codeline>
<codeline lineno="101"><highlight class="normal">HPX_EXPORT<sp/>___itt_caller*<sp/>itt_stack_create();</highlight></codeline>
<codeline lineno="102"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_enter(___itt_caller*<sp/>ctx);</highlight></codeline>
<codeline lineno="103"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_leave(___itt_caller*<sp/>ctx);</highlight></codeline>
<codeline lineno="104"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_destroy(___itt_caller*<sp/>ctx);</highlight></codeline>
<codeline lineno="105"><highlight class="normal"></highlight></codeline>
<codeline lineno="106"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_frame_begin(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>frame,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="107"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_frame_end(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>frame,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"></highlight></codeline>
<codeline lineno="109"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_mark_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="110"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_mark_off(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mark);</highlight></codeline>
<codeline lineno="111"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_mark(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mark,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="112"><highlight class="normal"></highlight></codeline>
<codeline lineno="113"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_thread_set_name(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="114"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_thread_ignore();</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_begin(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_string_handle*);</highlight></codeline>
<codeline lineno="117"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_begin(</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*,<sp/>___itt_string_handle*);</highlight></codeline>
<codeline lineno="119"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_end(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="120"><highlight class="normal"></highlight></codeline>
<codeline lineno="121"><highlight class="normal">HPX_EXPORT<sp/>___itt_domain*<sp/>itt_domain_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="122"><highlight class="normal">HPX_EXPORT<sp/>___itt_string_handle*<sp/>itt_string_handle_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal">HPX_EXPORT<sp/>___itt_id*<sp/>itt_make_id(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>std::size_t);</highlight></codeline>
<codeline lineno="125"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_id_create(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="126"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_id_destroy(___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="128"><highlight class="normal">HPX_EXPORT<sp/>__itt_heap_function<sp/>itt_heap_function_create(</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="130"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_allocate_begin(__itt_heap_function,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="131"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_allocate_end(</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/>__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="133"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_free_begin(__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="134"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_free_end(__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="135"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_reallocate_begin(</highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/>__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="137"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_reallocate_end(</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/>__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_internal_access_begin();</highlight></codeline>
<codeline lineno="140"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_internal_access_end();</highlight></codeline>
<codeline lineno="141"><highlight class="normal"></highlight></codeline>
<codeline lineno="142"><highlight class="normal">HPX_EXPORT<sp/>___itt_counter*<sp/>itt_counter_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="143"><highlight class="normal">HPX_EXPORT<sp/>___itt_counter*<sp/>itt_counter_create_typed(</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="145"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_counter_destroy(___itt_counter*);</highlight></codeline>
<codeline lineno="146"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_counter_set_value(___itt_counter*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="147"><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>namelen);</highlight></codeline>
<codeline lineno="149"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_start(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evnt);</highlight></codeline>
<codeline lineno="150"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_end(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>evnt);</highlight></codeline>
<codeline lineno="151"><highlight class="normal"></highlight></codeline>
<codeline lineno="152"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(___itt_domain*<sp/>domain,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_string_handle*<sp/>key,<sp/>std::uint64_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data);</highlight></codeline>
<codeline lineno="154"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(___itt_domain*<sp/>domain,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_string_handle*<sp/>key,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>data);</highlight></codeline>
<codeline lineno="156"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(___itt_domain*<sp/>domain,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_string_handle*<sp/>key,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="158"><highlight class="normal">HPX_EXPORT<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(___itt_domain*<sp/>domain,<sp/>___itt_id*<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_string_handle*<sp/>key,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>data);</highlight></codeline>
<codeline lineno="160"><highlight class="normal"></highlight></codeline>
<codeline lineno="162"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">thread_description;</highlight></codeline>
<codeline lineno="164"><highlight class="normal">}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"></highlight></codeline>
<codeline lineno="166"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">itt<sp/>{</highlight></codeline>
<codeline lineno="167"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">stack_context</highlight></codeline>
<codeline lineno="168"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context()</highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>itt_context_(0)</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_STACK_CREATE(itt_context_);</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~stack_context()</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(itt_context_)</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_STACK_DESTROY(itt_context_);</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="179"><highlight class="normal"></highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context(stack_context<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context(stack_context&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>itt_context_(rhs.itt_context_)</highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.itt_context_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="186"><highlight class="normal"></highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context&amp;<sp/>operator=(stack_context<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context&amp;<sp/>operator=(stack_context&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itt_context_<sp/>=<sp/>rhs.itt_context_;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.itt_context_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">___itt_caller*<sp/>itt_context_;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="200"><highlight class="normal"></highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">caller_context</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>caller_context(stack_context&amp;<sp/>ctx)</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>ctx_(ctx)</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_STACK_CALLEE_ENTER(ctx_.itt_context_);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~caller_context()</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_STACK_CALLEE_LEAVE(ctx_.itt_context_);</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="212"><highlight class="normal"></highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>stack_context&amp;<sp/>ctx_;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="215"><highlight class="normal"></highlight></codeline>
<codeline lineno="217"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">domain</highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_NON_COPYABLE(domain);</highlight></codeline>
<codeline lineno="220"><highlight class="normal"></highlight></codeline>
<codeline lineno="221"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>domain(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*);</highlight></codeline>
<codeline lineno="222"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>domain();</highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight></codeline>
<codeline lineno="224"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___itt_domain*<sp/>domain_;</highlight></codeline>
<codeline lineno="225"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="226"><highlight class="normal"></highlight></codeline>
<codeline lineno="227"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">thread_domain<sp/>:<sp/>domain</highlight></codeline>
<codeline lineno="228"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="229"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_NON_COPYABLE(thread_domain);</highlight></codeline>
<codeline lineno="230"><highlight class="normal"></highlight></codeline>
<codeline lineno="231"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>thread_domain();</highlight></codeline>
<codeline lineno="232"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="233"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">id</highlight></codeline>
<codeline lineno="235"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="236"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id(domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>domain,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/>extra<sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="237"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="238"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_<sp/>=<sp/>HPX_ITT_MAKE_ID(addr,<sp/>extra);</highlight></codeline>
<codeline lineno="239"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_ID_CREATE(domain.domain_,<sp/>id_);</highlight></codeline>
<codeline lineno="240"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="241"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~id()</highlight></codeline>
<codeline lineno="242"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="243"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_ID_DESTROY(id_);</highlight></codeline>
<codeline lineno="244"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="245"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="247"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="248"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>id_(rhs.id_)</highlight></codeline>
<codeline lineno="249"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="250"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.id_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="251"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="252"><highlight class="normal"></highlight></codeline>
<codeline lineno="253"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&amp;<sp/>operator=(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="254"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&amp;<sp/>operator=(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="255"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="256"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="257"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="258"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_<sp/>=<sp/>rhs.id_;</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.id_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="260"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="261"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="262"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="263"><highlight class="normal"></highlight></codeline>
<codeline lineno="264"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___itt_id*<sp/>id_;</highlight></codeline>
<codeline lineno="265"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="266"><highlight class="normal"></highlight></codeline>
<codeline lineno="268"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">frame_context</highlight></codeline>
<codeline lineno="269"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="270"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_context(domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>domain,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">*<sp/>ident<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="271"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>domain_(domain)</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>ident_(ident)</highlight></codeline>
<codeline lineno="273"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="274"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_FRAME_BEGIN(domain_.domain_,<sp/>ident_<sp/>?<sp/>ident_-&gt;id_<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="275"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="276"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~frame_context()</highlight></codeline>
<codeline lineno="277"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="278"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_FRAME_END(domain_.domain_,<sp/>ident_<sp/>?<sp/>ident_-&gt;id_<sp/>:<sp/>0);</highlight></codeline>
<codeline lineno="279"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="280"><highlight class="normal"></highlight></codeline>
<codeline lineno="281"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>domain_;</highlight></codeline>
<codeline lineno="282"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">*<sp/>ident_;</highlight></codeline>
<codeline lineno="283"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="284"><highlight class="normal"></highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">undo_frame_context</highlight></codeline>
<codeline lineno="286"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="287"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undo_frame_context(frame_context&amp;<sp/>frame)</highlight></codeline>
<codeline lineno="288"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>frame_(frame)</highlight></codeline>
<codeline lineno="289"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="290"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_FRAME_END(frame_.domain_.domain_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="291"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="292"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~undo_frame_context()</highlight></codeline>
<codeline lineno="293"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="294"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_FRAME_BEGIN(frame_.domain_.domain_,<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="295"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="296"><highlight class="normal"></highlight></codeline>
<codeline lineno="297"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>frame_context&amp;<sp/>frame_;</highlight></codeline>
<codeline lineno="298"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="299"><highlight class="normal"></highlight></codeline>
<codeline lineno="301"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mark_context</highlight></codeline>
<codeline lineno="302"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="303"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_context(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="304"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>itt_mark_(0)</highlight></codeline>
<codeline lineno="305"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>name_(name)</highlight></codeline>
<codeline lineno="306"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="307"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_MARK_CREATE(itt_mark_,<sp/>name);</highlight></codeline>
<codeline lineno="308"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="309"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~mark_context()</highlight></codeline>
<codeline lineno="310"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="311"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_MARK_OFF(itt_mark_);</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="313"><highlight class="normal"></highlight></codeline>
<codeline lineno="314"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_mark_;</highlight></codeline>
<codeline lineno="315"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name_;</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="317"><highlight class="normal"></highlight></codeline>
<codeline lineno="318"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">undo_mark_context</highlight></codeline>
<codeline lineno="319"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="320"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>undo_mark_context(mark_context&amp;<sp/>mark)</highlight></codeline>
<codeline lineno="321"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>mark_(mark)</highlight></codeline>
<codeline lineno="322"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="323"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_MARK_OFF(mark_.itt_mark_);</highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="325"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~undo_mark_context()</highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="327"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_MARK_CREATE(mark_.itt_mark_,<sp/>mark_.name_);</highlight></codeline>
<codeline lineno="328"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="329"><highlight class="normal"></highlight></codeline>
<codeline lineno="330"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_context&amp;<sp/>mark_;</highlight></codeline>
<codeline lineno="331"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="332"><highlight class="normal"></highlight></codeline>
<codeline lineno="334"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">string_handle</highlight></codeline>
<codeline lineno="335"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="336"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_handle()<sp/>noexcept</highlight></codeline>
<codeline lineno="337"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>handle_(0)</highlight></codeline>
<codeline lineno="338"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="339"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="340"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_handle(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>s)</highlight></codeline>
<codeline lineno="341"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>handle_(s<sp/>==<sp/>nullptr<sp/>?<sp/>0<sp/>:<sp/>HPX_ITT_STRING_HANDLE_CREATE(s))</highlight></codeline>
<codeline lineno="342"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="343"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="344"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_handle(___itt_string_handle*<sp/>h)<sp/>noexcept</highlight></codeline>
<codeline lineno="345"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>handle_(h)</highlight></codeline>
<codeline lineno="346"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="347"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="348"><highlight class="normal"></highlight></codeline>
<codeline lineno="349"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_handle&amp;<sp/>operator=(___itt_string_handle*<sp/>h)<sp/>noexcept</highlight></codeline>
<codeline lineno="350"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="351"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>handle_<sp/>=<sp/>h;</highlight></codeline>
<codeline lineno="352"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="353"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="355"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">explicit</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal"><sp/>bool()<sp/>const<sp/>noexcept</highlight></codeline>
<codeline lineno="356"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="357"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>handle_<sp/>!=<sp/>0;</highlight></codeline>
<codeline lineno="358"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="359"><highlight class="normal"></highlight></codeline>
<codeline lineno="360"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___itt_string_handle*<sp/>handle_;</highlight></codeline>
<codeline lineno="361"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="362"><highlight class="normal"></highlight></codeline>
<codeline lineno="364"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">task</highlight></codeline>
<codeline lineno="365"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="366"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>task(</highlight></codeline>
<codeline lineno="367"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>std::uint64_t<sp/>metadata);</highlight></codeline>
<codeline lineno="368"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>task(domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;);</highlight></codeline>
<codeline lineno="369"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_EXPORT<sp/>~task();</highlight></codeline>
<codeline lineno="370"><highlight class="normal"></highlight></codeline>
<codeline lineno="371"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_metadata(string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>std::uint64_t<sp/>val)</highlight></codeline>
<codeline lineno="372"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="373"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_METADATA_ADD(domain_.domain_,<sp/>id_,<sp/>name.handle_,<sp/>val);</highlight></codeline>
<codeline lineno="374"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="375"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_metadata(string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/>val)</highlight></codeline>
<codeline lineno="376"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="377"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_METADATA_ADD(domain_.domain_,<sp/>id_,<sp/>name.handle_,<sp/>val);</highlight></codeline>
<codeline lineno="378"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="379"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_metadata(string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>val)</highlight></codeline>
<codeline lineno="380"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="381"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_METADATA_ADD(domain_.domain_,<sp/>id_,<sp/>name.handle_,<sp/>val);</highlight></codeline>
<codeline lineno="382"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="383"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="384"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>add_metadata(string_handle<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>name,<sp/>T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>val)</highlight></codeline>
<codeline lineno="385"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="386"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_METADATA_ADD(domain_.domain_,<sp/>id_,<sp/>name.handle_,</highlight></codeline>
<codeline lineno="387"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_cast&lt;void<sp/>const*&gt;(&amp;val));</highlight></codeline>
<codeline lineno="388"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="389"><highlight class="normal"></highlight></codeline>
<codeline lineno="390"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>domain_;</highlight></codeline>
<codeline lineno="391"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___itt_id*<sp/>id_;</highlight></codeline>
<codeline lineno="392"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>string_handle<sp/>sh_;</highlight></codeline>
<codeline lineno="393"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="394"><highlight class="normal"></highlight></codeline>
<codeline lineno="396"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">heap_function</highlight></codeline>
<codeline lineno="397"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="398"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>domain)</highlight></codeline>
<codeline lineno="399"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>heap_function_(HPX_ITT_HEAP_FUNCTION_CREATE(name,<sp/>domain))</highlight></codeline>
<codeline lineno="400"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="401"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="402"><highlight class="normal"></highlight></codeline>
<codeline lineno="403"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>__itt_heap_function<sp/>heap_function_;</highlight></codeline>
<codeline lineno="404"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="405"><highlight class="normal"></highlight></codeline>
<codeline lineno="406"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">heap_internal_access</highlight></codeline>
<codeline lineno="407"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="408"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_internal_access()</highlight></codeline>
<codeline lineno="409"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="410"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_INTERNAL_ACCESS_BEGIN();</highlight></codeline>
<codeline lineno="411"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="412"><highlight class="normal"></highlight></codeline>
<codeline lineno="413"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~heap_internal_access()</highlight></codeline>
<codeline lineno="414"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="415"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_INTERNAL_ACCESS_END();</highlight></codeline>
<codeline lineno="416"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="417"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="418"><highlight class="normal"></highlight></codeline>
<codeline lineno="419"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">heap_allocate</highlight></codeline>
<codeline lineno="420"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="421"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="422"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_allocate(</highlight></codeline>
<codeline lineno="423"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function&amp;<sp/>heap_function,<sp/>T**&amp;<sp/>addr,<sp/>std::size_t<sp/>size,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init)</highlight></codeline>
<codeline lineno="424"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>heap_function_(heap_function)</highlight></codeline>
<codeline lineno="425"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>addr_(reinterpret_cast&lt;void**&amp;&gt;(addr))</highlight></codeline>
<codeline lineno="426"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>size_(size)</highlight></codeline>
<codeline lineno="427"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>init_(init)</highlight></codeline>
<codeline lineno="428"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_ALLOCATE_BEGIN(</highlight></codeline>
<codeline lineno="430"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function_.heap_function_,<sp/>size_,<sp/>init_);</highlight></codeline>
<codeline lineno="431"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="432"><highlight class="normal"></highlight></codeline>
<codeline lineno="433"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~heap_allocate()</highlight></codeline>
<codeline lineno="434"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="435"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_ALLOCATE_END(</highlight></codeline>
<codeline lineno="436"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function_.heap_function_,<sp/>addr_,<sp/>size_,<sp/>init_);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="438"><highlight class="normal"></highlight></codeline>
<codeline lineno="439"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="440"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function&amp;<sp/>heap_function_;</highlight></codeline>
<codeline lineno="441"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**&amp;<sp/>addr_;</highlight></codeline>
<codeline lineno="442"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::size_t<sp/>size_;</highlight></codeline>
<codeline lineno="443"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>init_;</highlight></codeline>
<codeline lineno="444"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="445"><highlight class="normal"></highlight></codeline>
<codeline lineno="446"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">heap_free</highlight></codeline>
<codeline lineno="447"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="448"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_free(heap_function&amp;<sp/>heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr)</highlight></codeline>
<codeline lineno="449"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>heap_function_(heap_function)</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>addr_(addr)</highlight></codeline>
<codeline lineno="451"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="452"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_FREE_BEGIN(heap_function_.heap_function_,<sp/>addr_);</highlight></codeline>
<codeline lineno="453"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="454"><highlight class="normal"></highlight></codeline>
<codeline lineno="455"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~heap_free()</highlight></codeline>
<codeline lineno="456"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="457"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_HEAP_FREE_END(heap_function_.heap_function_,<sp/>addr_);</highlight></codeline>
<codeline lineno="458"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="459"><highlight class="normal"></highlight></codeline>
<codeline lineno="460"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="461"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>heap_function&amp;<sp/>heap_function_;</highlight></codeline>
<codeline lineno="462"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/>addr_;</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="466"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">counter</highlight></codeline>
<codeline lineno="467"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="468"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>domain)</highlight></codeline>
<codeline lineno="469"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>id_(HPX_ITT_COUNTER_CREATE(name,<sp/>domain))</highlight></codeline>
<codeline lineno="470"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="471"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="472"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>domain,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>type)</highlight></codeline>
<codeline lineno="473"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>id_(HPX_ITT_COUNTER_CREATE_TYPED(name,<sp/>domain,<sp/>type))</highlight></codeline>
<codeline lineno="474"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="475"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="476"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~counter()</highlight></codeline>
<codeline lineno="477"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="478"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_)</highlight></codeline>
<codeline lineno="479"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_COUNTER_DESTROY(id_);</highlight></codeline>
<codeline lineno="480"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="481"><highlight class="normal"></highlight></codeline>
<codeline lineno="482"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="483"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>set_value(T<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>value)</highlight></codeline>
<codeline lineno="484"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(id_)</highlight></codeline>
<codeline lineno="486"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="487"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_ITT_COUNTER_SET_VALUE(</highlight></codeline>
<codeline lineno="488"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_,<sp/>const_cast&lt;void*&gt;(static_cast&lt;const<sp/>void*&gt;(&amp;value)));</highlight></codeline>
<codeline lineno="489"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="490"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="491"><highlight class="normal"></highlight></codeline>
<codeline lineno="492"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter(counter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="493"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter(counter&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="494"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>id_(rhs.id_)</highlight></codeline>
<codeline lineno="495"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="496"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.id_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="497"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="498"><highlight class="normal"></highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter&amp;<sp/>operator=(counter<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>rhs)<sp/>=<sp/></highlight><highlight class="keyword">delete</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="500"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>counter&amp;<sp/>operator=(counter&amp;&amp;<sp/>rhs)</highlight></codeline>
<codeline lineno="501"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="502"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">this</highlight><highlight class="normal"><sp/>!=<sp/>&amp;rhs)</highlight></codeline>
<codeline lineno="503"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="504"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>id_<sp/>=<sp/>rhs.id_;</highlight></codeline>
<codeline lineno="505"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>rhs.id_<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="506"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="507"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>*</highlight><highlight class="keyword">this</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="508"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="509"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="511"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>___itt_counter*<sp/>id_;</highlight></codeline>
<codeline lineno="512"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="513"><highlight class="normal"></highlight></codeline>
<codeline lineno="515"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">event</highlight></codeline>
<codeline lineno="516"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="517"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>event(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>name)</highlight></codeline>
<codeline lineno="518"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>event_(itt_event_create(name,<sp/>(int)<sp/>strnlen(name,<sp/>256)))</highlight></codeline>
<codeline lineno="519"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="520"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="521"><highlight class="normal"></highlight></codeline>
<codeline lineno="522"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>start()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="523"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="524"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itt_event_start(event_);</highlight></codeline>
<codeline lineno="525"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="526"><highlight class="normal"></highlight></codeline>
<codeline lineno="527"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>end()</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="528"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="529"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>itt_event_end(event_);</highlight></codeline>
<codeline lineno="530"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="531"><highlight class="normal"></highlight></codeline>
<codeline lineno="532"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="533"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>event_;</highlight></codeline>
<codeline lineno="534"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="535"><highlight class="normal"></highlight></codeline>
<codeline lineno="536"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">mark_event</highlight></codeline>
<codeline lineno="537"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="538"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>mark_event(event<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>e)</highlight></codeline>
<codeline lineno="539"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>e_(e)</highlight></codeline>
<codeline lineno="540"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="541"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_.start();</highlight></codeline>
<codeline lineno="542"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="543"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~mark_event()</highlight></codeline>
<codeline lineno="544"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="545"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e_.end();</highlight></codeline>
<codeline lineno="546"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="547"><highlight class="normal"></highlight></codeline>
<codeline lineno="548"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">private</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="549"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">event</highlight><highlight class="normal"><sp/>e_;</highlight></codeline>
<codeline lineno="550"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="551"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_tick(event<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>e)</highlight></codeline>
<codeline lineno="553"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="554"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>e.start();</highlight></codeline>
<codeline lineno="555"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="556"><highlight class="normal">}}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util::itt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="557"><highlight class="normal"></highlight></codeline>
<codeline lineno="558"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="559"><highlight class="normal"></highlight></codeline>
<codeline lineno="560"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_create(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="561"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_rename(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="562"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_prepare(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_acquired(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="564"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_cancel(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="565"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_releasing(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="566"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_released(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="567"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_sync_destroy(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="568"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_caller*<sp/>itt_stack_create()</highlight></codeline>
<codeline lineno="570"><highlight class="normal">{</highlight></codeline>
<codeline lineno="571"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="572"><highlight class="normal">}</highlight></codeline>
<codeline lineno="573"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_enter(___itt_caller*)<sp/>{}</highlight></codeline>
<codeline lineno="574"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_leave(___itt_caller*)<sp/>{}</highlight></codeline>
<codeline lineno="575"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_stack_destroy(___itt_caller*)<sp/>{}</highlight></codeline>
<codeline lineno="576"><highlight class="normal"></highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_frame_begin(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*)<sp/>{}</highlight></codeline>
<codeline lineno="578"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_frame_end(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*)<sp/>{}</highlight></codeline>
<codeline lineno="579"><highlight class="normal"></highlight></codeline>
<codeline lineno="580"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_mark_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="581"><highlight class="normal">{</highlight></codeline>
<codeline lineno="582"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="583"><highlight class="normal">}</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_mark_off(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="585"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_mark(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="586"><highlight class="normal"></highlight></codeline>
<codeline lineno="587"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_thread_set_name(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="588"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_thread_ignore()<sp/>{}</highlight></codeline>
<codeline lineno="589"><highlight class="normal"></highlight></codeline>
<codeline lineno="590"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_begin(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_string_handle*)<sp/>{}</highlight></codeline>
<codeline lineno="591"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_begin(</highlight></codeline>
<codeline lineno="592"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*,<sp/>___itt_string_handle*)</highlight></codeline>
<codeline lineno="593"><highlight class="normal">{</highlight></codeline>
<codeline lineno="594"><highlight class="normal">}</highlight></codeline>
<codeline lineno="595"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_task_end(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="596"><highlight class="normal"></highlight></codeline>
<codeline lineno="597"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_domain*<sp/>itt_domain_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="598"><highlight class="normal">{</highlight></codeline>
<codeline lineno="599"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="600"><highlight class="normal">}</highlight></codeline>
<codeline lineno="601"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_string_handle*<sp/>itt_string_handle_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="602"><highlight class="normal">{</highlight></codeline>
<codeline lineno="603"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="604"><highlight class="normal">}</highlight></codeline>
<codeline lineno="605"><highlight class="normal"></highlight></codeline>
<codeline lineno="606"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_id*<sp/>itt_make_id(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="607"><highlight class="normal">{</highlight></codeline>
<codeline lineno="608"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="609"><highlight class="normal">}</highlight></codeline>
<codeline lineno="610"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_id_create(___itt_domain<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/>___itt_id*)<sp/>{}</highlight></codeline>
<codeline lineno="611"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_id_destroy(___itt_id*)<sp/>{}</highlight></codeline>
<codeline lineno="612"><highlight class="normal"></highlight></codeline>
<codeline lineno="613"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>__itt_heap_function<sp/>itt_heap_function_create(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="614"><highlight class="normal">{</highlight></codeline>
<codeline lineno="615"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="616"><highlight class="normal">}</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_allocate_begin(__itt_heap_function,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="618"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_allocate_end(__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="619"><highlight class="normal">{</highlight></codeline>
<codeline lineno="620"><highlight class="normal">}</highlight></codeline>
<codeline lineno="621"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_free_begin(__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="622"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_free_end(__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="623"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_reallocate_begin(</highlight></codeline>
<codeline lineno="624"><highlight class="normal"><sp/><sp/><sp/><sp/>__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="625"><highlight class="normal">{</highlight></codeline>
<codeline lineno="626"><highlight class="normal">}</highlight></codeline>
<codeline lineno="627"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_reallocate_end(</highlight></codeline>
<codeline lineno="628"><highlight class="normal"><sp/><sp/><sp/><sp/>__itt_heap_function,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">**,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="629"><highlight class="normal">{</highlight></codeline>
<codeline lineno="630"><highlight class="normal">}</highlight></codeline>
<codeline lineno="631"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_internal_access_begin()<sp/>{}</highlight></codeline>
<codeline lineno="632"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_heap_internal_access_end()<sp/>{}</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="634"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_counter*<sp/>itt_counter_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="635"><highlight class="normal">{</highlight></codeline>
<codeline lineno="636"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="637"><highlight class="normal">}</highlight></codeline>
<codeline lineno="638"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/>___itt_counter*<sp/>itt_counter_create_typed(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="639"><highlight class="normal">{</highlight></codeline>
<codeline lineno="640"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="641"><highlight class="normal">}</highlight></codeline>
<codeline lineno="642"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_counter_destroy(___itt_counter*)<sp/>{}</highlight></codeline>
<codeline lineno="643"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_counter_set_value(___itt_counter*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="644"><highlight class="normal"></highlight></codeline>
<codeline lineno="645"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_create(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="646"><highlight class="normal">{</highlight></codeline>
<codeline lineno="647"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="648"><highlight class="normal">}</highlight></codeline>
<codeline lineno="649"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_start(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="650"><highlight class="normal">{</highlight></codeline>
<codeline lineno="651"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="652"><highlight class="normal">}</highlight></codeline>
<codeline lineno="653"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>itt_event_end(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="654"><highlight class="normal">{</highlight></codeline>
<codeline lineno="655"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>0;</highlight></codeline>
<codeline lineno="656"><highlight class="normal">}</highlight></codeline>
<codeline lineno="657"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(</highlight></codeline>
<codeline lineno="659"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain*,<sp/>___itt_id*,<sp/>___itt_string_handle*,<sp/>std::uint64_t<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight></codeline>
<codeline lineno="660"><highlight class="normal">{</highlight></codeline>
<codeline lineno="661"><highlight class="normal">}</highlight></codeline>
<codeline lineno="662"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(</highlight></codeline>
<codeline lineno="663"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain*,<sp/>___itt_id*,<sp/>___itt_string_handle*,<sp/></highlight><highlight class="keywordtype">double</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)</highlight></codeline>
<codeline lineno="664"><highlight class="normal">{</highlight></codeline>
<codeline lineno="665"><highlight class="normal">}</highlight></codeline>
<codeline lineno="666"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(</highlight></codeline>
<codeline lineno="667"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain*,<sp/>___itt_id*,<sp/>___itt_string_handle*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="668"><highlight class="normal">{</highlight></codeline>
<codeline lineno="669"><highlight class="normal">}</highlight></codeline>
<codeline lineno="670"><highlight class="normal"></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>itt_metadata_add(</highlight></codeline>
<codeline lineno="671"><highlight class="normal"><sp/><sp/><sp/><sp/>___itt_domain*,<sp/>___itt_id*,<sp/>___itt_string_handle*,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)</highlight></codeline>
<codeline lineno="672"><highlight class="normal">{</highlight></codeline>
<codeline lineno="673"><highlight class="normal">}</highlight></codeline>
<codeline lineno="674"><highlight class="normal"></highlight></codeline>
<codeline lineno="676"><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{</highlight></codeline>
<codeline lineno="677"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">thread_description;</highlight></codeline>
<codeline lineno="678"><highlight class="normal">}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="679"><highlight class="normal"></highlight></codeline>
<codeline lineno="680"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">itt<sp/>{</highlight></codeline>
<codeline lineno="681" refid="structhpx_1_1util_1_1itt_1_1stack__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1stack__context" kindref="compound">stack_context</ref></highlight></codeline>
<codeline lineno="682"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="683"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1stack__context" kindref="compound">stack_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="684"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1stack__context" kindref="compound">stack_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="685"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="686"><highlight class="normal"></highlight></codeline>
<codeline lineno="687" refid="structhpx_1_1util_1_1itt_1_1caller__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1caller__context" kindref="compound">caller_context</ref></highlight></codeline>
<codeline lineno="688"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="689"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1caller__context" kindref="compound">caller_context</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1stack__context" kindref="compound">stack_context</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="690"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1caller__context" kindref="compound">caller_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="691"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="692"><highlight class="normal"></highlight></codeline>
<codeline lineno="694" refid="structhpx_1_1util_1_1itt_1_1domain" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref></highlight></codeline>
<codeline lineno="695"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="696"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_NON_COPYABLE(<ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref>);</highlight></codeline>
<codeline lineno="697"><highlight class="normal"></highlight></codeline>
<codeline lineno="698"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="699"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="700"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="701"><highlight class="normal"></highlight></codeline>
<codeline lineno="702" refid="structhpx_1_1util_1_1itt_1_1thread__domain" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1thread__domain" kindref="compound">thread_domain</ref><sp/>:<sp/><ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref></highlight></codeline>
<codeline lineno="703"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="704"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>HPX_NON_COPYABLE(<ref refid="structhpx_1_1util_1_1itt_1_1thread__domain" kindref="compound">thread_domain</ref>);</highlight></codeline>
<codeline lineno="705"><highlight class="normal"></highlight></codeline>
<codeline lineno="706"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1thread__domain" kindref="compound">thread_domain</ref>()</highlight></codeline>
<codeline lineno="707"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/><ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref>(){};</highlight></codeline>
<codeline lineno="708"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="710" refid="structhpx_1_1util_1_1itt_1_1id" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1id" kindref="compound">id</ref></highlight></codeline>
<codeline lineno="711"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="712"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1id" kindref="compound">id</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/></highlight><highlight class="comment">/*domain*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*addr*/</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="713"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">long</highlight><highlight class="normal"><sp/></highlight><highlight class="comment">/*extra*/</highlight><highlight class="normal"><sp/>=<sp/>0)</highlight></codeline>
<codeline lineno="714"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="715"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="716"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1id" kindref="compound">id</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="717"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="718"><highlight class="normal"></highlight></codeline>
<codeline lineno="720" refid="structhpx_1_1util_1_1itt_1_1frame__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1frame__context" kindref="compound">frame_context</ref></highlight></codeline>
<codeline lineno="721"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="722"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1frame__context" kindref="compound">frame_context</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal">*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="723"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1frame__context" kindref="compound">frame_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="724"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="725"><highlight class="normal"></highlight></codeline>
<codeline lineno="726" refid="structhpx_1_1util_1_1itt_1_1undo__frame__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1undo__frame__context" kindref="compound">undo_frame_context</ref></highlight></codeline>
<codeline lineno="727"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="728"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1undo__frame__context" kindref="compound">undo_frame_context</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1frame__context" kindref="compound">frame_context</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="729"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1undo__frame__context" kindref="compound">undo_frame_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="730"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="731"><highlight class="normal"></highlight></codeline>
<codeline lineno="733" refid="structhpx_1_1util_1_1itt_1_1mark__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1mark__context" kindref="compound">mark_context</ref></highlight></codeline>
<codeline lineno="734"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="735"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1mark__context" kindref="compound">mark_context</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="736"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1mark__context" kindref="compound">mark_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="737"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="738"><highlight class="normal"></highlight></codeline>
<codeline lineno="739" refid="structhpx_1_1util_1_1itt_1_1undo__mark__context" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1undo__mark__context" kindref="compound">undo_mark_context</ref></highlight></codeline>
<codeline lineno="740"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="741"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1undo__mark__context" kindref="compound">undo_mark_context</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1mark__context" kindref="compound">mark_context</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="742"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1undo__mark__context" kindref="compound">undo_mark_context</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="743"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="744"><highlight class="normal"></highlight></codeline>
<codeline lineno="746" refid="structhpx_1_1util_1_1itt_1_1string__handle" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1string__handle" kindref="compound">string_handle</ref></highlight></codeline>
<codeline lineno="747"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="748"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1string__handle" kindref="compound">string_handle</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/>=<sp/></highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="749"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="750"><highlight class="normal"></highlight></codeline>
<codeline lineno="752" refid="structhpx_1_1util_1_1itt_1_1task" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1task" kindref="compound">task</ref></highlight></codeline>
<codeline lineno="753"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="754"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1task" kindref="compound">task</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="structhpx_1_1util_1_1itt_1_1string__handle" kindref="compound">string_handle</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/>std::uint64_t)<sp/>{}</highlight></codeline>
<codeline lineno="755"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1task" kindref="compound">task</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1domain" kindref="compound">domain</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;,<sp/><ref refid="structhpx_1_1util_1_1itt_1_1string__handle" kindref="compound">string_handle</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="756"><highlight class="normal"></highlight></codeline>
<codeline lineno="757"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1task" kindref="compound">task</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="758"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="759"><highlight class="normal"></highlight></codeline>
<codeline lineno="761" refid="structhpx_1_1util_1_1itt_1_1heap__function" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1heap__function" kindref="compound">heap_function</ref></highlight></codeline>
<codeline lineno="762"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="763"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1heap__function" kindref="compound">heap_function</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="764"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1heap__function" kindref="compound">heap_function</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="765"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="766"><highlight class="normal"></highlight></codeline>
<codeline lineno="767" refid="structhpx_1_1util_1_1itt_1_1heap__allocate" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1heap__allocate" kindref="compound">heap_allocate</ref></highlight></codeline>
<codeline lineno="768"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="769"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>T&gt;</highlight></codeline>
<codeline lineno="770"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1heap__allocate" kindref="compound">heap_allocate</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1heap__function" kindref="compound">heap_function</ref>&amp;<sp/></highlight><highlight class="comment">/*heap_function*/</highlight><highlight class="normal">,<sp/>T**,<sp/>std::size_t,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal">)</highlight></codeline>
<codeline lineno="771"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="772"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="773"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1heap__allocate" kindref="compound">heap_allocate</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="774"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="775"><highlight class="normal"></highlight></codeline>
<codeline lineno="776" refid="structhpx_1_1util_1_1itt_1_1heap__free" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1heap__free" kindref="compound">heap_free</ref></highlight></codeline>
<codeline lineno="777"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="778"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1heap__free" kindref="compound">heap_free</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1heap__function" kindref="compound">heap_function</ref>&amp;<sp/></highlight><highlight class="comment">/*heap_function*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="779"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1heap__free" kindref="compound">heap_free</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="780"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="781"><highlight class="normal"></highlight></codeline>
<codeline lineno="782" refid="structhpx_1_1util_1_1itt_1_1heap__internal__access" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1heap__internal__access" kindref="compound">heap_internal_access</ref></highlight></codeline>
<codeline lineno="783"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="784"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1heap__internal__access" kindref="compound">heap_internal_access</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="785"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1heap__internal__access" kindref="compound">heap_internal_access</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="786"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="787"><highlight class="normal"></highlight></codeline>
<codeline lineno="788" refid="structhpx_1_1util_1_1itt_1_1counter" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1counter" kindref="compound">counter</ref></highlight></codeline>
<codeline lineno="789"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="790"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1counter" kindref="compound">counter</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*name*/</highlight><highlight class="normal">,<sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*<sp/></highlight><highlight class="comment">/*domain*/</highlight><highlight class="normal">)<sp/>{}</highlight></codeline>
<codeline lineno="791"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1counter" kindref="compound">counter</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="792"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="793"><highlight class="normal"></highlight></codeline>
<codeline lineno="794" refid="structhpx_1_1util_1_1itt_1_1event" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1event" kindref="compound">event</ref></highlight></codeline>
<codeline lineno="795"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="796"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1event" kindref="compound">event</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">*)<sp/>{}</highlight></codeline>
<codeline lineno="797"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="798"><highlight class="normal"></highlight></codeline>
<codeline lineno="799" refid="structhpx_1_1util_1_1itt_1_1mark__event" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1itt_1_1mark__event" kindref="compound">mark_event</ref></highlight></codeline>
<codeline lineno="800"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="801"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1itt_1_1mark__event" kindref="compound">mark_event</ref>(<ref refid="structhpx_1_1util_1_1itt_1_1event" kindref="compound">event</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="802"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>~<ref refid="structhpx_1_1util_1_1itt_1_1mark__event" kindref="compound">mark_event</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="803"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="804"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>event_tick(<ref refid="structhpx_1_1util_1_1itt_1_1event" kindref="compound">event</ref><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="806"><highlight class="normal">}}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util::itt</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="807"><highlight class="normal"></highlight></codeline>
<codeline lineno="808"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/><sp/><sp/><sp/>//<sp/>HPX_HAVE_ITTNOTIFY</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="809"><highlight class="normal"></highlight></codeline>
<codeline lineno="810"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/concurrency/include/hpx/concurrency/itt_notify.hpp"/>
  </compounddef>
</doxygen>
