<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util" kind="namespace" language="C++">
    <compoundname>hpx::util</compoundname>
    <innerclass refid="classhpx_1_1util_1_1barrier" prot="public">hpx::util::barrier</innerclass>
    <innerclass refid="structhpx_1_1util_1_1cache__aligned__data" prot="public">hpx::util::cache_aligned_data</innerclass>
    <innerclass refid="structhpx_1_1util_1_1cache__line__data" prot="public">hpx::util::cache_line_data</innerclass>
    <innerclass refid="structhpx_1_1util_1_1ignore__all__while__checking" prot="public">hpx::util::ignore_all_while_checking</innerclass>
    <innerclass refid="structhpx_1_1util_1_1ignore__while__checking" prot="public">hpx::util::ignore_while_checking</innerclass>
    <innerclass refid="structhpx_1_1util_1_1register__lock__data" prot="public">hpx::util::register_lock_data</innerclass>
    <innerclass refid="structhpx_1_1util_1_1spinlock" prot="public">hpx::util::spinlock</innerclass>
    <innerclass refid="classhpx_1_1util_1_1spinlock__pool" prot="public">hpx::util::spinlock_pool</innerclass>
    <innernamespace refid="namespacehpx_1_1util_1_1itt">hpx::util::itt</innernamespace>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1af482b20c594fc019f28cb952c993377c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::register_lock</definition>
        <argsstring>(void const *, util::register_lock_data *=nullptr)</argsstring>
        <name>register_lock</name>
        <param>
          <type>void const *</type>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1register__lock__data" kindref="compound">util::register_lock_data</ref> *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="113" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="113" bodyend="116"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1afa68a72c9850e7a46065e11d119871c6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::unregister_lock</definition>
        <argsstring>(void const *)</argsstring>
        <name>unregister_lock</name>
        <param>
          <type>void const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="117" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="117" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1ae0e1837ee6f09b79b26c2e788d2e9fc9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::verify_no_locks</definition>
        <argsstring>()</argsstring>
        <name>verify_no_locks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="121" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="121" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1adc0a74d6e9ea588ac5e798f2cd262b27" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::force_error_on_lock</definition>
        <argsstring>()</argsstring>
        <name>force_error_on_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="122" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="122" bodyend="122"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1a8daf09f3353da87330f5901602232177" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::enable_lock_detection</definition>
        <argsstring>()</argsstring>
        <name>enable_lock_detection</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="123" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="123" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1a4f5b17e2809bff886e3e10868af110b8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::ignore_lock</definition>
        <argsstring>(void const *)</argsstring>
        <name>ignore_lock</name>
        <param>
          <type>void const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="124" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="124" bodyend="124"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1ad2a1db606850dc8d6c710a9b59150e16" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::reset_ignored</definition>
        <argsstring>(void const *)</argsstring>
        <name>reset_ignored</name>
        <param>
          <type>void const *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="125" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="125" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1af532105f75862e3f897ea9b88f35c12f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::ignore_all_locks</definition>
        <argsstring>()</argsstring>
        <name>ignore_all_locks</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="127" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="127" bodyend="127"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2concurrency_2register__locks_8hpp_1a204b7670ab12a160dd2daefe33bc282a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::reset_ignored_all</definition>
        <argsstring>()</argsstring>
        <name>reset_ignored_all</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/register_locks.hpp" line="128" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/register_locks.hpp" bodystart="128" bodyend="128"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/concurrency/include/hpx/concurrency/barrier.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
