<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structmoodycamel_1_1_producer_token" kind="struct" language="C++" prot="public">
    <compoundname>moodycamel::ProducerToken</compoundname>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="structmoodycamel_1_1_producer_token_1ac77c3583af133c29d4e26d4bb8605ce4" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type>friend class</type>
        <definition>friend class ConcurrentQueue</definition>
        <argsstring></argsstring>
        <name>ConcurrentQueue</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="640" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="640" bodyend="-1"/>
      </memberdef>
      <memberdef kind="friend" id="structmoodycamel_1_1_producer_token_1a680d9a9301a3c7bb2380209214ace21e" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>friend class</type>
        <definition>friend class ConcurrentQueueTests</definition>
        <argsstring></argsstring>
        <name>ConcurrentQueueTests</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="641" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="641" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="protected-attrib">
      <memberdef kind="variable" id="structmoodycamel_1_1_producer_token_1abda361022491d2eb32e50becb3c83a12" prot="protected" static="no" mutable="no">
        <type><ref refid="structmoodycamel_1_1details_1_1_concurrent_queue_producer_typeless_base" kindref="compound">details::ConcurrentQueueProducerTypelessBase</ref> *</type>
        <definition>details::ConcurrentQueueProducerTypelessBase* moodycamel::ProducerToken::producer</definition>
        <argsstring></argsstring>
        <name>producer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="644" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="644" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1a8f9cf4b0468280a54eeb63fa36ff90e7" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>moodycamel::ProducerToken::ProducerToken</definition>
        <argsstring>(ConcurrentQueue&lt; T, Traits &gt; &amp;queue)</argsstring>
        <name>ProducerToken</name>
        <param>
          <type><ref refid="classmoodycamel_1_1_concurrent_queue" kindref="compound">ConcurrentQueue</ref>&lt; T, Traits &gt; &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="586" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="3592" bodyend="3598"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1a48e7eb3bf5a35b40777a822bf3583e57" prot="public" static="no" const="no" explicit="yes" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Traits</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>moodycamel::ProducerToken::ProducerToken</definition>
        <argsstring>(BlockingConcurrentQueue&lt; T, Traits &gt; &amp;queue)</argsstring>
        <name>ProducerToken</name>
        <param>
          <type><ref refid="classmoodycamel_1_1_blocking_concurrent_queue" kindref="compound">BlockingConcurrentQueue</ref>&lt; T, Traits &gt; &amp;</type>
          <declname>queue</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="589" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="3601" bodyend="3607"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1af54d214dd87906f70a658937afa3fbf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>moodycamel::ProducerToken::ProducerToken</definition>
        <argsstring>(ProducerToken &amp;&amp;other) MOODYCAMEL_NOEXCEPT</argsstring>
        <name>ProducerToken</name>
        <param>
          <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="591" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="591" bodyend="598"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1ab1acd124b2e84044ea880e15c2b6fc7b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> &amp;</type>
        <definition>ProducerToken&amp; moodycamel::ProducerToken::operator=</definition>
        <argsstring>(ProducerToken &amp;&amp;other) MOODYCAMEL_NOEXCEPT</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="600" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="600" bodyend="604"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1ac811f7c5cb1d265f8d5e59549e547fee" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void moodycamel::ProducerToken::swap</definition>
        <argsstring>(ProducerToken &amp;other) MOODYCAMEL_NOEXCEPT</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="606" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="606" bodyend="615"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1a03ec48f736eb0c8048c2553e59a97e5a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool moodycamel::ProducerToken::valid</definition>
        <argsstring>() const</argsstring>
        <name>valid</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="625" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="625" bodyend="625"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1a21adfd4e253de5a115facd26c0c0eb72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>moodycamel::ProducerToken::~ProducerToken</definition>
        <argsstring>()</argsstring>
        <name>~ProducerToken</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="627" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="627" bodyend="633"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1abf96005db180c25cdfef73461fe4407a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>moodycamel::ProducerToken::ProducerToken</definition>
        <argsstring>(ProducerToken const &amp;) MOODYCAMEL_DELETE_FUNCTION</argsstring>
        <name>ProducerToken</name>
        <param>
          <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="636" column="1"/>
      </memberdef>
      <memberdef kind="function" id="structmoodycamel_1_1_producer_token_1afe9d580b9be949af3fc4ee3972c828e4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> &amp;</type>
        <definition>ProducerToken&amp; moodycamel::ProducerToken::operator=</definition>
        <argsstring>(ProducerToken const &amp;) MOODYCAMEL_DELETE_FUNCTION</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structmoodycamel_1_1_producer_token" kindref="compound">ProducerToken</ref> const &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="637" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <collaborationgraph>
      <node id="144">
        <label>moodycamel::details::ConcurrentQueueProducerTypelessBase</label>
        <link refid="structmoodycamel_1_1details_1_1_concurrent_queue_producer_typeless_base"/>
        <childnode refid="144" relation="usage">
          <edgelabel>next</edgelabel>
        </childnode>
        <childnode refid="143" relation="usage">
          <edgelabel>token</edgelabel>
        </childnode>
      </node>
      <node id="143">
        <label>moodycamel::ProducerToken</label>
        <link refid="structmoodycamel_1_1_producer_token"/>
        <childnode refid="144" relation="usage">
          <edgelabel>producer</edgelabel>
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" line="584" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/concurrentqueue.hpp" bodystart="583" bodyend="645"/>
    <listofallmembers>
      <member refid="structmoodycamel_1_1_producer_token_1ac77c3583af133c29d4e26d4bb8605ce4" prot="private" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ConcurrentQueue</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1a680d9a9301a3c7bb2380209214ace21e" prot="private" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ConcurrentQueueTests</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1ab1acd124b2e84044ea880e15c2b6fc7b" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>operator=</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1afe9d580b9be949af3fc4ee3972c828e4" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>operator=</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1abda361022491d2eb32e50becb3c83a12" prot="protected" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>producer</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1a8f9cf4b0468280a54eeb63fa36ff90e7" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ProducerToken</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1a48e7eb3bf5a35b40777a822bf3583e57" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ProducerToken</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1af54d214dd87906f70a658937afa3fbf4" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ProducerToken</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1abf96005db180c25cdfef73461fe4407a" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>ProducerToken</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1ac811f7c5cb1d265f8d5e59549e547fee" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>swap</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1a03ec48f736eb0c8048c2553e59a97e5a" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>valid</name></member>
      <member refid="structmoodycamel_1_1_producer_token_1a21adfd4e253de5a115facd26c0c0eb72" prot="public" virt="non-virtual"><scope>moodycamel::ProducerToken</scope><name>~ProducerToken</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
