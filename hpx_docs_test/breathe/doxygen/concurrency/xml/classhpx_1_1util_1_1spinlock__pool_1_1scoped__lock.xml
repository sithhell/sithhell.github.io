<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::spinlock_pool::scoped_lock</compoundname>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1ab395404fd0be2ef9d141b0ae461eb919" prot="private" static="no" mutable="no">
        <type>boost::detail::spinlock &amp;</type>
        <definition>boost::detail::spinlock&amp; hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::sp_</definition>
        <argsstring></argsstring>
        <name>sp_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="64" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1acb79c6cc916925e4e4d0eb81ec6c7b91" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type></type>
        <definition>hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::HPX_NON_COPYABLE</definition>
        <argsstring>(scoped_lock)</argsstring>
        <name>HPX_NON_COPYABLE</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock" kindref="compound">scoped_lock</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="67" column="1"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1ad994a4540150df325d70602aed8d609e" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::scoped_lock</definition>
        <argsstring>(void const *pv)</argsstring>
        <name>scoped_lock</name>
        <param>
          <type>void const *</type>
          <declname>pv</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="70" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1a32965b9dab2ce73c836cf3c8bde60271" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::~scoped_lock</definition>
        <argsstring>()</argsstring>
        <name>~scoped_lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="76" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="76" bodyend="79"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1aed69a6724b49fe6bc582d6e8f3bd9048" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::lock</definition>
        <argsstring>()</argsstring>
        <name>lock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="81" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="81" bodyend="87"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1a85fd494e6da405a4ca5385cb4b62ff96" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::spinlock_pool&lt; Tag, N &gt;::scoped_lock::unlock</definition>
        <argsstring>()</argsstring>
        <name>unlock</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="89" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="89" bodyend="95"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" line="62" column="1" bodyfile="libs/concurrency/include/hpx/concurrency/spinlock_pool.hpp" bodystart="61" bodyend="96"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1acb79c6cc916925e4e4d0eb81ec6c7b91" prot="public" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>HPX_NON_COPYABLE</name></member>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1aed69a6724b49fe6bc582d6e8f3bd9048" prot="public" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>lock</name></member>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1ad994a4540150df325d70602aed8d609e" prot="public" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>scoped_lock</name></member>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1ab395404fd0be2ef9d141b0ae461eb919" prot="private" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>sp_</name></member>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1a85fd494e6da405a4ca5385cb4b62ff96" prot="public" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>unlock</name></member>
      <member refid="classhpx_1_1util_1_1spinlock__pool_1_1scoped__lock_1a32965b9dab2ce73c836cf3c8bde60271" prot="public" virt="non-virtual"><scope>hpx::util::spinlock_pool::scoped_lock</scope><name>~scoped_lock</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
