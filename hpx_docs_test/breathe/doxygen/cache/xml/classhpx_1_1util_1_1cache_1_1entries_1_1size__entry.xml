<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::cache::entries::size_entry</compoundname>
    <basecompoundref refid="classhpx_1_1util_1_1cache_1_1entries_1_1entry" prot="public" virt="non-virtual">hpx::util::cache::entries::entry&lt; Value, detail::size_derived&lt; Value, Derived &gt;::type &gt;</basecompoundref>
    <includes refid="compatibility_2hpx_2util_2cache_2entries_2size__entry_8hpp" local="no">hpx/cache/entries/size_entry.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Value</type>
      </param>
      <param>
        <type>typename Derived</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a072f2e571d6655913b52cdea6709bd3a" prot="private" static="no">
        <type>detail::size_derived&lt; Value, Derived &gt;::type</type>
        <definition>typedef detail::size_derived&lt;Value, Derived&gt;::type hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::derived_type</definition>
        <argsstring></argsstring>
        <name>derived_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="61" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a4a5b9cc4da49320eb2e31726be672f54" prot="private" static="no">
        <type><ref refid="classhpx_1_1util_1_1cache_1_1entries_1_1entry" kindref="compound">entry</ref>&lt; Value, derived_type &gt;</type>
        <definition>typedef entry&lt;Value, derived_type&gt; hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::base_type</definition>
        <argsstring></argsstring>
        <name>base_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="62" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="62" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1afac2ffb9be8707e7b4a0a43a5e7cac83" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::size_</definition>
        <argsstring></argsstring>
        <name>size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="90" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="90" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a0e6f70b691ec751d673595ee6bccf41d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::size_entry</definition>
        <argsstring>()</argsstring>
        <name>size_entry</name>
        <briefdescription>
<para>Any cache entry has to be default constructible. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="66" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="66" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a79c170389914972a37e527e3cfe1b063" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::size_entry</definition>
        <argsstring>(Value const &amp;val, std::size_t size)</argsstring>
        <name>size_entry</name>
        <param>
          <type>Value const &amp;</type>
          <declname>val</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>size</declname>
        </param>
        <briefdescription>
<para>Construct a new instance of a cache entry holding the given value. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="72" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="72" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1afa569753a31719d6280e64431f18b899" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;::get_size</definition>
        <argsstring>() const</argsstring>
        <name>get_size</name>
        <briefdescription>
<para>Return the &apos;size&apos; of this entry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="77" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="77" bodyend="80"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a3ac87445defae96ee0729e87495eb3d6" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>friend bool</type>
        <definition>bool operator&lt;</definition>
        <argsstring>(size_entry const &amp;lhs, size_entry const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry" kindref="compound">size_entry</ref> const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry" kindref="compound">size_entry</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
<para>Compare the &apos;age&apos; of two entries. An entry is &apos;older&apos; than another entry if it has a bigger size. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="84" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="84" bodyend="87"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>The <emphasis><ref refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry" kindref="compound">size_entry</ref></emphasis> type can be used to store values in a cache which have a size associated (such as files, etc.). Using this type as the cache&apos;s entry type makes sure that the entries with the biggest size are discarded from the cache first.</para><para><simplesect kind="note"><para>The <emphasis><ref refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry" kindref="compound">size_entry</ref></emphasis> conforms to the CacheEntry concept. </para></simplesect>
<simplesect kind="note"><para>This type can be used to model a &apos;discard smallest first&apos; cache policy if it is used with a std::greater as the caches&apos; UpdatePolicy (instead of the default std::less).</para></simplesect>
<parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Value</parametername>
</parameternamelist>
<parameterdescription>
<para>The data type to be stored in a cache. It has to be default constructible, copy constructible and less_than_comparable. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Derived</parametername>
</parameternamelist>
<parameterdescription>
<para>The (optional) type for which this type is used as a base class. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="49">
        <label>boost::less_than_comparable&lt; detail::derived&lt; Value, detail::size_derived&lt; Value, Derived &gt;::type  &gt;::type &gt;</label>
      </node>
      <node id="48">
        <label>hpx::util::cache::entries::entry&lt; Value, detail::size_derived&lt; Value, Derived &gt;::type &gt;</label>
        <childnode refid="49" relation="private-inheritance">
        </childnode>
      </node>
      <node id="47">
        <label>hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;</label>
        <link refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="52">
        <label>boost::less_than_comparable&lt; detail::derived&lt; Value, detail::size_derived&lt; Value, Derived &gt;::type  &gt;::type &gt;</label>
      </node>
      <node id="51">
        <label>hpx::util::cache::entries::entry&lt; Value, detail::size_derived&lt; Value, Derived &gt;::type &gt;</label>
        <childnode refid="52" relation="private-inheritance">
        </childnode>
      </node>
      <node id="50">
        <label>hpx::util::cache::entries::size_entry&lt; Value, Derived &gt;</label>
        <link refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry"/>
        <childnode refid="51" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/cache/include/hpx/cache/entries/size_entry.hpp" line="19" column="1" bodyfile="libs/cache/include/hpx/cache/entries/size_entry.hpp" bodystart="19" bodyend="-1"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a4a5b9cc4da49320eb2e31726be672f54" prot="private" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>base_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a072f2e571d6655913b52cdea6709bd3a" prot="private" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>derived_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1afa569753a31719d6280e64431f18b899" prot="public" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>get_size</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a3ac87445defae96ee0729e87495eb3d6" prot="public" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>operator&lt;</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1afac2ffb9be8707e7b4a0a43a5e7cac83" prot="private" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>size_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a0e6f70b691ec751d673595ee6bccf41d" prot="public" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>size_entry</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1entries_1_1size__entry_1a79c170389914972a37e527e3cfe1b063" prot="public" virt="non-virtual"><scope>hpx::util::cache::entries::size_entry</scope><name>size_entry</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
