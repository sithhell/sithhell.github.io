<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1cache_1_1lru__cache" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::cache::lru_cache</compoundname>
    <includes refid="compatibility_2hpx_2util_2cache_2lru__cache_8hpp" local="no">hpx/cache/lru_cache.hpp</includes>
    <templateparamlist>
      <param>
        <type>typename Key</type>
      </param>
      <param>
        <type>typename Entry</type>
      </param>
      <param>
        <type>typename Statistics</type>
        <defval><ref refid="classhpx_1_1util_1_1cache_1_1statistics_1_1no__statistics" kindref="compound">statistics::no_statistics</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ab14d0f56b50d29b40a273e4a368f10c2" prot="public" static="no">
        <type>Key</type>
        <definition>typedef Key hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::key_type</definition>
        <argsstring></argsstring>
        <name>key_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="44" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ae89a73c911301db151fe75c3de464248" prot="public" static="no">
        <type>Entry</type>
        <definition>typedef Entry hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::entry_type</definition>
        <argsstring></argsstring>
        <name>entry_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="45" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a9f169474cf6557b251ddb4d09bdf9d53" prot="public" static="no">
        <type>Statistics</type>
        <definition>typedef Statistics hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::statistics_type</definition>
        <argsstring></argsstring>
        <name>statistics_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="46" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a1f290f9b03d0cc9ee3b75029a5e5a573" prot="public" static="no">
        <type>std::pair&lt; key_type, entry_type &gt;</type>
        <definition>typedef std::pair&lt;key_type, entry_type&gt; hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::entry_pair</definition>
        <argsstring></argsstring>
        <name>entry_pair</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="47" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="47" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a5cb44b45dac3a6f7afa7616acd6f7f86" prot="public" static="no">
        <type>std::list&lt; entry_pair &gt;</type>
        <definition>typedef std::list&lt;entry_pair&gt; hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::storage_type</definition>
        <argsstring></argsstring>
        <name>storage_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="48" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ab9eabfd7df0f194387a4b7934228a905" prot="public" static="no">
        <type>std::map&lt; Key, typename storage_type::iterator &gt;</type>
        <definition>typedef std::map&lt;Key, typename storage_type::iterator&gt; hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::map_type</definition>
        <argsstring></argsstring>
        <name>map_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="49" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a729b288d56dadcbcf1fbc460a6939c8f" prot="public" static="no">
        <type>std::size_t</type>
        <definition>typedef std::size_t hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::size_type</definition>
        <argsstring></argsstring>
        <name>size_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="50" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="50" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a26b6f2158ce77fdc6757549b56b7796f" prot="private" static="no">
        <type>statistics_type::update_on_exit</type>
        <definition>typedef statistics_type::update_on_exit hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::update_on_exit</definition>
        <argsstring></argsstring>
        <name>update_on_exit</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="52" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="52" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ab6e2ceae5d40f7ce6728396b63337576" prot="private" static="no" mutable="no">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::max_size_</definition>
        <argsstring></argsstring>
        <name>max_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="432" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="432" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a5b61db7b131827ec5f808eae73dfa507" prot="private" static="no" mutable="no">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::current_size_</definition>
        <argsstring></argsstring>
        <name>current_size_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="433" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="433" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1lru__cache_1af2f68e66fcb3b9f1226b1565f2621a68" prot="private" static="no" mutable="no">
        <type>storage_type</type>
        <definition>storage_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::storage_</definition>
        <argsstring></argsstring>
        <name>storage_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="435" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="435" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a458fea38a059c9adaf0b68513f97e468" prot="private" static="no" mutable="no">
        <type>map_type</type>
        <definition>map_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::map_</definition>
        <argsstring></argsstring>
        <name>map_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="436" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="436" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a91cd0e24c023acec9eddfcb8bfacd813" prot="private" static="no" mutable="no">
        <type>statistics_type</type>
        <definition>statistics_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::statistics_</definition>
        <argsstring></argsstring>
        <name>statistics_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="438" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="438" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a39c0943bfeb53bb5f33c0160a304c4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::lru_cache</definition>
        <argsstring>(size_type max_size=0)</argsstring>
        <name>lru_cache</name>
        <param>
          <type>size_type</type>
          <declname>max_size</declname>
          <defval>0</defval>
        </param>
        <briefdescription>
<para>Construct an instance of a <ref refid="classhpx_1_1util_1_1cache_1_1lru__cache" kindref="compound">lru_cache</ref>. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The maximal size this cache is allowed to reach any time. The default is zero (no size limitation). The unit of this value is usually determined by the unit of the values returned by the entry&apos;s <emphasis>get_size</emphasis> function. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="64" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="64" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1acc37f79d115605075e9ecd0bfeea6b7c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::lru_cache</definition>
        <argsstring>(lru_cache &amp;&amp;other)</argsstring>
        <name>lru_cache</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1cache_1_1lru__cache" kindref="compound">lru_cache</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="70" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="70" bodyend="76"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a199556764c333cd66b70415c1073d8a6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::size</definition>
        <argsstring>() const</argsstring>
        <name>size</name>
        <briefdescription>
<para>Return current size of the cache. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>The current size of this cache instance. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="82" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="82" bodyend="85"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a92bdab3f7300f994f01b4d8fcc5ae036" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::capacity</definition>
        <argsstring>() const</argsstring>
        <name>capacity</name>
        <briefdescription>
<para>Access the maximum size the cache is allowed to grow to. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The unit of this value is usually determined by the unit of the return values of the entry&apos;s function <emphasis>entry::get_size</emphasis>.</para></simplesect>
<simplesect kind="return"><para>The maximum size this cache instance is currently allowed to reach. If this number is zero the cache has no limitation with regard to a maximum size. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="97" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="97" bodyend="100"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a7c029e73192bca59c2376e26abb0ea1c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::reserve</definition>
        <argsstring>(size_type max_size)</argsstring>
        <name>reserve</name>
        <param>
          <type>size_type</type>
          <declname>max_size</declname>
        </param>
        <briefdescription>
<para>Change the maximum size this cache can grow to. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_size</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The new maximum size this cache will be allowed to grow to. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="108" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="108" bodyend="121"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ace9fa7bf0e426260d2c776d136f0b3e7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::holds_key</definition>
        <argsstring>(key_type const &amp;key)</argsstring>
        <name>holds_key</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <briefdescription>
<para>Check whether the cache currently holds an entry identified by the given key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>k</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the entry which should be looked up in the cache.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function does not call the entry&apos;s function <emphasis>entry::touch</emphasis>. It just checks if the cache contains an entry corresponding to the given key.</para></simplesect>
<simplesect kind="return"><para>This function returns <emphasis>true</emphasis> if the cache holds the referenced entry, otherwise it returns <emphasis>false</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="136" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ac882d63832191c07d6b499e2ba17b834" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::get_entry</definition>
        <argsstring>(key_type const &amp;key, key_type &amp;realkey, entry_type &amp;entry)</argsstring>
        <name>get_entry</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>key_type &amp;</type>
          <declname>realkey</declname>
        </param>
        <param>
          <type>entry_type &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Get a specific entry identified by the given key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the entry which should be retrieved from the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] If the entry indexed by the key is found in the cache this value on successful return will be a copy of the corresponding entry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function will &quot;touch&quot; the entry and mark it as recently used if the key was found in the cache.</para></simplesect>
<simplesect kind="return"><para>This function returns <emphasis>true</emphasis> if the cache holds the referenced entry, otherwise it returns <emphasis>false</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="155" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="155" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a11a647a8c81c6b62c21ed14d49a79528" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::get_entry</definition>
        <argsstring>(key_type const &amp;key, entry_type &amp;entry)</argsstring>
        <name>get_entry</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>entry_type &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Get a specific entry identified by the given key. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the entry which should be retrieved from the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>[out] If the entry indexed by the key is found in the cache this value on successful return will be a copy of the corresponding entry.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function will &quot;touch&quot; the entry and mark it as recently used if the key was found in the cache.</para></simplesect>
<simplesect kind="return"><para>This function returns <emphasis>true</emphasis> if the cache holds the referenced entry, otherwise it returns <emphasis>false</emphasis>. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="193" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="193" bodyend="197"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1aa9913e64dd98be28c5b12431cd8c9548" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::insert</definition>
        <argsstring>(key_type const &amp;key, entry_type const &amp;entry)</argsstring>
        <name>insert</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>entry_type const &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Insert a new entry into this cache. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the entry which should be added to the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The entry which should be added to the cache.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>This function assumes that the entry is not in the cache already. Inserting an already existing entry is considered undefined behavior </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="209" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="209" bodyend="219"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a6396f7ce7fb423c0c31c2f8c9115a00e" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::insert_nonexist</definition>
        <argsstring>(key_type const &amp;key, entry_type const &amp;entry)</argsstring>
        <name>insert_nonexist</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>entry_type const &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="221" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="221" bodyend="237"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a5d8befc48e6bc5603351b81322fc87eb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::update</definition>
        <argsstring>(key_type const &amp;key, entry_type const &amp;entry)</argsstring>
        <name>update</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>entry_type const &amp;</type>
          <declname>entry</declname>
        </param>
        <briefdescription>
<para>Update an existing element in this cache. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the value which should be updated in the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The entry which should be used as a replacement for the existing value in the cache. Any existing cache entry is not changed except for its value.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function will &quot;touch&quot; the entry and mark it as recently used if the key was found in the cache. </para></simplesect>
<simplesect kind="note"><para>The difference to the other overload of the <emphasis>insert</emphasis> function is that this overload replaces the cached value only, while the other overload replaces the whole cache entry, updating the cache entry properties. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="255" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="255" bodyend="275"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a53ee6e48bb742b326ff7706fea918646" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename F</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::update_if</definition>
        <argsstring>(key_type const &amp;key, entry_type const &amp;entry, F &amp;&amp;f)</argsstring>
        <name>update_if</name>
        <param>
          <type>key_type const &amp;</type>
          <declname>key</declname>
        </param>
        <param>
          <type>entry_type const &amp;</type>
          <declname>entry</declname>
        </param>
        <param>
          <type>F &amp;&amp;</type>
          <declname>f</declname>
        </param>
        <briefdescription>
<para>Update an existing element in this cache. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>key</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The key for the value which should be updated in the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>entry</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The value which should be used as a replacement for the existing value in the cache. Any existing cache entry is not changed except for its value. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>f</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] A callable taking two arguments, <emphasis>k</emphasis> and the key found in the cache (in that order). If <emphasis>f</emphasis> returns true, then the update will continue. If <emphasis>f</emphasis> returns false, then the update will not succeed.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="note"><para>The function will &quot;touch&quot; the entry and mark it as recently used if the key was found in the cache. </para></simplesect>
<simplesect kind="note"><para>The difference to the other overload of the <emphasis>insert</emphasis> function is that this overload replaces the cached value only, while the other overload replaces the whole cache entry, updating the cache entry properties.</para></simplesect>
<simplesect kind="return"><para>This function returns <emphasis>true</emphasis> if the entry has been successfully updated, otherwise it returns <emphasis>false</emphasis>. If the entry currently is not held by the cache it is added and the return value reflects the outcome of the corresponding insert operation. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="304" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="304" bodyend="329"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a37e20a34d082e97c3237dedb6e592293" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Func</type>
          </param>
        </templateparamlist>
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::erase</definition>
        <argsstring>(Func const &amp;ep)</argsstring>
        <name>erase</name>
        <param>
          <type>Func const &amp;</type>
          <declname>ep</declname>
        </param>
        <briefdescription>
<para>Remove stored entries from the cache for which the supplied function object returns true. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ep</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] This parameter has to be a (unary) function object. It is invoked for each of the entries currently held in the cache. An entry is considered for removal from the cache whenever the value returned from this invocation is <emphasis>true</emphasis>.</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>This function returns the overall size of the removed entries (which is the sum of the values returned by the <emphasis>entry::get_size</emphasis> functions of the removed entries). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="346" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="346" bodyend="371"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1adad526bdfd166e6957c6fd63ed313f6a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::erase</definition>
        <argsstring>()</argsstring>
        <name>erase</name>
        <briefdescription>
<para>Remove all stored entries from the cache. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This function returns the overall size of the removed entries (which is the sum of the values returned by the <emphasis>entry::get_size</emphasis> functions of the removed entries). </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="379" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="379" bodyend="384"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ad6183a4c95fbfaa961e7bdd2095d2385" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>size_type</type>
        <definition>size_type hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::clear</definition>
        <argsstring>()</argsstring>
        <name>clear</name>
        <briefdescription>
<para>Clear the cache. </para>        </briefdescription>
        <detaileddescription>
<para>Unconditionally removes all stored entries from the cache. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="389" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="389" bodyend="396"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1a186026901e1d09eb817337dac6d04a8c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>statistics_type const  &amp;</type>
        <definition>statistics_type const&amp; hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::get_statistics</definition>
        <argsstring>() const</argsstring>
        <name>get_statistics</name>
        <briefdescription>
<para>Allow to access the embedded statistics instance. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>This function returns a reference to the statistics instance embedded inside this cache </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="403" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ae81ae4439c3c5104a7bd68c1133c1280" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>statistics_type &amp;</type>
        <definition>statistics_type&amp; hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::get_statistics</definition>
        <argsstring>()</argsstring>
        <name>get_statistics</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="408" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="408" bodyend="411"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1aa56941b2801f041003f17c2b6e23c578" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::touch</definition>
        <argsstring>(typename storage_type::iterator it)</argsstring>
        <name>touch</name>
        <param>
          <type>typename storage_type::iterator</type>
          <declname>it</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="415" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="415" bodyend="422"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1cache_1_1lru__cache_1ac13c029331987a5f5459d8639469c2cf" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::cache::lru_cache&lt; Key, Entry, Statistics &gt;::evict</definition>
        <argsstring>()</argsstring>
        <name>evict</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="424" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="424" bodyend="430"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>The <emphasis><ref refid="classhpx_1_1util_1_1cache_1_1lru__cache" kindref="compound">lru_cache</ref></emphasis> implements the basic functionality needed for a local (non-distributed) LRU cache. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="templateparam"><parameteritem>
<parameternamelist>
<parametername>Key</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the keys to use to identify the entries stored in the cache </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Entry</parametername>
</parameternamelist>
<parameterdescription>
<para>The type of the items to be held in the cache. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>Statistics</parametername>
</parameternamelist>
<parameterdescription>
<para>A (optional) type allowing to collect some basic statistics about the operation of the cache instance. The type must conform to the CacheStatistics concept. The default value is the type <emphasis><ref refid="classhpx_1_1util_1_1cache_1_1statistics_1_1no__statistics" kindref="compound">statistics::no_statistics</ref></emphasis> which does not collect any numbers, but provides empty stubs allowing the code to compile. </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <location file="libs/cache/include/hpx/cache/lru_cache.hpp" line="42" column="1" bodyfile="libs/cache/include/hpx/cache/lru_cache.hpp" bodystart="41" bodyend="439"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a92bdab3f7300f994f01b4d8fcc5ae036" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>capacity</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ad6183a4c95fbfaa961e7bdd2095d2385" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>clear</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a5b61db7b131827ec5f808eae73dfa507" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>current_size_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a1f290f9b03d0cc9ee3b75029a5e5a573" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>entry_pair</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ae89a73c911301db151fe75c3de464248" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>entry_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a37e20a34d082e97c3237dedb6e592293" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>erase</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1adad526bdfd166e6957c6fd63ed313f6a" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>erase</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ac13c029331987a5f5459d8639469c2cf" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>evict</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ac882d63832191c07d6b499e2ba17b834" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>get_entry</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a11a647a8c81c6b62c21ed14d49a79528" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>get_entry</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a186026901e1d09eb817337dac6d04a8c" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>get_statistics</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ae81ae4439c3c5104a7bd68c1133c1280" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>get_statistics</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ace9fa7bf0e426260d2c776d136f0b3e7" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>holds_key</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1aa9913e64dd98be28c5b12431cd8c9548" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>insert</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a6396f7ce7fb423c0c31c2f8c9115a00e" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>insert_nonexist</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ab14d0f56b50d29b40a273e4a368f10c2" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>key_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a39c0943bfeb53bb5f33c0160a304c4d3" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>lru_cache</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1acc37f79d115605075e9ecd0bfeea6b7c" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>lru_cache</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a458fea38a059c9adaf0b68513f97e468" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>map_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ab9eabfd7df0f194387a4b7934228a905" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>map_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1ab6e2ceae5d40f7ce6728396b63337576" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>max_size_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a7c029e73192bca59c2376e26abb0ea1c" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>reserve</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a199556764c333cd66b70415c1073d8a6" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>size</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a729b288d56dadcbcf1fbc460a6939c8f" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>size_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a91cd0e24c023acec9eddfcb8bfacd813" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>statistics_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a9f169474cf6557b251ddb4d09bdf9d53" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>statistics_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1af2f68e66fcb3b9f1226b1565f2621a68" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>storage_</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a5cb44b45dac3a6f7afa7616acd6f7f86" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>storage_type</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1aa56941b2801f041003f17c2b6e23c578" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>touch</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a5d8befc48e6bc5603351b81322fc87eb" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>update</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a53ee6e48bb742b326ff7706fea918646" prot="public" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>update_if</name></member>
      <member refid="classhpx_1_1util_1_1cache_1_1lru__cache_1a26b6f2158ce77fdc6757549b56b7796f" prot="private" virt="non-virtual"><scope>hpx::util::cache::lru_cache</scope><name>update_on_exit</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
