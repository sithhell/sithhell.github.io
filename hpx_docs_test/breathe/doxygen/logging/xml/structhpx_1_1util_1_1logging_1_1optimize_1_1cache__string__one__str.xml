<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::optimize::cache_string_one_str</compoundname>
    <includes refid="hpx_2logging_2format_2optimize_8hpp" local="no">optimize.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a1968cf9511cf32e4168bcd664ab951ce" prot="public" static="no">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">cache_string_one_str</ref></type>
        <definition>typedef cache_string_one_str hpx::util::logging::optimize::cache_string_one_str::self_type</definition>
        <argsstring></argsstring>
        <name>self_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="58" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae8884851cf5a53c0fa48c331910c8bb6" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::m_reserve_prepend</definition>
        <argsstring></argsstring>
        <name>m_reserve_prepend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="315" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="315" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a3c2d67288b44fe1c960fc99c4aa70cab" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::m_reserve_append</definition>
        <argsstring></argsstring>
        <name>m_reserve_append</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="316" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="316" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae52c8a21ebda80ec7c16c0f9943c8f50" prot="private" static="no" mutable="no">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::m_grow_size</definition>
        <argsstring></argsstring>
        <name>m_grow_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="317" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="317" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1afb95d357241a5a361808871b7adf36b0" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::optimize::cache_string_one_str::m_str</definition>
        <argsstring></argsstring>
        <name>m_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="318" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="318" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ad3d8fbcc679161ac2eadebc9e3a33aa0" prot="private" static="no" mutable="yes">
        <type>bool</type>
        <definition>bool hpx::util::logging::optimize::cache_string_one_str::m_full_msg_computed</definition>
        <argsstring></argsstring>
        <name>m_full_msg_computed</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="321" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="321" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a81fff420b06166583e1a62b96702f7e8" prot="private" static="no" mutable="yes">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::optimize::cache_string_one_str::m_full_msg</definition>
        <argsstring></argsstring>
        <name>m_full_msg</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="322" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="322" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1abb045ba4f9dfec87b5421aaa1e0b45cf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::optimize::cache_string_one_str::cache_string_one_str</definition>
        <argsstring>(std::size_t reserve_prepend_, std::size_t reserve_append_, std::size_t grow_size_=10)</argsstring>
        <name>cache_string_one_str</name>
        <param>
          <type>std::size_t</type>
          <declname>reserve_prepend_</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>reserve_append_</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>grow_size_</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>reserve_prepend</parametername>
</parameternamelist>
<parameterdescription>
<para>- how many chars to have space to prepend by default </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve_append</parametername>
</parameternamelist>
<parameterdescription>
<para>- how many chars to have space to append by default </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grow_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- in case we add a string and there&apos;s no room for it, with how much should we grow? We&apos;ll grow this much in addition to the added string<itemizedlist>
<listitem><para>in the needed direction </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="68" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="68" bodyend="75"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a59cade0259a2c00a4beaa04514bc0a39" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::optimize::cache_string_one_str::cache_string_one_str</definition>
        <argsstring>(const std::string &amp;msg, std::size_t reserve_prepend_=10, std::size_t reserve_append_=10, std::size_t grow_size_=10)</argsstring>
        <name>cache_string_one_str</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>reserve_prepend_</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>reserve_append_</declname>
          <defval>10</defval>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>grow_size_</declname>
          <defval>10</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>msg</parametername>
</parameternamelist>
<parameterdescription>
<para>- the message that is originally cached </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve_prepend</parametername>
</parameternamelist>
<parameterdescription>
<para>- how many chars to have space to prepend by default </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>reserve_append</parametername>
</parameternamelist>
<parameterdescription>
<para>- how many chars to have space to append by default </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>grow_size</parametername>
</parameternamelist>
<parameterdescription>
<para>- in case we add a string and there&apos;s no room for it, with how much should we grow? We&apos;ll grow this much in addition to the added string<itemizedlist>
<listitem><para>in the needed direction </para></listitem></itemizedlist>
</para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="86" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="86" bodyend="95"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1aa6d0c7a289b03e13b9035803037b61c7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::optimize::cache_string_one_str::cache_string_one_str</definition>
        <argsstring>(cache_string_one_str &amp;&amp;other)</argsstring>
        <name>cache_string_one_str</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">cache_string_one_str</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="97" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="97" bodyend="109"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1afd29729bffe2262ee8bc4c041c788f34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::optimize::cache_string_one_str::cache_string_one_str</definition>
        <argsstring>()</argsstring>
        <name>cache_string_one_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="111" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="111" bodyend="117"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a751758d59c264e01ce23bb4dee1f9817" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::set_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>set_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="119" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1affa1105dccf0c1233cfa0b354c87790f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::reserve_prepend</definition>
        <argsstring>() const</argsstring>
        <name>reserve_prepend</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="128" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="128" bodyend="131"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1aaf29acdb9662763c703430e3e7902e58" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::reserve_append</definition>
        <argsstring>() const</argsstring>
        <name>reserve_append</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="132" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="132" bodyend="135"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a2c097849a37453403187da240e3d1498" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>std::size_t hpx::util::logging::optimize::cache_string_one_str::grow_size</definition>
        <argsstring>() const</argsstring>
        <name>grow_size</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="136" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="136" bodyend="139"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a18e0b3b0f92bde525802b0bf169b3146" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::reserve_prepend</definition>
        <argsstring>(std::size_t new_size)</argsstring>
        <name>reserve_prepend</name>
        <param>
          <type>std::size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="141" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="141" bodyend="144"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1af13c2f46b79e4355bb69fabef5377a5b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::reserve_append</definition>
        <argsstring>(std::size_t new_size)</argsstring>
        <name>reserve_append</name>
        <param>
          <type>std::size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="146" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="146" bodyend="149"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a53feaea65a7534fa98ec27756aa733fb" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::grow_size</definition>
        <argsstring>(std::size_t new_size)</argsstring>
        <name>grow_size</name>
        <param>
          <type>std::size_t</type>
          <declname>new_size</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="151" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="151" bodyend="154"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a37b8e6a192ae7d67ac112b178b631e40" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::prepend_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>prepend_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="167" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="167" bodyend="184"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1af55f4d519c6dc1101f0247821b515a94" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::append_string</definition>
        <argsstring>(const char *str)</argsstring>
        <name>append_string</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="185" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="185" bodyend="202"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a7fb524feb9ac5e4881fb60a01a41a9b2" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::prepend_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>prepend_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>pre-pends a string (inserts it at the beginning) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="207" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="207" bodyend="223"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1abf6bee1ae2126974f9276ed4a9c16faf" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::append_string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>append_string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>appends a string (inserts it at the end) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="228" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="228" bodyend="244"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a69e82cb1499e0d0cfe0569f2d739b167" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class stream_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::to_stream</definition>
        <argsstring>(stream_type &amp;stream) const</argsstring>
        <name>to_stream</name>
        <param>
          <type>stream_type &amp;</type>
          <declname>stream</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>writes the current cached contents to a stream </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="250" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="250" bodyend="254"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ac575c59b065d4d120cdc9dd4d20e5e97" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::util::logging::optimize::cache_string_one_str::full_string</definition>
        <argsstring>() const</argsstring>
        <name>full_string</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>returns the full string </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="259" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="259" bodyend="268"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a78a39e23d9d3c1ec2bce7c5c6233261d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::optimize::cache_string_one_str::operator const std::string &amp;</definition>
        <argsstring>() const</argsstring>
        <name>operator const std::string &amp;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="270" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="270" bodyend="273"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae7333b40bbff2300f7a6ff944bd61be7" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t hpx::util::logging::optimize::cache_string_one_str::str_len</definition>
        <argsstring>(const char *str)</argsstring>
        <name>str_len</name>
        <param>
          <type>const char *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="157" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="157" bodyend="160"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a43c10205fe4026d54efb08b2f93118b4" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>std::size_t</type>
        <definition>static std::size_t hpx::util::logging::optimize::cache_string_one_str::str_len</definition>
        <argsstring>(const wchar_t *str)</argsstring>
        <name>str_len</name>
        <param>
          <type>const wchar_t *</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="161" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="161" bodyend="164"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a4f01d5983efd74d18610ad78c282de98" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::optimize::cache_string_one_str::resize_string</definition>
        <argsstring>(std::size_t reserve_prepend_, std::size_t reserve_append_)</argsstring>
        <name>resize_string</name>
        <param>
          <type>std::size_t</type>
          <declname>reserve_prepend_</declname>
        </param>
        <param>
          <type>std::size_t</type>
          <declname>reserve_append_</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="276" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="276" bodyend="306"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ada1501283b67a24771481308363a8c8f" prot="private" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::optimize::cache_string_one_str::is_string_set</definition>
        <argsstring>() const</argsstring>
        <name>is_string_set</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="309" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="309" bodyend="312"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Optimizes the formatting for prepending and/or appending strings to the original message. </para>    </briefdescription>
    <detaileddescription>
<para>It keeps all the modified message in one string. Useful if some formatter needs to access the whole string at once.</para><para>reserve_prepend() - the size that is reserved for prepending (similar to string::reserve function) reserve_append() - the size that is reserved for appending (similar to string::reserve function)</para><para>Note : as strings are prepended, reserve_prepend() shrinks. Same goes for append. </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/optimize.hpp" line="57" column="1" bodyfile="libs/logging/include/hpx/logging/format/optimize.hpp" bodystart="56" bodyend="323"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1af55f4d519c6dc1101f0247821b515a94" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>append_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1abf6bee1ae2126974f9276ed4a9c16faf" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>append_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1abb045ba4f9dfec87b5421aaa1e0b45cf" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>cache_string_one_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a59cade0259a2c00a4beaa04514bc0a39" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>cache_string_one_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1aa6d0c7a289b03e13b9035803037b61c7" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>cache_string_one_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1afd29729bffe2262ee8bc4c041c788f34" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>cache_string_one_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ac575c59b065d4d120cdc9dd4d20e5e97" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>full_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a2c097849a37453403187da240e3d1498" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>grow_size</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a53feaea65a7534fa98ec27756aa733fb" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>grow_size</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ada1501283b67a24771481308363a8c8f" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>is_string_set</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a81fff420b06166583e1a62b96702f7e8" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_full_msg</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ad3d8fbcc679161ac2eadebc9e3a33aa0" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_full_msg_computed</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae52c8a21ebda80ec7c16c0f9943c8f50" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_grow_size</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a3c2d67288b44fe1c960fc99c4aa70cab" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_reserve_append</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae8884851cf5a53c0fa48c331910c8bb6" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_reserve_prepend</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1afb95d357241a5a361808871b7adf36b0" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>m_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a78a39e23d9d3c1ec2bce7c5c6233261d" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>operator const std::string &amp;</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a37b8e6a192ae7d67ac112b178b631e40" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>prepend_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a7fb524feb9ac5e4881fb60a01a41a9b2" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>prepend_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1aaf29acdb9662763c703430e3e7902e58" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>reserve_append</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1af13c2f46b79e4355bb69fabef5377a5b" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>reserve_append</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1affa1105dccf0c1233cfa0b354c87790f" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>reserve_prepend</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a18e0b3b0f92bde525802b0bf169b3146" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>reserve_prepend</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a4f01d5983efd74d18610ad78c282de98" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>resize_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a1968cf9511cf32e4168bcd664ab951ce" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>self_type</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a751758d59c264e01ce23bb4dee1f9817" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>set_string</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1ae7333b40bbff2300f7a6ff944bd61be7" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>str_len</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a43c10205fe4026d54efb08b2f93118b4" prot="private" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>str_len</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str_1a69e82cb1499e0d0cfe0569f2d739b167" prot="public" virt="non-virtual"><scope>hpx::util::logging::optimize::cache_string_one_str</scope><name>to_stream</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
