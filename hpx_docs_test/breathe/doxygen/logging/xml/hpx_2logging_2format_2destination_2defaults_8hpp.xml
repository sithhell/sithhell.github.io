<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hpx_2logging_2format_2destination_2defaults_8hpp" kind="file" language="C++">
    <compoundname>defaults.hpp</compoundname>
    <includes local="no">hpx/config.hpp</includes>
    <includes local="no">hpx/logging/detail/fwd.hpp</includes>
    <includes local="no">hpx/logging/detail/manipulator.hpp</includes>
    <includes refid="hpx_2logging_2format_2destination_2convert__destination_8hpp" local="no">hpx/logging/format/destination/convert_destination.hpp</includes>
    <includes refid="hpx_2logging_2format_2destination_2file_8hpp" local="no">hpx/logging/format/destination/file.hpp</includes>
    <includes local="no">iostream</includes>
    <includedby refid="hpx_2logging_2format_8hpp" local="no">libs/logging/include/hpx/logging/format.hpp</includedby>
    <includedby refid="compatibility_2hpx_2util_2logging_2format_2destination_2defaults_8hpp" local="no">libs/logging/include_compatibility/hpx/util/logging/format/destination/defaults.hpp</includedby>
    <incdepgraph>
      <node id="370">
        <label>libs/logging/include/hpx/logging/format/destination/defaults.hpp</label>
        <link refid="hpx_2logging_2format_2destination_2defaults_8hpp"/>
        <childnode refid="371" relation="include">
        </childnode>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="377" relation="include">
        </childnode>
        <childnode refid="383" relation="include">
        </childnode>
      </node>
      <node id="372">
        <label>hpx/logging/detail/fwd.hpp</label>
      </node>
      <node id="373">
        <label>hpx/logging/detail/manipulator.hpp</label>
      </node>
      <node id="376">
        <label>string</label>
      </node>
      <node id="371">
        <label>hpx/config.hpp</label>
      </node>
      <node id="380">
        <label>fstream</label>
      </node>
      <node id="375">
        <label>ostream</label>
      </node>
      <node id="374">
        <label>hpx/logging/format/destination/convert_destination.hpp</label>
        <link refid="hpx_2logging_2format_2destination_2convert__destination_8hpp_source"/>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="375" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="377">
        <label>hpx/logging/format/destination/file.hpp</label>
        <link refid="hpx_2logging_2format_2destination_2file_8hpp_source"/>
        <childnode refid="372" relation="include">
        </childnode>
        <childnode refid="373" relation="include">
        </childnode>
        <childnode refid="374" relation="include">
        </childnode>
        <childnode refid="378" relation="include">
        </childnode>
        <childnode refid="379" relation="include">
        </childnode>
        <childnode refid="380" relation="include">
        </childnode>
        <childnode refid="381" relation="include">
        </childnode>
        <childnode refid="382" relation="include">
        </childnode>
        <childnode refid="376" relation="include">
        </childnode>
      </node>
      <node id="383">
        <label>iostream</label>
      </node>
      <node id="382">
        <label>mutex</label>
      </node>
      <node id="378">
        <label>boost/config.hpp</label>
      </node>
      <node id="379">
        <label>boost/smart_ptr/detail/spinlock.hpp</label>
      </node>
      <node id="381">
        <label>memory</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="395">
        <label>libs/logging/include_compatibility/hpx/util/logging/writer/named_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2writer_2named__write_8hpp_source"/>
      </node>
      <node id="386">
        <label>libs/logging/include/hpx/logging/format_fwd.hpp</label>
        <link refid="hpx_2logging_2format__fwd_8hpp_source"/>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="389" relation="include">
        </childnode>
      </node>
      <node id="393">
        <label>libs/logging/include/hpx/logging/format/named_write.hpp</label>
        <link refid="hpx_2logging_2format_2named__write_8hpp_source"/>
        <childnode refid="394" relation="include">
        </childnode>
      </node>
      <node id="396">
        <label>libs/logging/include_compatibility/hpx/util/logging/format.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_8hpp_source"/>
      </node>
      <node id="384">
        <label>libs/logging/include/hpx/logging/format/destination/defaults.hpp</label>
        <link refid="hpx_2logging_2format_2destination_2defaults_8hpp"/>
        <childnode refid="385" relation="include">
        </childnode>
        <childnode refid="397" relation="include">
        </childnode>
      </node>
      <node id="389">
        <label>libs/logging/include_compatibility/hpx/util/logging/format_fwd.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format__fwd_8hpp_source"/>
      </node>
      <node id="390">
        <label>libs/logging/include/hpx/logging/writer/format_write.hpp</label>
        <link refid="hpx_2logging_2writer_2format__write_8hpp_source"/>
        <childnode refid="391" relation="include">
        </childnode>
      </node>
      <node id="385">
        <label>libs/logging/include/hpx/logging/format.hpp</label>
        <link refid="hpx_2logging_2format_8hpp"/>
        <childnode refid="386" relation="include">
        </childnode>
        <childnode refid="390" relation="include">
        </childnode>
        <childnode refid="392" relation="include">
        </childnode>
        <childnode refid="396" relation="include">
        </childnode>
      </node>
      <node id="388">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/named_write_fwd.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2named__write__fwd_8hpp_source"/>
      </node>
      <node id="397">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/destination/defaults.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2destination_2defaults_8hpp_source"/>
      </node>
      <node id="391">
        <label>libs/logging/include_compatibility/hpx/util/logging/writer/format_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2writer_2format__write_8hpp_source"/>
      </node>
      <node id="392">
        <label>libs/logging/include/hpx/logging/writer/named_write.hpp</label>
        <link refid="hpx_2logging_2writer_2named__write_8hpp_source"/>
        <childnode refid="393" relation="include">
        </childnode>
        <childnode refid="387" relation="include">
        </childnode>
        <childnode refid="395" relation="include">
        </childnode>
      </node>
      <node id="394">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/named_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2named__write_8hpp_source"/>
      </node>
      <node id="387">
        <label>libs/logging/include/hpx/logging/format/named_write_fwd.hpp</label>
        <link refid="hpx_2logging_2format_2named__write__fwd_8hpp_source"/>
        <childnode refid="388" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1destination_1_1cout" prot="public">hpx::util::logging::destination::cout</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1destination_1_1cerr" prot="public">hpx::util::logging::destination::cerr</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" prot="public">hpx::util::logging::destination::stream</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1destination_1_1dbg__window" prot="public">hpx::util::logging::destination::dbg_window</innerclass>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1util">hpx::util</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1logging">hpx::util::logging</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1logging_1_1destination">hpx::util::logging::destination</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>destination_defaults.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boost<sp/>Logging<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>John<sp/>Torjo,<sp/>www.torjo.com</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>John<sp/>Torjo<sp/>(see<sp/>www.torjo.com<sp/>for<sp/>email)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://www.boost.org<sp/>for<sp/>updates,<sp/>documentation,<sp/>and<sp/>revision<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://www.torjo.com/log2/<sp/>for<sp/>more<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>JT28092007_destination_defaults_HPP_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JT28092007_destination_defaults_HPP_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/logging/detail/fwd.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/logging/detail/manipulator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/logging/format/destination/convert_destination.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/logging/format/destination/file.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iostream&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">logging<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">destination<sp/>{</highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structhpx_1_1util_1_1logging_1_1destination_1_1cout" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cout" kindref="compound">cout</ref><sp/>:<sp/>is_generic</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>msg_type&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="34"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert::write(msg,<sp/>std::cout);</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cout" kindref="compound">cout</ref>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="39"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight></codeline>
<codeline lineno="47" refid="structhpx_1_1util_1_1logging_1_1destination_1_1cerr" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cerr" kindref="compound">cerr</ref><sp/>:<sp/>is_generic</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>msg_type&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="50"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="51"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert::write(msg,<sp/>std::cerr);</highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="53"><highlight class="normal"></highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cerr" kindref="compound">cerr</ref>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="55"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="59"><highlight class="normal"></highlight></codeline>
<codeline lineno="67" refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" kindref="compound">stream</ref></highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>is_generic</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/>,<sp/>non_const_context&lt;std::ostream*&gt;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::ostream<sp/>stream_type;</highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>non_const_context&lt;stream_type*&gt;<sp/>non_const_context_base;</highlight></codeline>
<codeline lineno="73"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" kindref="compound">stream</ref>(stream_type*<sp/>s)</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>non_const_context_base(s)</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" kindref="compound">stream</ref>(stream_type&amp;<sp/>s)</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>non_const_context_base(&amp;s)</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>msg_type&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="84"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(non_const_context_base::context())</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>convert::write(msg,<sp/>*non_const_context_base::context());</highlight></codeline>
<codeline lineno="87"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="88"><highlight class="normal"></highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream" kindref="compound">stream</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="90"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>non_const_context_base::context()<sp/>!=</highlight></codeline>
<codeline lineno="92"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>other.non_const_context_base::context();</highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="94"><highlight class="normal"></highlight></codeline>
<codeline lineno="98" refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream_1add67ef1baa1430c7d0d0b793321b855b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream_1add67ef1baa1430c7d0d0b793321b855b" kindref="member">set_stream</ref>(stream_type*<sp/>p)</highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>non_const_context_base::context()<sp/>=<sp/>p;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="102"><highlight class="normal"></highlight></codeline>
<codeline lineno="106" refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream_1a2decdb055ed2a130fbdf4d164a5aae28" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1stream_1a2decdb055ed2a130fbdf4d164a5aae28" kindref="member">clear</ref>()</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>set_stream(</highlight><highlight class="keyword">nullptr</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="109"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="111"><highlight class="normal"></highlight></codeline>
<codeline lineno="117" refid="structhpx_1_1util_1_1logging_1_1destination_1_1dbg__window" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1dbg__window" kindref="compound">dbg_window</ref><sp/>:<sp/>is_generic</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>operator()(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>msg_type&amp;<sp/>msg)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="120"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="121"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>HPX_WINDOWS</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>::OutputDebugStringA(convert::do_convert(msg,<sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1into" kindref="compound">into&lt;const char*&gt;</ref>()));</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>non<sp/>windows<sp/>-<sp/>dump<sp/>to<sp/>console</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::cout<sp/>&lt;&lt;<sp/>msg;</highlight></codeline>
<codeline lineno="126"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="128"><highlight class="normal"></highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1dbg__window" kindref="compound">dbg_window</ref>&amp;)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="130"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="134"><highlight class="normal"></highlight></codeline>
<codeline lineno="135"><highlight class="normal">}}}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util::logging::destination</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/logging/include/hpx/logging/format/destination/defaults.hpp"/>
  </compounddef>
</doxygen>
