<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1logging_1_1format__and__write" kind="namespace" language="C++">
    <compoundname>hpx::util::logging::format_and_write</compoundname>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1format__and__write_1_1simple" prot="public">hpx::util::logging::format_and_write::simple</innerclass>
    <briefdescription>
<para>The <computeroutput>format_and_write</computeroutput> classes know how to call the formatter and destination <computeroutput>objects</computeroutput>. </para>    </briefdescription>
    <detaileddescription>
<para>Usually you&apos;ll be happy with the <ref refid="structhpx_1_1util_1_1logging_1_1format__and__write_1_1simple" kindref="compound">format_and_write::simple</ref> class - which simply calls <computeroutput>operator()</computeroutput> on the formatters , and <computeroutput>operator()</computeroutput> on the destinations.</para><para>Note that usually the formatter and destination class just have an <computeroutput>operator()</computeroutput>, which when called, formats the message or writes it to a destination. In case your formatters/destinations are more complex than that (for instance, more than a member function needs to be called), you&apos;ll have to implement your own format_and_write class. </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format.hpp" line="64" column="1"/>
  </compounddef>
</doxygen>
