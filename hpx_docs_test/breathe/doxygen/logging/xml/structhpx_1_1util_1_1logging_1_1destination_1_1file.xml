<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1destination_1_1file" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::destination::file</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">non_const_context&lt; detail::file_info &gt;</basecompoundref>
    <includes refid="hpx_2logging_2format_2destination_2file_8hpp" local="no">file.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1abb5c4afa2d11fd7e4e4fa5272fcfddcf" prot="public" static="no">
        <type>non_const_context&lt; detail::file_info &gt;</type>
        <definition>typedef non_const_context&lt;detail::file_info&gt; hpx::util::logging::destination::file::non_const_context_base</definition>
        <argsstring></argsstring>
        <name>non_const_context_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="112" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="112" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a2237a98a5777706e0ee5bef849116ac5" prot="public" static="no">
        <type>boost::detail::spinlock</type>
        <definition>typedef boost::detail::spinlock hpx::util::logging::destination::file::mutex_type</definition>
        <argsstring></argsstring>
        <name>mutex_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="113" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="113" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-static-attrib">
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a9096f0ca31f2cd9c2edfb743f25c8dd1" prot="public" static="yes" mutable="no">
        <type>mutex_type</type>
        <definition>mutex_type hpx::util::logging::destination::file::mtx_</definition>
        <argsstring></argsstring>
        <name>mtx_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="156" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="156" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1aca245f7769520e7b7f9110fa65f3547a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::destination::file::file</definition>
        <argsstring>(const std::string &amp;file_name, file_settings set=file_settings())</argsstring>
        <name>file</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>file_name</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1file__settings" kindref="compound">file_settings</ref></type>
          <declname>set</declname>
          <defval><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1file__settings" kindref="compound">file_settings</ref>()</defval>
        </param>
        <briefdescription>
<para>constructs the file destination </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>file_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the file </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] file settings - see <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1file__settings" kindref="compound">file_settings</ref> class, and dealing_with_flags </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="122" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a10d5f034eebc7e54f4f1700f9f58f04e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::file::operator()</definition>
        <argsstring>(const msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="127" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="127" bodyend="137"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a52a89e8dd58f8d3d5895df690c6c03f7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::destination::file::operator==</definition>
        <argsstring>(const file &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1file" kindref="compound">file</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="139" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="139" bodyend="143"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a6c0a2587211f45451a022ff4bdd24d72" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::file::configure</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>configure</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>configure through script right now, you can only specify the file name </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="148" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="148" bodyend="154"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Writes the string to a file. </para>    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="29">
        <label>is_generic</label>
      </node>
      <node id="30">
        <label>non_const_context&lt; detail::file_info &gt;</label>
      </node>
      <node id="28">
        <label>hpx::util::logging::destination::file</label>
        <link refid="structhpx_1_1util_1_1logging_1_1destination_1_1file"/>
        <childnode refid="29" relation="public-inheritance">
        </childnode>
        <childnode refid="30" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="32">
        <label>is_generic</label>
      </node>
      <node id="33">
        <label>non_const_context&lt; detail::file_info &gt;</label>
      </node>
      <node id="31">
        <label>hpx::util::logging::destination::file</label>
        <link refid="structhpx_1_1util_1_1logging_1_1destination_1_1file"/>
        <childnode refid="32" relation="public-inheritance">
        </childnode>
        <childnode refid="33" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/destination/file.hpp" line="111" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/file.hpp" bodystart="108" bodyend="157"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a6c0a2587211f45451a022ff4bdd24d72" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>configure</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1aca245f7769520e7b7f9110fa65f3547a" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>file</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a9096f0ca31f2cd9c2edfb743f25c8dd1" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>mtx_</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a2237a98a5777706e0ee5bef849116ac5" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>mutex_type</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1abb5c4afa2d11fd7e4e4fa5272fcfddcf" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>non_const_context_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a10d5f034eebc7e54f4f1700f9f58f04e" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1file_1a52a89e8dd58f8d3d5895df690c6c03f7" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::file</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
