<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend" kind="namespace" language="C++">
    <compoundname>hpx::util::logging::formatter::convert::prepend</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend_1ae278a950e9be2e45c7eb637f78b8ad87" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::prepend::write</definition>
        <argsstring>(const char *src, std::string &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="50" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="50" bodyend="57"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend_1a0f7fd19e71966c45f5ad2d1248326588" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::prepend::write</definition>
        <argsstring>(const std::string &amp;src, std::string &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="58" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="58" bodyend="61"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend_1afbe1657dcf9d21edb438a1940b06b498" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::prepend::write</definition>
        <argsstring>(const std::string &amp;src, hpx::util::logging::optimize::cache_string_one_str &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">hpx::util::logging::optimize::cache_string_one_str</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="62" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="62" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend_1a8650ee215430530b84d88c10ead237b4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::prepend::write</definition>
        <argsstring>(const char *src, hpx::util::logging::optimize::cache_string_one_str &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">hpx::util::logging::optimize::cache_string_one_str</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="68" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="68" bodyend="72"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Example : write_time </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="48" column="1"/>
  </compounddef>
</doxygen>
