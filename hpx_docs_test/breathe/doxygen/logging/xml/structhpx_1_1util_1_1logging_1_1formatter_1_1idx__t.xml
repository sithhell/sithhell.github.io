<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::idx_t</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">formatter::non_const_context&lt; std::uint64_t &gt;</basecompoundref>
    <includes refid="hpx_2logging_2format_2formatter_2defaults_8hpp" local="no">defaults.hpp</includes>
    <templateparamlist>
      <param>
        <type>class convert</type>
        <defval><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1do__convert__format_1_1prepend" kindref="compound">do_convert_format::prepend</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ad4fffec4f2f61fbf98f2e9967a8feb27" prot="public" static="no">
        <type>formatter::non_const_context&lt; std::uint64_t &gt;</type>
        <definition>typedef formatter::non_const_context&lt;std::uint64_t&gt; hpx::util::logging::formatter::idx_t&lt; convert &gt;::non_const_context_base</definition>
        <argsstring></argsstring>
        <name>non_const_context_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="63" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1a88c52c353f7d1a29b65393c8189c6a73" prot="public" static="no">
        <type>convert</type>
        <definition>typedef convert hpx::util::logging::formatter::idx_t&lt; convert &gt;::convert_type</definition>
        <argsstring></argsstring>
        <name>convert_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="64" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="64" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1a337464afc92ed7faa049477b6bfff45b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::formatter::idx_t&lt; convert &gt;::idx_t</definition>
        <argsstring>()</argsstring>
        <name>idx_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="66" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="66" bodyend="69"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ae65d405dc2d9fe8f5ee8193e93e20766" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::idx_t&lt; convert &gt;::operator()</definition>
        <argsstring>(msg_type &amp;str) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="70" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="70" bodyend="77"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ae95da3ae6b8928cb4fa312111d3b415d" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::formatter::idx_t&lt; convert &gt;::operator==</definition>
        <argsstring>(const idx_t &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t" kindref="compound">idx_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="79" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="79" bodyend="82"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>prefixes each message with an index. </para>    </briefdescription>
    <detaileddescription>
<para>Example: <programlisting><codeline><highlight class="normal">L_<sp/>&lt;&lt;<sp/>&quot;my<sp/>message&quot;;</highlight></codeline>
<codeline><highlight class="normal">L_<sp/>&lt;&lt;<sp/>&quot;my<sp/>2nd<sp/>message&quot;;</highlight></codeline>
</programlisting></para><para>This will output something similar to:</para><para><programlisting><codeline><highlight class="normal">[1]<sp/>my<sp/>message</highlight></codeline>
<codeline><highlight class="normal">[2]<sp/>my<sp/>2nd<sp/>message</highlight></codeline>
</programlisting></para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convert</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] In case there needs to be a conversion between std::(w)string and the string that holds your logged message. See convert_format. For instance, you might use <ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">a cached_string class</ref> (see <ref refid="namespacehpx_1_1util_1_1logging_1_1optimize" kindref="compound">optimize namespace</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="45">
        <label>is_generic</label>
      </node>
      <node id="44">
        <label>hpx::util::logging::formatter::idx_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t"/>
        <childnode refid="45" relation="public-inheritance">
        </childnode>
        <childnode refid="46" relation="public-inheritance">
        </childnode>
      </node>
      <node id="46">
        <label>formatter::non_const_context&lt; std::uint64_t &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="48">
        <label>is_generic</label>
      </node>
      <node id="47">
        <label>hpx::util::logging::formatter::idx_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t"/>
        <childnode refid="48" relation="public-inheritance">
        </childnode>
        <childnode refid="49" relation="public-inheritance">
        </childnode>
      </node>
      <node id="49">
        <label>formatter::non_const_context&lt; std::uint64_t &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" line="61" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/defaults.hpp" bodystart="58" bodyend="83"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1a88c52c353f7d1a29b65393c8189c6a73" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::idx_t</scope><name>convert_type</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1a337464afc92ed7faa049477b6bfff45b" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::idx_t</scope><name>idx_t</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ad4fffec4f2f61fbf98f2e9967a8feb27" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::idx_t</scope><name>non_const_context_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ae65d405dc2d9fe8f5ee8193e93e20766" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::idx_t</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1idx__t_1ae95da3ae6b8928cb4fa312111d3b415d" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::idx_t</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
