<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::named_spacer_t</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">non_const_context&lt; detail::named_spacer_context&lt; convert &gt; &gt;</basecompoundref>
    <includes refid="hpx_2logging_2format_2formatter_2named__spacer_8hpp" local="no">named_spacer.hpp</includes>
    <templateparamlist>
      <param>
        <type>class</type>
        <declname>convert</declname>
        <defname>convert</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a755195a99cbc802c6ddda25052dcb424" prot="public" static="no">
        <type>non_const_context&lt; detail::named_spacer_context&lt; convert &gt; &gt;</type>
        <definition>typedef non_const_context&lt;detail::named_spacer_context&lt;convert&gt; &gt; hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::context_base</definition>
        <argsstring></argsstring>
        <name>context_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="261" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="261" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a314ea2eeee1ee70e24f7953a16ae737d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::named_spacer_t</definition>
        <argsstring>(const std::string &amp;str=std::string())</argsstring>
        <name>named_spacer_t</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="263" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="263" bodyend="267"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a82135341c513af111cc2d31f03cd5338" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kindref="compound">named_spacer_t</ref> &amp;</type>
        <definition>named_spacer_t&amp; hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="269" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="269" bodyend="273"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1af3fb93a1ade5bb518662976c6d998ed7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class formatter</type>
          </param>
        </templateparamlist>
        <type><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kindref="compound">named_spacer_t</ref> &amp;</type>
        <definition>named_spacer_t&amp; hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::add</definition>
        <argsstring>(const std::string &amp;name, formatter fmt)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>formatter</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="276" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="276" bodyend="280"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a4a6b292d01cd1208558b9f2d01f4998b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::del</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>del</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="282" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="282" bodyend="285"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a1e7629f2954fb12483fc0fcec1143017" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::configure_inner</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;configure_str)</argsstring>
        <name>configure_inner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configure_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="287" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="287" bodyend="291"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1ad7488be991e5d2a447c7198dc77205ca" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::operator()</definition>
        <argsstring>(msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="293" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="293" bodyend="296"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a373ec33579d4638d47d241600da866b1" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;::operator==</definition>
        <argsstring>(const named_spacer_t &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kindref="compound">named_spacer_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="298" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="298" bodyend="302"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows you to contain multiple formatters, and specify a spacer between them. You have a spacer string, and within it, you can escape your contained formatters. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;hpx/logging/format/formatter/named_spacer.hpp&gt;</highlight></codeline>
</programlisting></para><para>This allows you:<itemizedlist>
<listitem><para>to hold multiple formatters</para></listitem><listitem><para>each formatter is given a name, when being added</para></listitem><listitem><para>you have a spacer string, which contains what is to be prepended or appended to the string (by default, prepended)</para></listitem><listitem><para>a formatter is escaped with <computeroutput>&apos;%&apos;</computeroutput> chars, like this <computeroutput>&quot;%name%&quot;</computeroutput> </para></listitem><listitem><para>if you want to write the <computeroutput>&apos;%&apos;</computeroutput>, just double it, like this: <computeroutput>&quot;this %% gets written&quot;</computeroutput></para></listitem></itemizedlist>
</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">#define<sp/>L_<sp/>HPX_LOG_USE_LOG_IF_FILTER(g_l(),<sp/>g_log_filter()-&gt;is_enabled()<sp/>)</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">g_l()-&gt;writer().add_formatter(<sp/>formatter::named_spacer(&quot;[%index%]<sp/>%time%<sp/>(T%thread%)<sp/>&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;index&quot;,<sp/>formatter::idx())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;thread&quot;,<sp/>formatter::thread_id())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;time&quot;,<sp/>formatter::time(&quot;$mm&quot;))<sp/>);</highlight></codeline>
</programlisting></para><para>Assuming you&apos;d use the above in code <programlisting><codeline><highlight class="normal">int<sp/>i<sp/>=<sp/>1;</highlight></codeline>
<codeline><highlight class="normal">L_<sp/>&lt;&lt;<sp/>&quot;this<sp/>is<sp/>so<sp/>cool<sp/>&quot;<sp/>&lt;&lt;<sp/>i++;</highlight></codeline>
<codeline><highlight class="normal">L_<sp/>&lt;&lt;<sp/>&quot;this<sp/>is<sp/>so<sp/>cool<sp/>again<sp/>&quot;<sp/>&lt;&lt;<sp/>i++;</highlight></codeline>
</programlisting></para><para>You could have an output like this:</para><para><programlisting><codeline><highlight class="normal">[1]<sp/>53<sp/>(T3536)<sp/>this<sp/>is<sp/>so<sp/>cool<sp/>1</highlight></codeline>
<codeline><highlight class="normal">[2]<sp/>54<sp/>(T3536)<sp/>this<sp/>is<sp/>so<sp/>cool<sp/>again<sp/>2</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="59">
        <label>is_generic</label>
      </node>
      <node id="58">
        <label>hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t"/>
        <childnode refid="59" relation="public-inheritance">
        </childnode>
        <childnode refid="60" relation="public-inheritance">
        </childnode>
      </node>
      <node id="60">
        <label>non_const_context&lt; detail::named_spacer_context&lt; convert &gt; &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="62">
        <label>is_generic</label>
      </node>
      <node id="61">
        <label>hpx::util::logging::formatter::named_spacer_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t"/>
        <childnode refid="62" relation="public-inheritance">
        </childnode>
        <childnode refid="63" relation="public-inheritance">
        </childnode>
      </node>
      <node id="63">
        <label>non_const_context&lt; detail::named_spacer_context&lt; convert &gt; &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" line="259" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/named_spacer.hpp" bodystart="256" bodyend="303"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1af3fb93a1ade5bb518662976c6d998ed7" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>add</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a1e7629f2954fb12483fc0fcec1143017" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>configure_inner</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a755195a99cbc802c6ddda25052dcb424" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>context_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a4a6b292d01cd1208558b9f2d01f4998b" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>del</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a314ea2eeee1ee70e24f7953a16ae737d" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>named_spacer_t</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1ad7488be991e5d2a447c7198dc77205ca" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a373ec33579d4638d47d241600da866b1" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>operator==</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t_1a82135341c513af111cc2d31f03cd5338" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::named_spacer_t</scope><name>string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
