<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::writer::named_write</compoundname>
    <includes refid="hpx_2logging_2writer_2named__write_8hpp" local="no">named_write.hpp</includes>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1_1parse__destination" prot="private">hpx::util::logging::writer::named_write::parse_destination</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1_1parse__formatter" prot="private">hpx::util::logging::writer::named_write::parse_formatter</innerclass>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a9e8eb104f49c1d4627fe004fabdaff15" prot="private" static="no" mutable="no">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kindref="compound">formatter::named_spacer_t</ref>&lt; <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1do__convert__format_1_1prepend" kindref="compound">formatter::do_convert_format::prepend</ref> &gt;</type>
        <definition>formatter::named_spacer_t&lt;formatter::do_convert_format::prepend&gt; hpx::util::logging::writer::named_write::m_format_before</definition>
        <argsstring></argsstring>
        <name>m_format_before</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="416" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="416" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ae97e102e1776a75b099ae6575883bd7a" prot="private" static="no" mutable="no">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1named__spacer__t" kindref="compound">formatter::named_spacer_t</ref>&lt; <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1do__convert__format_1_1append" kindref="compound">formatter::do_convert_format::append</ref> &gt;</type>
        <definition>formatter::named_spacer_t&lt;formatter::do_convert_format::append&gt; hpx::util::logging::writer::named_write::m_format_after</definition>
        <argsstring></argsstring>
        <name>m_format_after</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="418" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="418" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a665efb5baa23b3e06e92c863ee514477" prot="private" static="no" mutable="no">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1named" kindref="compound">destination::named</ref></type>
        <definition>destination::named hpx::util::logging::writer::named_write::m_destination</definition>
        <argsstring></argsstring>
        <name>m_destination</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="419" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="419" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1abe8aa668d5b231dfd518f4752c5e3403" prot="private" static="no" mutable="no">
        <type>format_write</type>
        <definition>format_write hpx::util::logging::writer::named_write::m_writer</definition>
        <argsstring></argsstring>
        <name>m_writer</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="420" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="420" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a592f7ff320e62d06d0ef2e76cb77c2e4" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::writer::named_write::m_format_str</definition>
        <argsstring></argsstring>
        <name>m_format_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="422" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="422" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a1999431cd72002a041fa3790079b8302" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::writer::named_write::m_format_before_str</definition>
        <argsstring></argsstring>
        <name>m_format_before_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="423" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a146de3354f0a0a7f4729e42cbd367440" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::writer::named_write::m_format_after_str</definition>
        <argsstring></argsstring>
        <name>m_format_after_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="423" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="423" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a3da5f5edebd318e3428d60f7dcd9a2f7" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::writer::named_write::m_destination_str</definition>
        <argsstring></argsstring>
        <name>m_destination_str</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="424" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="424" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7a1dc838ca6f4d4a11749f3a4f88e4d3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::writer::named_write::named_write</definition>
        <argsstring>()</argsstring>
        <name>named_write</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="129" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="129" bodyend="136"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ae8f6d95417fd02e2b4bd98c06efc0803" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::format</definition>
        <argsstring>(const std::string &amp;format_str)</argsstring>
        <name>format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
        </param>
        <briefdescription>
<para>sets the format string: what should be before, and what after the original message, separated by &quot;|&quot; </para>        </briefdescription>
        <detaileddescription>
<para>Example: <linebreak/>
&quot;[%idx%] |\n&quot; - this writes &quot;[%idx%] &quot; before the message, and &quot;\n&quot; after the message</para><para>If &quot;|&quot; is not present, the whole message is prepended to the message </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="147" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="147" bodyend="162"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7dd99c7e617c05ef75612a96031cdcf8" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::format</definition>
        <argsstring>(const std::string &amp;format_before_str, const std::string &amp;format_after_str)</argsstring>
        <name>format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_before_str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_after_str</declname>
        </param>
        <briefdescription>
<para>sets the format strings (what should be before, and what after the original message) </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="167" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="167" bodyend="177"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::destination</definition>
        <argsstring>(const std::string &amp;destination_str)</argsstring>
        <name>destination</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>destination_str</declname>
        </param>
        <briefdescription>
<para>sets the destinations string - where should logged messages be outputted </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="182" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="182" bodyend="187"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ac5d0fd2af26be065befc18448b2d7104" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::write</definition>
        <argsstring>(const std::string &amp;format_str, const std::string &amp;destination_str)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>destination_str</declname>
        </param>
        <briefdescription>
<para>Specifies the formats and destinations in one step. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="191" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="191" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a48d0c986adcf282911d0149b19865126" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::util::logging::writer::named_write::format</definition>
        <argsstring>() const</argsstring>
        <name>format</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="198" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a1bb35762818e7e241b046f61745c0389" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::util::logging::writer::named_write::destination</definition>
        <argsstring>() const</argsstring>
        <name>destination</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="202" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="202" bodyend="205"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a3ab0a27c04bbc5bf46614ec11d8312a5" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::operator()</definition>
        <argsstring>(msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="207" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="207" bodyend="210"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1af6519cc05a13bbf4d1e492c9d411d370" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" kindref="member">destination</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::replace_destination</definition>
        <argsstring>(const std::string &amp;name, destination d)</argsstring>
        <name>replace_destination</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" kindref="member">destination</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Replaces a destination from the named destination. </para>        </briefdescription>
        <detaileddescription>
<para>You can use this, for instance, when you want to share a destination between multiple named writers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="218" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="218" bodyend="222"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7843456850bde3323ce377196a23be2a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class formatter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::replace_formatter</definition>
        <argsstring>(const std::string &amp;name, formatter d)</argsstring>
        <name>replace_formatter</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>formatter</type>
          <declname>d</declname>
        </param>
        <briefdescription>
<para>Replaces a formatter from the named formatter. </para>        </briefdescription>
        <detaileddescription>
<para>You can use this, for instance, when you want to share a formatter between multiple named writers. </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="230" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="230" bodyend="243"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ab93e2e7d8c3d660fa31af07ecd5d90f1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class formatter</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::add_formatter</definition>
        <argsstring>(formatter fmt)</argsstring>
        <name>add_formatter</name>
        <param>
          <type>formatter</type>
          <declname>fmt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="246" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="246" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1afc926b015eeb0b7bea09d183a5a9af44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class <ref refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" kindref="member">destination</ref></type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::add_destination</definition>
        <argsstring>(const std::string &amp;name, destination d)</argsstring>
        <name>add_destination</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" kindref="member">destination</ref></type>
          <declname>d</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="252" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="252" bodyend="255"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a2aa46b96772bb7f5777aa0a01e373f22" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class manipulator</type>
          </param>
          <param>
            <type>class parser_type</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::set_and_configure</definition>
        <argsstring>(manipulator &amp;manip, const std::string &amp;name, parser_type parser)</argsstring>
        <name>set_and_configure</name>
        <param>
          <type>manipulator &amp;</type>
          <declname>manip</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>parser_type</type>
          <declname>parser</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="344" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="344" bodyend="387"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1afdfc2ea4626b5102bb66686e90293a26" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::writer::named_write::init</definition>
        <argsstring>()</argsstring>
        <name>init</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="390" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="390" bodyend="412"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Composed of a named formatter and a named destinations. Thus, you can specify the formatting and destinations as strings. </para>    </briefdescription>
    <detaileddescription>
<para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;hpx/logging/format/named_write.hpp&gt;</highlight></codeline>
</programlisting></para><para>Contains a very easy interface for using formatters and destinations:<itemizedlist>
<listitem><para>at construction, specify 2 params: the formatter string and the destinations string</para></listitem></itemizedlist>
</para><para>Setting the formatters and destinations to write to is extremely simple:</para><para><programlisting><codeline><highlight class="normal">//<sp/>Set<sp/>the<sp/>formatters<sp/>(first<sp/>param)<sp/>and<sp/>destinatins<sp/>(second<sp/>step)<sp/>in<sp/>one<sp/>step</highlight></codeline>
<codeline><highlight class="normal">g_l()-&gt;writer().write(&quot;%time%($hh:$mm.$ss.$mili)<sp/>[%idx%]<sp/>|\n&quot;,</highlight></codeline>
<codeline><highlight class="normal">&quot;cout<sp/>file(out.txt)<sp/>debug&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>set<sp/>the<sp/>formatter(s)</highlight></codeline>
<codeline><highlight class="normal">g_l()-&gt;writer().format(&quot;%time%($hh:$mm.$ss.$mili)<sp/>[%idx%]<sp/>|\n&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>set<sp/>the<sp/>destination(s)</highlight></codeline>
<codeline><highlight class="normal">g_l()-&gt;writer().destination(&quot;cout<sp/>file(out.txt)<sp/>debug&quot;);</highlight></codeline>
</programlisting></para><sect1 id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1format_string_syntax">
<title>The syntax of the format string</title>
<para><itemizedlist>
<listitem><para>The format string specifies how the message is to be logged</para></listitem><listitem><para>Every formatter is escaped using <computeroutput>%</computeroutput><emphasis>fmt</emphasis><computeroutput>%</computeroutput><itemizedlist>
<listitem><para>Available formatters:<itemizedlist>
<listitem><para><computeroutput>&quot;%idx%&quot;</computeroutput> - writes the index of the message (formatter::idx)</para></listitem><listitem><para><computeroutput>&quot;%time%&quot;</computeroutput> - writes the time (formatter::high_precision_time)</para></listitem><listitem><para><computeroutput>&quot;%thread_id%&quot;</computeroutput> - writes the thread id (formatter::thread_id)</para></listitem><listitem><para>if you want to write <computeroutput>&quot;%&quot;</computeroutput>, double it, like this: <computeroutput>&quot;%%&quot;</computeroutput> </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem><listitem><para><computeroutput>&quot;|&quot;</computeroutput> is used to specify the original message. What is before it, is prepended to the message, what is after, is appended to the message</para></listitem><listitem><para>If a formatter is configurable, append <emphasis></emphasis>(params) to it<itemizedlist>
<listitem><para>For now, only <computeroutput>&quot;%time%&quot;</computeroutput> is configurable. For instance, <computeroutput>&quot;%time%($hh:$mm.$ss.$mili)&quot;</computeroutput> writes time like <computeroutput>&quot;21:14.24.674&quot;</computeroutput> </para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>Example: <programlisting><codeline><highlight class="normal">&quot;%time%($hh:$mm.$ss.$mili)<sp/>[%idx%]<sp/>|\n&quot;</highlight></codeline>
</programlisting></para><para>The output can look like:</para><para><programlisting><codeline><highlight class="normal">21:03.17.243<sp/>[1]<sp/>this<sp/>is<sp/>so<sp/>cool</highlight></codeline>
<codeline><highlight class="normal">21:03.17.243<sp/>[2]<sp/>first<sp/>error</highlight></codeline>
<codeline><highlight class="normal">21:03.17.243<sp/>[3]<sp/>hello,<sp/>world</highlight></codeline>
</programlisting></para></sect1>
<sect1 id="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1dest_string_syntax">
<title>The syntax of the destinations string</title>
<para><itemizedlist>
<listitem><para>The syntax of the destination string specifies where the message is to be logged<itemizedlist>
<listitem><para>Every destination is specified by name</para></listitem><listitem><para>Separate destinations by space (&apos; &apos;)</para></listitem></itemizedlist>
</para></listitem><listitem><para>Available destinations<itemizedlist>
<listitem><para><computeroutput>&quot;cout&quot;</computeroutput> - writes to std::cout (<ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cout" kindref="compound">destination::cout</ref>)</para></listitem><listitem><para><computeroutput>&quot;cerr&quot;</computeroutput> - writes to std::cerr (<ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1cerr" kindref="compound">destination::cerr</ref>)</para></listitem><listitem><para><computeroutput>&quot;debug&quot;</computeroutput> - writes to the debug window: OutputDebugString in Windows, console on Linux (<ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1dbg__window" kindref="compound">destination::dbg_window</ref>)</para></listitem><listitem><para><computeroutput>&quot;file&quot;</computeroutput> - writes to a file (<ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1file" kindref="compound">destination::file</ref>)</para></listitem></itemizedlist>
</para></listitem><listitem><para>If a destination is configurable, append <emphasis></emphasis>(params) to it<itemizedlist>
<listitem><para>Right now, <computeroutput>&quot;file&quot;</computeroutput> is configurable<itemizedlist>
<listitem><para>Append <computeroutput>(</computeroutput><emphasis>filename</emphasis><computeroutput>)</computeroutput> to them to specify the file name. Example: <computeroutput>&quot;file(out.txt)&quot;</computeroutput> will write to the out.txt file</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para></listitem></itemizedlist>
</para><para>Examples:<itemizedlist>
<listitem><para><computeroutput>&quot;file(out.txt) cout&quot;</computeroutput> - will write to a file called out.txt and to cout</para></listitem><listitem><para><computeroutput>&quot;cout debug&quot;</computeroutput> - will write to cout and debug window (see above)</para></listitem></itemizedlist>
</para><para><simplesect kind="note"><para>If you want to output to 2 files, don&apos;t use &quot;file(one.txt) file(two.txt)&quot;. This will just configure &quot;file&quot; twice, ending up with writing only to &quot;two.txt&quot; file.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>format_write_</parametername>
</parameternamelist>
<parameterdescription>
<para>the underlying format writer </para></parameterdescription>
</parameteritem>
</parameterlist>
</para></sect1>
    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/writer/named_write.hpp" line="128" column="1" bodyfile="libs/logging/include/hpx/logging/writer/named_write.hpp" bodystart="127" bodyend="425"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1afc926b015eeb0b7bea09d183a5a9af44" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>add_destination</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ab93e2e7d8c3d660fa31af07ecd5d90f1" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>add_formatter</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a8670913d068da306986ea21ac55cb57d" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>destination</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a1bb35762818e7e241b046f61745c0389" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>destination</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ae8f6d95417fd02e2b4bd98c06efc0803" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>format</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7dd99c7e617c05ef75612a96031cdcf8" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>format</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a48d0c986adcf282911d0149b19865126" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>format</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1afdfc2ea4626b5102bb66686e90293a26" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>init</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a665efb5baa23b3e06e92c863ee514477" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_destination</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a3da5f5edebd318e3428d60f7dcd9a2f7" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_destination_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ae97e102e1776a75b099ae6575883bd7a" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_format_after</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a146de3354f0a0a7f4729e42cbd367440" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_format_after_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a9e8eb104f49c1d4627fe004fabdaff15" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_format_before</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a1999431cd72002a041fa3790079b8302" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_format_before_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a592f7ff320e62d06d0ef2e76cb77c2e4" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_format_str</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1abe8aa668d5b231dfd518f4752c5e3403" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>m_writer</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7a1dc838ca6f4d4a11749f3a4f88e4d3" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>named_write</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a3ab0a27c04bbc5bf46614ec11d8312a5" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1af6519cc05a13bbf4d1e492c9d411d370" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>replace_destination</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a7843456850bde3323ce377196a23be2a" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>replace_formatter</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1a2aa46b96772bb7f5777aa0a01e373f22" prot="private" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>set_and_configure</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1writer_1_1named__write_1ac5d0fd2af26be065befc18448b2d7104" prot="public" virt="non-virtual"><scope>hpx::util::logging::writer::named_write</scope><name>write</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
