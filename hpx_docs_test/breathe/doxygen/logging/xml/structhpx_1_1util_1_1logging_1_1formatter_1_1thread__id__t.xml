<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::thread_id_t</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <includes refid="hpx_2logging_2format_2formatter_2thread__id_8hpp" local="no">thread_id.hpp</includes>
    <templateparamlist>
      <param>
        <type>class convert</type>
        <defval><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1do__convert__format_1_1prepend" kindref="compound">do_convert_format::prepend</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a5035f06f49d0e1aa4c509891ebefaf1e" prot="public" static="no">
        <type>convert</type>
        <definition>typedef convert hpx::util::logging::formatter::thread_id_t&lt; convert &gt;::convert_type</definition>
        <argsstring></argsstring>
        <name>convert_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" line="38" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a6868bf9330061accaf0232bfda9dcf2c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::thread_id_t&lt; convert &gt;::operator()</definition>
        <argsstring>(msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" line="40" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" bodystart="40" bodyend="52"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a1602ee3549903f917d13d1965a57c450" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::formatter::thread_id_t&lt; convert &gt;::operator==</definition>
        <argsstring>(const thread_id_t &amp;) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t" kindref="compound">thread_id_t</ref> &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" line="54" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" bodystart="54" bodyend="57"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Writes the thread_id to the log. </para>    </briefdescription>
    <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convert</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] In case there needs to be a conversion between std::(w)string and the string that holds your logged message. See convert_format. For instance, you might use <ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">a cached_string class</ref> (see <ref refid="namespacehpx_1_1util_1_1logging_1_1optimize" kindref="compound">optimize namespace</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="107">
        <label>hpx::util::logging::formatter::thread_id_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t"/>
        <childnode refid="108" relation="public-inheritance">
        </childnode>
      </node>
      <node id="108">
        <label>is_generic</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="109">
        <label>hpx::util::logging::formatter::thread_id_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t"/>
        <childnode refid="110" relation="public-inheritance">
        </childnode>
      </node>
      <node id="110">
        <label>is_generic</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" line="37" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/thread_id.hpp" bodystart="36" bodyend="58"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a5035f06f49d0e1aa4c509891ebefaf1e" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::thread_id_t</scope><name>convert_type</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a6868bf9330061accaf0232bfda9dcf2c" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::thread_id_t</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1thread__id__t_1a1602ee3549903f917d13d1965a57c450" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::thread_id_t</scope><name>operator==</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
