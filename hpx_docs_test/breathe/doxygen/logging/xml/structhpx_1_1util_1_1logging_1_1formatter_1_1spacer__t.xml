<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::spacer_t</compoundname>
    <basecompoundref prot="public" virt="non-virtual">original_formatter</basecompoundref>
    <includes refid="hpx_2logging_2format_2formatter_2spacer_8hpp" local="no">spacer.hpp</includes>
    <templateparamlist>
      <param>
        <type>class convert</type>
      </param>
      <param>
        <type>class original_formatter</type>
      </param>
      <param>
        <type>bool</type>
        <declname>is_generic_formatter</declname>
        <defname>is_generic_formatter</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1ac802876164b87bd7d077d9034fbaa162" prot="public" static="no">
        <type>original_formatter::param</type>
        <definition>typedef original_formatter::param hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::param</definition>
        <argsstring></argsstring>
        <name>param</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="116" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="116" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a4c0dc21bf86cdcf7406ba641b7f86983" prot="public" static="no">
        <type>original_formatter</type>
        <definition>typedef original_formatter hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::spacer_base</definition>
        <argsstring></argsstring>
        <name>spacer_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="117" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="117" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1ae2bccc75a040ce1fb27e90b65eaa3964" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::m_prefix</definition>
        <argsstring></argsstring>
        <name>m_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="147" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a75d27f33567aad77bbded320cd0019f4" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::m_suffix</definition>
        <argsstring></argsstring>
        <name>m_suffix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="147" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="147" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1aa8193ae22d2037b76bbf7928aede5966" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::spacer_t</definition>
        <argsstring>(const original_formatter &amp;fmt, const char *format_str)</argsstring>
        <name>spacer_t</name>
        <param>
          <type>const original_formatter &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="119" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="119" bodyend="123"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1afb1bbc23712c105938a3adef142800c0" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::operator()</definition>
        <argsstring>(param msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>param</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="125" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="125" bodyend="129"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a409346d1e1962dc57cffbef40a65d4b0" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;::parse_format</definition>
        <argsstring>(const std::string &amp;format_str)</argsstring>
        <name>parse_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="132" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="132" bodyend="144"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Prepends some info, and appends some info to an existing formatter. </para>    </briefdescription>
    <detaileddescription>
<para>The syntax is simple: construct a spacer by passing the original formatter, and the text to space (prepend and append). Use:<itemizedlist>
<listitem><para><computeroutput>%</computeroutput> to mean the original formatter text</para></listitem><listitem><para>anything before <computeroutput>&quot;%&quot;</computeroutput> is prepended before</para></listitem><listitem><para>anything after <computeroutput>&quot;%&quot;</computeroutput> is appended after</para></listitem></itemizedlist>
</para><para>Examples:</para><para><programlisting><codeline><highlight class="normal">//<sp/>prefix<sp/>&quot;[&quot;<sp/>before<sp/>index,<sp/>and<sp/>append<sp/>&quot;]<sp/>&quot;<sp/>after<sp/>it.</highlight></codeline>
<codeline><highlight class="normal">formatter::spacer(<sp/>formatter::idx(),<sp/>&quot;[%]<sp/>&quot;);</highlight></codeline>
<codeline></codeline>
<codeline><highlight class="normal">//<sp/>prefix<sp/>&quot;{T&quot;<sp/>before<sp/>thread_id,<sp/>and<sp/>append<sp/>&quot;}<sp/>&quot;<sp/>after<sp/>it</highlight></codeline>
<codeline><highlight class="normal">formatter::spacer(<sp/>formatter::thread_id(),<sp/>&quot;{T%}<sp/>&quot;);</highlight></codeline>
</programlisting></para><para>When adding a spacer formatter, you&apos;ll do something similar to:</para><para><programlisting><codeline><highlight class="normal">g_l()-&gt;writer().add_formatter(<sp/>formatter::spacer(<sp/>formatter::idx(),<sp/>&quot;[%]<sp/>&quot;)<sp/>);</highlight></codeline>
</programlisting></para><para>However, to make this even simpler, I allow an ever easier syntax:</para><para><programlisting><codeline><highlight class="normal">//<sp/>equivalent<sp/>to<sp/>the<sp/>above</highlight></codeline>
<codeline><highlight class="normal">g_l()-&gt;writer().add_formatter(<sp/>formatter::idx(),<sp/>&quot;[%]<sp/>&quot;<sp/>);</highlight></codeline>
</programlisting> </para>    </detaileddescription>
    <inheritancegraph>
      <node id="93">
        <label>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t"/>
        <childnode refid="94" relation="public-inheritance">
        </childnode>
      </node>
      <node id="94">
        <label>original_formatter</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="95">
        <label>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, is_generic_formatter &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t"/>
        <childnode refid="96" relation="public-inheritance">
        </childnode>
      </node>
      <node id="96">
        <label>original_formatter</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="114" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="113" bodyend="148"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1ae2bccc75a040ce1fb27e90b65eaa3964" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>m_prefix</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a75d27f33567aad77bbded320cd0019f4" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>m_suffix</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1afb1bbc23712c105938a3adef142800c0" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1ac802876164b87bd7d077d9034fbaa162" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>param</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a409346d1e1962dc57cffbef40a65d4b0" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>parse_format</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1a4c0dc21bf86cdcf7406ba641b7f86983" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>spacer_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_1aa8193ae22d2037b76bbf7928aede5966" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t</scope><name>spacer_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
