<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert" kind="namespace" language="C++">
    <compoundname>hpx::util::logging::destination::convert</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert_1ac877ae4cf1347a7d0383ebb3603d7f0d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class obj</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::destination::convert::write</definition>
        <argsstring>(const obj &amp;m, std::ostream &amp;out)</argsstring>
        <name>write</name>
        <param>
          <type>const obj &amp;</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="41" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" bodystart="41" bodyend="44"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert_1ace75632a0ce5ff82045915422103e5d0" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::convert::write</definition>
        <argsstring>(const char *m, std::ostream &amp;out)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>m</declname>
        </param>
        <param>
          <type>std::ostream &amp;</type>
          <declname>out</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="46" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" bodystart="46" bodyend="49"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert_1aa4a841f7cf40822de996db170f3d760d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hpx::util::logging::destination::convert::do_convert</definition>
        <argsstring>(const char *c, const into&lt; const char *&gt; &amp;)</argsstring>
        <name>do_convert</name>
        <param>
          <type>const char *</type>
          <declname>c</declname>
        </param>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1into" kindref="compound">into</ref>&lt; const char *&gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="51" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" bodystart="51" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert_1a7220884ffda3cf835e984e53db72a41c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* hpx::util::logging::destination::convert::do_convert</definition>
        <argsstring>(const std::string &amp;s, const into&lt; const char *&gt; &amp;)</argsstring>
        <name>do_convert</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1into" kindref="compound">into</ref>&lt; const char *&gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="55" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" bodystart="55" bodyend="59"/>
      </memberdef>
      <memberdef kind="function" id="namespacehpx_1_1util_1_1logging_1_1destination_1_1convert_1a0cc6cc4cd15e1a24eaf9920d60f08e43" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>const std::string &amp;</type>
        <definition>const std::string&amp; hpx::util::logging::destination::convert::do_convert</definition>
        <argsstring>(const std::string &amp;s, const into&lt; std::string &gt; &amp;)</argsstring>
        <name>do_convert</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>s</declname>
        </param>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1into" kindref="compound">into</ref>&lt; std::string &gt; &amp;</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="61" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" bodystart="61" bodyend="65"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows writing messages to destinations. </para>    </briefdescription>
    <detaileddescription>
<para>It has 2 function overloads:<itemizedlist>
<listitem><para>write(message, output) - writes the given message, to the given output</para></listitem><listitem><para>do_convert(message, into&lt;other_type&gt;() );</para></listitem></itemizedlist>
</para><para>FIXME </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/destination/convert_destination.hpp" line="39" column="1"/>
  </compounddef>
</doxygen>
