<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::op_equal::same_type_op_equal_base</compoundname>
    <basecompoundref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" prot="public" virt="virtual">hpx::util::logging::op_equal::same_type_op_equal_top</basecompoundref>
    <derivedcompoundref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal" prot="public" virt="non-virtual">hpx::util::logging::op_equal::same_type_op_equal&lt; type &gt;</derivedcompoundref>
    <includes refid="hpx_2logging_2format_2op__equal_8hpp" local="no">op_equal.hpp</includes>
    <briefdescription>
<para>Base class when you want to implement operator== that will compare based on type and member operator==. </para>    </briefdescription>
    <detaileddescription>
<para><simplesect kind="see"><para><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal" kindref="compound">same_type_op_equal</ref> </para></simplesect>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="80">
        <label>hpx::util::logging::op_equal::same_type_op_equal_base</label>
        <link refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base"/>
        <childnode refid="81" relation="public-inheritance">
        </childnode>
      </node>
      <node id="82">
        <label>hpx::util::logging::op_equal::same_type_op_equal&lt; type &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal"/>
        <childnode refid="80" relation="public-inheritance">
        </childnode>
      </node>
      <node id="81">
        <label>hpx::util::logging::op_equal::same_type_op_equal_top</label>
        <link refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top"/>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="83">
        <label>hpx::util::logging::op_equal::same_type_op_equal_base</label>
        <link refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base"/>
        <childnode refid="84" relation="public-inheritance">
        </childnode>
      </node>
      <node id="84">
        <label>hpx::util::logging::op_equal::same_type_op_equal_top</label>
        <link refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top"/>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/op_equal.hpp" line="53" column="1" bodyfile="libs/logging/include/hpx/logging/format/op_equal.hpp" bodystart="52" bodyend="54"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top_1accb8000a0ddd7f18d980abc369343d24" prot="public" virt="pure-virtual"><scope>hpx::util::logging::op_equal::same_type_op_equal_base</scope><name>equals</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top_1ad7640eb36cf47d4f5c576b48189e5536" prot="protected" virt="non-virtual"><scope>hpx::util::logging::op_equal::same_type_op_equal_base</scope><name>same_type_op_equal_top</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top_1a5fc91111032f3e0e656865c7d2f9a2cc" prot="protected" virt="non-virtual"><scope>hpx::util::logging::op_equal::same_type_op_equal_base</scope><name>same_type_op_equal_top</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top_1adb7841c650b52654faa4b42b7635c6f0" prot="protected" virt="virtual"><scope>hpx::util::logging::op_equal::same_type_op_equal_base</scope><name>~same_type_op_equal_top</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
