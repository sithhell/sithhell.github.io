<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::time_t</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">non_const_context&lt; hpx::util::logging::detail::time_format_holder &gt;</basecompoundref>
    <includes refid="hpx_2logging_2format_2formatter_2time_8hpp" local="no">time.hpp</includes>
    <templateparamlist>
      <param>
        <type>class convert</type>
        <defval><ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1do__convert__format_1_1prepend" kindref="compound">do_convert_format::prepend</ref></defval>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1aa01766a377e473cfb4e4c9366f7a3d68" prot="public" static="no">
        <type>convert</type>
        <definition>typedef convert hpx::util::logging::formatter::time_t&lt; convert &gt;::convert_type</definition>
        <argsstring></argsstring>
        <name>convert_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="57" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1abc71d5ef6c1f6039557d100e559fd1f6" prot="public" static="no">
        <type>non_const_context&lt; hpx::util::logging::detail::time_format_holder &gt;</type>
        <definition>typedef non_const_context&lt; hpx::util::logging::detail::time_format_holder&gt; hpx::util::logging::formatter::time_t&lt; convert &gt;::non_const_context_base</definition>
        <argsstring></argsstring>
        <name>non_const_context_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="60" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="60" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1abc897529a6a3decf0d9470b8458be822" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::formatter::time_t&lt; convert &gt;::time_t</definition>
        <argsstring>(const std::string &amp;format)</argsstring>
        <name>time_t</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>constructs a time object </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="65" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="65" bodyend="68"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a9a0b54f3769979124a9e6d71c5090255" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::time_t&lt; convert &gt;::write_time</definition>
        <argsstring>(msg_type &amp;msg, ::time_t val) const</argsstring>
        <name>write_time</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <param>
          <type>::<ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t" kindref="compound">time_t</ref></type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="70" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="70" bodyend="80"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a18accdabc709bccd25d16a782a89a5d7" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::time_t&lt; convert &gt;::operator()</definition>
        <argsstring>(msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="82" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a90ad3e7e2232f554eee20d63890eb64c" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::formatter::time_t&lt; convert &gt;::operator==</definition>
        <argsstring>(const time_t &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t" kindref="compound">time_t</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="88" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="88" bodyend="92"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1ab9c1aad292acd27925b860e2d4631e50" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::time_t&lt; convert &gt;::configure</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>configure</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
<para>configure through script </para>        </briefdescription>
        <detaileddescription>
<para>the string = the time format </para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="98" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="98" bodyend="101"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Prefixes the message with the time. You pass the format string at construction. </para>    </briefdescription>
    <detaileddescription>
<para>It&apos;s friendlier than write_time_strf (which uses strftime).</para><para>The format can contain escape sequences: $dd - day, 2 digits $MM - month, 2 digits $yy - year, 2 digits $yyyy - year, 4 digits $hh - hour, 2 digits $mm - minute, 2 digits $ss - second, 2 digits</para><para>Example: time(&quot;Today is $dd/$MM/$yyyy&quot;);</para><para>Note: for a high precision clock, try high_precision_time (uses hpx::util::date_time)</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>convert</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] In case there needs to be a conversion between std::(w)string and the string that holds your logged message. See convert_format. For instance, you might use <ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">a cached_string class</ref> (see <ref refid="namespacehpx_1_1util_1_1logging_1_1optimize" kindref="compound">optimize namespace</ref>). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>    </detaileddescription>
    <inheritancegraph>
      <node id="116">
        <label>is_generic</label>
      </node>
      <node id="115">
        <label>hpx::util::logging::formatter::time_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t"/>
        <childnode refid="116" relation="public-inheritance">
        </childnode>
        <childnode refid="117" relation="public-inheritance">
        </childnode>
      </node>
      <node id="117">
        <label>non_const_context&lt; hpx::util::logging::detail::time_format_holder &gt;</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="119">
        <label>is_generic</label>
      </node>
      <node id="118">
        <label>hpx::util::logging::formatter::time_t&lt; convert &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t"/>
        <childnode refid="119" relation="public-inheritance">
        </childnode>
        <childnode refid="120" relation="public-inheritance">
        </childnode>
      </node>
      <node id="120">
        <label>non_const_context&lt; hpx::util::logging::detail::time_format_holder &gt;</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/time.hpp" line="56" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/time.hpp" bodystart="53" bodyend="102"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1ab9c1aad292acd27925b860e2d4631e50" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>configure</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1aa01766a377e473cfb4e4c9366f7a3d68" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>convert_type</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1abc71d5ef6c1f6039557d100e559fd1f6" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>non_const_context_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a18accdabc709bccd25d16a782a89a5d7" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a90ad3e7e2232f554eee20d63890eb64c" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>operator==</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1abc897529a6a3decf0d9470b8458be822" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>time_t</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1time__t_1a9a0b54f3769979124a9e6d71c5090255" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::time_t</scope><name>write_time</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
