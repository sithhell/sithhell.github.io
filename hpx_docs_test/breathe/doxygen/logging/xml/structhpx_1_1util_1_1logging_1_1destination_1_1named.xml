<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1destination_1_1named" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::destination::named</compoundname>
    <basecompoundref prot="public" virt="non-virtual">is_generic</basecompoundref>
    <basecompoundref prot="public" virt="non-virtual">non_const_context&lt; detail::named_context &gt;</basecompoundref>
    <includes refid="hpx_2logging_2format_2destination_2named_8hpp" local="no">named.hpp</includes>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a4eccb9c02f6b2aead9bb75248399def4" prot="public" static="no">
        <type>non_const_context&lt; detail::named_context &gt;</type>
        <definition>typedef non_const_context&lt;detail::named_context&gt; hpx::util::logging::destination::named::non_const_context_base</definition>
        <argsstring></argsstring>
        <name>non_const_context_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="191" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="191" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a935df47496a98cbf8519b65bfd6560dd" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::destination::named::named</definition>
        <argsstring>(const std::string &amp;format_string=std::string())</argsstring>
        <name>named</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_string</declname>
          <defval>std::string()</defval>
        </param>
        <briefdescription>
<para>constructs the named destination </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>named_name</parametername>
</parameternamelist>
<parameterdescription>
<para>name of the named </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>set</parametername>
</parameternamelist>
<parameterdescription>
<para>[optional] named settings - see named_settings class, and dealing_with_flags </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="200" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="200" bodyend="203"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a2f2faa769347f175c6eda23e0b2e4c92" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::named::operator()</definition>
        <argsstring>(const msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>const msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="204" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="204" bodyend="207"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1ab395a7c9e6c096b442cd6c32e1fd0a34" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1named" kindref="compound">named</ref> &amp;</type>
        <definition>named&amp; hpx::util::logging::destination::named::string</definition>
        <argsstring>(const std::string &amp;str)</argsstring>
        <name>string</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="209" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="209" bodyend="213"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a8f0bb798a5598e177ac5888e052a317a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class destination</type>
          </param>
        </templateparamlist>
        <type><ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1named" kindref="compound">named</ref> &amp;</type>
        <definition>named&amp; hpx::util::logging::destination::named::add</definition>
        <argsstring>(const std::string &amp;name, destination dest)</argsstring>
        <name>add</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>destination</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="216" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="216" bodyend="220"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a2b3b84d79653a6728520ff582b37f8e4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::named::del</definition>
        <argsstring>(const std::string &amp;name)</argsstring>
        <name>del</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="222" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="222" bodyend="225"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a0ef02f5946b4df0db39d42ff695e77db" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::destination::named::configure_inner</definition>
        <argsstring>(const std::string &amp;name, const std::string &amp;configure_str)</argsstring>
        <name>configure_inner</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>name</declname>
        </param>
        <param>
          <type>const std::string &amp;</type>
          <declname>configure_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="227" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="227" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1ad1d7ba09d497b7120cf0e03cb60ae13e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::logging::destination::named::operator==</definition>
        <argsstring>(const named &amp;other) const</argsstring>
        <name>operator==</name>
        <param>
          <type>const <ref refid="structhpx_1_1util_1_1logging_1_1destination_1_1named" kindref="compound">named</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="233" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="233" bodyend="237"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
<para>Allows you to contain multiple destinations, give each such destination a name. Then, at run-time, you can specify a format string which will specify which destinations to be called, and on what order. </para>    </briefdescription>
    <detaileddescription>
<para>This allows you:<itemizedlist>
<listitem><para>to hold multiple destinations</para></listitem><listitem><para>each destination is given a name, when being added. The name <bold>must not</bold> contain spaces and must not start with &apos;+&apos;/&apos;-&apos; signs</para></listitem><listitem><para>you have a format string, which contains what destinations to be called, and on which order</para></listitem></itemizedlist>
</para><para>The format string contains destination names, separated by space.</para><para>When a message is written to this destination, I parse the format string. When a name is encountered, if there&apos;s a destination corresponding to this name, I will call it.</para><para>Example:</para><para><programlisting><codeline><highlight class="normal">g_l()-&gt;writer().add_destination(</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/>destination::named(&quot;cout<sp/>out<sp/>debug&quot;)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;cout&quot;,<sp/>destination::cout())</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;debug&quot;,<sp/>destination::dbg_window()<sp/>)</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.add(<sp/>&quot;out&quot;,<sp/>destination::file(&quot;out.txt&quot;))</highlight></codeline>
<codeline><highlight class="normal"><sp/><sp/><sp/><sp/><sp/>);</highlight></codeline>
</programlisting></para><para>In the above code, we&apos;ll write to 3 destinations, in the following order:<itemizedlist>
<listitem><para>first, to the console</para></listitem><listitem><para>second, to the out.txt file</para></listitem><listitem><para>third, to the debug window</para></listitem></itemizedlist>
</para><sect1 id="structhpx_1_1util_1_1logging_1_1destination_1_1named_1If">
<title>you deal with config files</title>
<para>As an extra feature:<itemizedlist>
<listitem><para>if a name starts with &apos;-&apos; is ignored</para></listitem><listitem><para>if a name starts with &apos;+&apos;, is included.</para></listitem></itemizedlist>
</para><para>This is useful if you want to set this format string in a config file. The good thing is that this way you can easily turn on/off certain destinations, while seing all the available destinations as well.</para><para>Example: <linebreak/>
 <computeroutput>+out_file -debug_window +console</computeroutput> <linebreak/>
In the above example, I know that the available destinations are <computeroutput>out_file</computeroutput>, <computeroutput>debug_window</computeroutput> and <computeroutput>console</computeroutput>, but I&apos;m not writing to <computeroutput>debug_window</computeroutput>.</para><para><programlisting><codeline><highlight class="normal">#include<sp/>&lt;hpx/logging/format/destination/named.hpp&gt;</highlight></codeline>
</programlisting> </para></sect1>
    </detaileddescription>
    <inheritancegraph>
      <node id="54">
        <label>non_const_context&lt; detail::named_context &gt;</label>
      </node>
      <node id="53">
        <label>is_generic</label>
      </node>
      <node id="52">
        <label>hpx::util::logging::destination::named</label>
        <link refid="structhpx_1_1util_1_1logging_1_1destination_1_1named"/>
        <childnode refid="53" relation="public-inheritance">
        </childnode>
        <childnode refid="54" relation="public-inheritance">
        </childnode>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="57">
        <label>non_const_context&lt; detail::named_context &gt;</label>
      </node>
      <node id="56">
        <label>is_generic</label>
      </node>
      <node id="55">
        <label>hpx::util::logging::destination::named</label>
        <link refid="structhpx_1_1util_1_1logging_1_1destination_1_1named"/>
        <childnode refid="56" relation="public-inheritance">
        </childnode>
        <childnode refid="57" relation="public-inheritance">
        </childnode>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/destination/named.hpp" line="190" column="1" bodyfile="libs/logging/include/hpx/logging/format/destination/named.hpp" bodystart="187" bodyend="238"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a8f0bb798a5598e177ac5888e052a317a" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>add</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a0ef02f5946b4df0db39d42ff695e77db" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>configure_inner</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a2b3b84d79653a6728520ff582b37f8e4" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>del</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a935df47496a98cbf8519b65bfd6560dd" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>named</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a4eccb9c02f6b2aead9bb75248399def4" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>non_const_context_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1a2f2faa769347f175c6eda23e0b2e4c92" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1ad1d7ba09d497b7120cf0e03cb60ae13e" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>operator==</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1destination_1_1named_1ab395a7c9e6c096b442cd6c32e1fd0a34" prot="public" virt="non-virtual"><scope>hpx::util::logging::destination::named</scope><name>string</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
