<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::logging::array::ptr_holder</compoundname>
    <includes refid="hpx_2logging_2format_2array_8hpp" local="no">array.hpp</includes>
    <templateparamlist>
      <param>
        <type>class base_type</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a4f20196a1a2d16235049ed70aded9f2d" prot="public" static="no">
        <type>base_type</type>
        <definition>typedef base_type hpx::util::logging::array::ptr_holder&lt; base_type &gt;::value_type</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="43" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="43" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a1f14b6dc4cc8ee253f73e0888015b0db" prot="public" static="no">
        <type>std::unique_ptr&lt; value_type &gt;</type>
        <definition>typedef std::unique_ptr&lt;value_type&gt; hpx::util::logging::array::ptr_holder&lt; base_type &gt;::ptr_type</definition>
        <argsstring></argsstring>
        <name>ptr_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="44" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="44" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a83988efba56f0ba743dc6d407d744d73" prot="public" static="no">
        <type>std::vector&lt; ptr_type &gt;</type>
        <definition>typedef std::vector&lt;ptr_type&gt; hpx::util::logging::array::ptr_holder&lt; base_type &gt;::array_type</definition>
        <argsstring></argsstring>
        <name>array_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="45" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a954ae1aa474969e9dd0811211ab9592a" prot="private" static="no" mutable="no">
        <type>array_type</type>
        <definition>array_type hpx::util::logging::array::ptr_holder&lt; base_type &gt;::m_array</definition>
        <argsstring></argsstring>
        <name>m_array</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="89" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="89" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a87b0f01bb3f581d8c43e175682694c8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class derived</type>
          </param>
        </templateparamlist>
        <type>base_type *</type>
        <definition>base_type* hpx::util::logging::array::ptr_holder&lt; base_type &gt;::append</definition>
        <argsstring>(derived val)</argsstring>
        <name>append</name>
        <param>
          <type>derived</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="48" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="48" bodyend="54"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1aa21079d9596e2352f8d5d234db39bb27" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class derived</type>
          </param>
        </templateparamlist>
        <type>base_type *</type>
        <definition>base_type* hpx::util::logging::array::ptr_holder&lt; base_type &gt;::get_ptr</definition>
        <argsstring>(derived val) const</argsstring>
        <name>get_ptr</name>
        <param>
          <type>derived</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="57" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="57" bodyend="67"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a2880717ef1e9f572b904dde4f0c2aa8d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>class derived</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::logging::array::ptr_holder&lt; base_type &gt;::del</definition>
        <argsstring>(derived val)</argsstring>
        <name>del</name>
        <param>
          <type>derived</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="70" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="70" bodyend="74"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a8da3751b2a0f11c085f83ed61f83bf9d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::array::ptr_holder&lt; base_type &gt;::del</definition>
        <argsstring>(base_type *p)</argsstring>
        <name>del</name>
        <param>
          <type>base_type *</type>
          <declname>p</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/array.hpp" line="76" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="76" bodyend="86"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
<para>Holds an array of manipulators (formatters or destinations). It owns them, holding them internally as smart pointers Each function call is locked.</para><para>The base_type must implement operator==</para><para>When you call get_ptr() or del(), the type you provide, must implement operator==(const type&amp; , const base_type&amp;) </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/array.hpp" line="41" column="1" bodyfile="libs/logging/include/hpx/logging/format/array.hpp" bodystart="40" bodyend="90"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a87b0f01bb3f581d8c43e175682694c8d" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>append</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a83988efba56f0ba743dc6d407d744d73" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>array_type</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a2880717ef1e9f572b904dde4f0c2aa8d" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>del</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a8da3751b2a0f11c085f83ed61f83bf9d" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>del</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1aa21079d9596e2352f8d5d234db39bb27" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>get_ptr</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a954ae1aa474969e9dd0811211ab9592a" prot="private" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>m_array</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a1f14b6dc4cc8ee253f73e0888015b0db" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>ptr_type</name></member>
      <member refid="classhpx_1_1util_1_1logging_1_1array_1_1ptr__holder_1a4f20196a1a2d16235049ed70aded9f2d" prot="public" virt="non-virtual"><scope>hpx::util::logging::array::ptr_holder</scope><name>value_type</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
