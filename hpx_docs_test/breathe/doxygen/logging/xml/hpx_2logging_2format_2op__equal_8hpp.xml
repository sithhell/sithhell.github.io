<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="hpx_2logging_2format_2op__equal_8hpp" kind="file" language="C++">
    <compoundname>op_equal.hpp</compoundname>
    <includes local="no">hpx/logging/detail/fwd.hpp</includes>
    <includes local="no">typeinfo</includes>
    <includes local="no">vector</includes>
    <includedby refid="hpx_2logging_2format_8hpp" local="no">libs/logging/include/hpx/logging/format.hpp</includedby>
    <includedby refid="compatibility_2hpx_2util_2logging_2format_2op__equal_8hpp" local="no">libs/logging/include_compatibility/hpx/util/logging/format/op_equal.hpp</includedby>
    <incdepgraph>
      <node id="861">
        <label>hpx/logging/detail/fwd.hpp</label>
      </node>
      <node id="862">
        <label>typeinfo</label>
      </node>
      <node id="863">
        <label>vector</label>
      </node>
      <node id="860">
        <label>libs/logging/include/hpx/logging/format/op_equal.hpp</label>
        <link refid="hpx_2logging_2format_2op__equal_8hpp"/>
        <childnode refid="861" relation="include">
        </childnode>
        <childnode refid="862" relation="include">
        </childnode>
        <childnode refid="863" relation="include">
        </childnode>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="875">
        <label>libs/logging/include_compatibility/hpx/util/logging/writer/named_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2writer_2named__write_8hpp_source"/>
      </node>
      <node id="866">
        <label>libs/logging/include/hpx/logging/format_fwd.hpp</label>
        <link refid="hpx_2logging_2format__fwd_8hpp_source"/>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="869" relation="include">
        </childnode>
      </node>
      <node id="873">
        <label>libs/logging/include/hpx/logging/format/named_write.hpp</label>
        <link refid="hpx_2logging_2format_2named__write_8hpp_source"/>
        <childnode refid="874" relation="include">
        </childnode>
      </node>
      <node id="876">
        <label>libs/logging/include_compatibility/hpx/util/logging/format.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_8hpp_source"/>
      </node>
      <node id="869">
        <label>libs/logging/include_compatibility/hpx/util/logging/format_fwd.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format__fwd_8hpp_source"/>
      </node>
      <node id="870">
        <label>libs/logging/include/hpx/logging/writer/format_write.hpp</label>
        <link refid="hpx_2logging_2writer_2format__write_8hpp_source"/>
        <childnode refid="871" relation="include">
        </childnode>
      </node>
      <node id="865">
        <label>libs/logging/include/hpx/logging/format.hpp</label>
        <link refid="hpx_2logging_2format_8hpp"/>
        <childnode refid="866" relation="include">
        </childnode>
        <childnode refid="870" relation="include">
        </childnode>
        <childnode refid="872" relation="include">
        </childnode>
        <childnode refid="876" relation="include">
        </childnode>
      </node>
      <node id="868">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/named_write_fwd.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2named__write__fwd_8hpp_source"/>
      </node>
      <node id="877">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/op_equal.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2op__equal_8hpp_source"/>
      </node>
      <node id="871">
        <label>libs/logging/include_compatibility/hpx/util/logging/writer/format_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2writer_2format__write_8hpp_source"/>
      </node>
      <node id="872">
        <label>libs/logging/include/hpx/logging/writer/named_write.hpp</label>
        <link refid="hpx_2logging_2writer_2named__write_8hpp_source"/>
        <childnode refid="873" relation="include">
        </childnode>
        <childnode refid="867" relation="include">
        </childnode>
        <childnode refid="875" relation="include">
        </childnode>
      </node>
      <node id="874">
        <label>libs/logging/include_compatibility/hpx/util/logging/format/named_write.hpp</label>
        <link refid="compatibility_2hpx_2util_2logging_2format_2named__write_8hpp_source"/>
      </node>
      <node id="867">
        <label>libs/logging/include/hpx/logging/format/named_write_fwd.hpp</label>
        <link refid="hpx_2logging_2format_2named__write__fwd_8hpp_source"/>
        <childnode refid="868" relation="include">
        </childnode>
      </node>
      <node id="864">
        <label>libs/logging/include/hpx/logging/format/op_equal.hpp</label>
        <link refid="hpx_2logging_2format_2op__equal_8hpp"/>
        <childnode refid="865" relation="include">
        </childnode>
        <childnode refid="877" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" prot="public">hpx::util::logging::op_equal::same_type_op_equal_top</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base" prot="public">hpx::util::logging::op_equal::same_type_op_equal_base</innerclass>
    <innerclass refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal" prot="public">hpx::util::logging::op_equal::same_type_op_equal</innerclass>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1util">hpx::util</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1logging">hpx::util::logging</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1logging_1_1op__equal">hpx::util::logging::op_equal</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/>op_equal.hpp</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Boost<sp/>Logging<sp/>library</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Author:<sp/>John<sp/>Torjo,<sp/>www.torjo.com</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Copyright<sp/>(C)<sp/>2007<sp/>John<sp/>Torjo<sp/>(see<sp/>www.torjo.com<sp/>for<sp/>email)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="comment">//<sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/>(See<sp/>accompanying<sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://www.boost.org<sp/>for<sp/>updates,<sp/>documentation,<sp/>and<sp/>revision<sp/>history.</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="comment">//<sp/>See<sp/>http://www.torjo.com/log2/<sp/>for<sp/>more<sp/>details</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#ifndef<sp/>JT28092007_op_equal_HPP_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>JT28092007_op_equal_HPP_DEFINED</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/logging/detail/fwd.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;typeinfo&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">util<sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">logging<sp/>{</highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight></codeline>
<codeline lineno="29" refid="namespacehpx_1_1util_1_1logging_1_1op__equal" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">op_equal<sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight></codeline>
<codeline lineno="31" refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref></highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>&amp;)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>=<sp/>0;</highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">protected</highlight><highlight class="normal">:</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/>~<ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>()<sp/>{}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>&amp;)<sp/>{}</highlight></codeline>
<codeline lineno="39"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>operator==(</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>&amp;<sp/>a,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>&amp;<sp/>b)</highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>a.equals(b);</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="52" refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base" kindref="compound">same_type_op_equal_base</ref><sp/>:<sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref></highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="55"><highlight class="normal"></highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">class</highlight><highlight class="normal"><sp/>type&gt;</highlight></codeline>
<codeline lineno="64" refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal" refkind="compound"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal" kindref="compound">same_type_op_equal</ref><sp/>:<sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__base" kindref="compound">same_type_op_equal_base</ref></highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">virtual</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">bool</highlight><highlight class="normal"><sp/>equals(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/><ref refid="structhpx_1_1util_1_1logging_1_1op__equal_1_1same__type__op__equal__top" kindref="compound">same_type_op_equal_top</ref>&amp;<sp/>other)</highlight><highlight class="keyword"><sp/>const</highlight></codeline>
<codeline lineno="67"><highlight class="keyword"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">if</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">)<sp/>!=<sp/></highlight><highlight class="keyword">typeid</highlight><highlight class="normal">(other))</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">false</highlight><highlight class="normal">;</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/>type&amp;<sp/>real_other<sp/>=<sp/></highlight><highlight class="keyword">dynamic_cast&lt;</highlight><highlight class="keyword">const<sp/></highlight><highlight class="normal">type&amp;</highlight><highlight class="keyword">&gt;</highlight><highlight class="normal">(other);</highlight></codeline>
<codeline lineno="71"><highlight class="normal"></highlight></codeline>
<codeline lineno="72"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>this<sp/>forces<sp/>&apos;type&apos;<sp/>to<sp/>implement<sp/>operator==</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="73"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>(dynamic_cast&lt;const<sp/>type&amp;&gt;(*</highlight><highlight class="keyword">this</highlight><highlight class="normal">))</highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.</highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">operator</highlight><highlight class="normal">==(real_other);</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="78"><highlight class="normal"></highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/>}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>op_equal</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="80"><highlight class="normal">}}}<sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::util::logging</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="81"><highlight class="normal"></highlight></codeline>
<codeline lineno="82"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/logging/include/hpx/logging/format/op_equal.hpp"/>
  </compounddef>
</doxygen>
