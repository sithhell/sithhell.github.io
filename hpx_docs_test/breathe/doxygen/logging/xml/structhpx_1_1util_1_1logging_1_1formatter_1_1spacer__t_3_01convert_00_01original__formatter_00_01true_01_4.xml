<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4" kind="struct" language="C++" prot="public">
    <compoundname>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</compoundname>
    <basecompoundref prot="public" virt="non-virtual">original_formatter</basecompoundref>
    <templateparamlist>
      <param>
        <type>class convert</type>
      </param>
      <param>
        <type>class original_formatter</type>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a03c9a40a011a6004b249458c86400ad4" prot="public" static="no">
        <type>original_formatter</type>
        <definition>typedef original_formatter hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::spacer_base</definition>
        <argsstring></argsstring>
        <name>spacer_base</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="155" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="155" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a3d0f710184ef0bba0c25ce79c031bbf3" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::m_prefix</definition>
        <argsstring></argsstring>
        <name>m_prefix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="185" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a4de4f02b3c5ac69950f585a6e5fa4625" prot="private" static="no" mutable="no">
        <type>std::string</type>
        <definition>std::string hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::m_suffix</definition>
        <argsstring></argsstring>
        <name>m_suffix</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="185" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="185" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a11a228a5dbbe88041e63a1770082c928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::spacer_t</definition>
        <argsstring>(const original_formatter &amp;fmt, const char *format_str)</argsstring>
        <name>spacer_t</name>
        <param>
          <type>const original_formatter &amp;</type>
          <declname>fmt</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>format_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="157" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="157" bodyend="161"/>
      </memberdef>
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1ae3752799c7066c1508e4ffe71777a982" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::operator()</definition>
        <argsstring>(msg_type &amp;msg) const</argsstring>
        <name>operator()</name>
        <param>
          <type>msg_type &amp;</type>
          <declname>msg</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="163" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="163" bodyend="167"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a434bb7afdef3659e92ec2cecd8f7ac19" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;::parse_format</definition>
        <argsstring>(const std::string &amp;format_str)</argsstring>
        <name>parse_format</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>format_str</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="170" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="170" bodyend="182"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <inheritancegraph>
      <node id="97">
        <label>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4"/>
        <childnode refid="98" relation="public-inheritance">
        </childnode>
      </node>
      <node id="98">
        <label>original_formatter</label>
      </node>
    </inheritancegraph>
    <collaborationgraph>
      <node id="99">
        <label>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</label>
        <link refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4"/>
        <childnode refid="100" relation="public-inheritance">
        </childnode>
      </node>
      <node id="100">
        <label>original_formatter</label>
      </node>
    </collaborationgraph>
    <location file="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" line="153" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/spacer.hpp" bodystart="152" bodyend="186"/>
    <listofallmembers>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a3d0f710184ef0bba0c25ce79c031bbf3" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>m_prefix</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a4de4f02b3c5ac69950f585a6e5fa4625" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>m_suffix</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1ae3752799c7066c1508e4ffe71777a982" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>operator()</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a434bb7afdef3659e92ec2cecd8f7ac19" prot="private" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>parse_format</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a03c9a40a011a6004b249458c86400ad4" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>spacer_base</name></member>
      <member refid="structhpx_1_1util_1_1logging_1_1formatter_1_1spacer__t_3_01convert_00_01original__formatter_00_01true_01_4_1a11a228a5dbbe88041e63a1770082c928" prot="public" virt="non-virtual"><scope>hpx::util::logging::formatter::spacer_t&lt; convert, original_formatter, true &gt;</scope><name>spacer_t</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
