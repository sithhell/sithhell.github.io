<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert" kind="namespace" language="C++">
    <compoundname>hpx::util::logging::formatter::convert</compoundname>
    <innernamespace refid="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1append">hpx::util::logging::formatter::convert::append</innernamespace>
    <innernamespace refid="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1prepend">hpx::util::logging::formatter::convert::prepend</innernamespace>
    <briefdescription>
<para>Allows format convertions. </para>    </briefdescription>
    <detaileddescription>
<para><itemizedlist>
<listitem><para>In case you&apos;re using a formatter that does not match your string type</para></listitem></itemizedlist>
</para><para>In case you want to use a formatter developed by someone else (for instance, a formatter provided by this lib), perhaps you&apos;re using another type of string to hold the message<itemizedlist>
<listitem><para>thus, you need to provide a conversion function</para></listitem></itemizedlist>
</para><para>Example: FIXME</para><para><ndash/>&gt; convert_format::prepend</para><para>explain that you can extend the following - since they&apos;re namespaces!!! so that you can &quot;inject&quot; your own write function in the convert_format::prepend/orwhatever namespace, and then it&apos;ll be automatically used! </para>    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="44" column="1"/>
  </compounddef>
</doxygen>
