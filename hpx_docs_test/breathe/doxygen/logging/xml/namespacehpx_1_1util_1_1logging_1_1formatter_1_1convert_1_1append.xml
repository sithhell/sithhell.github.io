<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util_1_1logging_1_1formatter_1_1convert_1_1append" kind="namespace" language="C++">
    <compoundname>hpx::util::logging::formatter::convert::append</compoundname>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2logging_2format_2formatter_2convert__format_8hpp_1a6cc857194cb0d8a73cbbbe7fde5002d7" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::append::write</definition>
        <argsstring>(const std::string &amp;src, std::string &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="78" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="78" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2logging_2format_2formatter_2convert__format_8hpp_1ac0d5d7133059a13d32e5370435b2093a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::append::write</definition>
        <argsstring>(const std::string &amp;src, hpx::util::logging::optimize::cache_string_one_str &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const std::string &amp;</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">hpx::util::logging::optimize::cache_string_one_str</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="82" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="82" bodyend="86"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2logging_2format_2formatter_2convert__format_8hpp_1a85737a2c9cec8012a999c29606ef8835" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::append::write</definition>
        <argsstring>(const char *src, std::string &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type>std::string &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="88" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="88" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2logging_2format_2formatter_2convert__format_8hpp_1a22efec5e636c7b233d9f21ce589f7dc3" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::logging::formatter::convert::append::write</definition>
        <argsstring>(const char *src, hpx::util::logging::optimize::cache_string_one_str &amp;dest)</argsstring>
        <name>write</name>
        <param>
          <type>const char *</type>
          <declname>src</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1logging_1_1optimize_1_1cache__string__one__str" kindref="compound">hpx::util::logging::optimize::cache_string_one_str</ref> &amp;</type>
          <declname>dest</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="92" column="1" bodyfile="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" bodystart="92" bodyend="96"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/logging/include/hpx/logging/format/formatter/convert_format.hpp" line="77" column="1"/>
  </compounddef>
</doxygen>
