<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="sort__by__key_8hpp" kind="file" language="C++">
    <compoundname>sort_by_key.hpp</compoundname>
    <includes local="no">hpx/config.hpp</includes>
    <includes local="no">hpx/util/tagged_pair.hpp</includes>
    <includes local="no">hpx/datastructures/tuple.hpp</includes>
    <includes refid="algorithms_2sort_8hpp" local="no">hpx/parallel/algorithms/sort.hpp</includes>
    <includes refid="tagspec_8hpp" local="no">hpx/parallel/tagspec.hpp</includes>
    <includes refid="util_2zip__iterator_8hpp" local="no">hpx/parallel/util/zip_iterator.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">iterator</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <incdepgraph>
      <node id="1122">
        <label>list</label>
      </node>
      <node id="1113">
        <label>hpx/type_support/always_void.hpp</label>
      </node>
      <node id="1107">
        <label>hpx/parallel/traits/vector_pack_type.hpp</label>
      </node>
      <node id="1121">
        <label>functional</label>
      </node>
      <node id="1087">
        <label>hpx/util/tagged_pair.hpp</label>
      </node>
      <node id="1114">
        <label>iterator</label>
      </node>
      <node id="1108">
        <label>hpx/functional/traits/is_callable.hpp</label>
      </node>
      <node id="1104">
        <label>hpx/datastructures/detail/pack.hpp</label>
      </node>
      <node id="1089">
        <label>hpx/parallel/algorithms/sort.hpp</label>
        <link refid="algorithms_2sort_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1090" relation="include">
        </childnode>
        <childnode refid="1091" relation="include">
        </childnode>
        <childnode refid="1092" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1096" relation="include">
        </childnode>
        <childnode refid="1097" relation="include">
        </childnode>
        <childnode refid="1098" relation="include">
        </childnode>
        <childnode refid="1099" relation="include">
        </childnode>
        <childnode refid="1100" relation="include">
        </childnode>
        <childnode refid="1101" relation="include">
        </childnode>
        <childnode refid="1102" relation="include">
        </childnode>
        <childnode refid="1103" relation="include">
        </childnode>
        <childnode refid="1115" relation="include">
        </childnode>
        <childnode refid="1116" relation="include">
        </childnode>
        <childnode refid="1117" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1119" relation="include">
        </childnode>
        <childnode refid="1120" relation="include">
        </childnode>
        <childnode refid="1121" relation="include">
        </childnode>
        <childnode refid="1114" relation="include">
        </childnode>
        <childnode refid="1122" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1085">
        <label>libs/algorithms/include/hpx/parallel/algorithms/sort_by_key.hpp</label>
        <link refid="sort__by__key_8hpp"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1089" relation="include">
        </childnode>
        <childnode refid="1123" relation="include">
        </childnode>
        <childnode refid="1125" relation="include">
        </childnode>
        <childnode refid="1118" relation="include">
        </childnode>
        <childnode refid="1114" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1095">
        <label>hpx/type_support/decay.hpp</label>
      </node>
      <node id="1101">
        <label>hpx/parallel/executors/execution_information.hpp</label>
      </node>
      <node id="1099">
        <label>hpx/parallel/execution_policy.hpp</label>
      </node>
      <node id="1110">
        <label>hpx/traits/segmented_iterator_traits.hpp</label>
        <link refid="segmented__iterator__traits_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1115">
        <label>hpx/parallel/util/compare_projected.hpp</label>
        <link refid="compare__projected_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1093" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1086">
        <label>hpx/config.hpp</label>
      </node>
      <node id="1120">
        <label>exception</label>
      </node>
      <node id="1105">
        <label>hpx/functional/result_of.hpp</label>
      </node>
      <node id="1093">
        <label>hpx/functional/invoke.hpp</label>
      </node>
      <node id="1091">
        <label>hpx/concepts/concepts.hpp</label>
      </node>
      <node id="1094">
        <label>hpx/iterator_support/is_iterator.hpp</label>
      </node>
      <node id="1109">
        <label>hpx/traits/is_execution_policy.hpp</label>
      </node>
      <node id="1098">
        <label>hpx/parallel/exception_list.hpp</label>
      </node>
      <node id="1103">
        <label>hpx/parallel/traits/projected.hpp</label>
        <link refid="projected_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1104" relation="include">
        </childnode>
        <childnode refid="1105" relation="include">
        </childnode>
        <childnode refid="1094" relation="include">
        </childnode>
        <childnode refid="1106" relation="include">
        </childnode>
        <childnode refid="1107" relation="include">
        </childnode>
        <childnode refid="1108" relation="include">
        </childnode>
        <childnode refid="1109" relation="include">
        </childnode>
        <childnode refid="1110" relation="include">
        </childnode>
        <childnode refid="1113" relation="include">
        </childnode>
        <childnode refid="1095" relation="include">
        </childnode>
        <childnode refid="1114" relation="include">
        </childnode>
        <childnode refid="1111" relation="include">
        </childnode>
      </node>
      <node id="1117">
        <label>hpx/parallel/util/projection_identity.hpp</label>
        <link refid="projection__identity_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1125">
        <label>hpx/parallel/util/zip_iterator.hpp</label>
        <link refid="util_2zip__iterator_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1126" relation="include">
        </childnode>
        <childnode refid="1087" relation="include">
        </childnode>
        <childnode refid="1088" relation="include">
        </childnode>
        <childnode refid="1127" relation="include">
        </childnode>
        <childnode refid="1112" relation="include">
        </childnode>
      </node>
      <node id="1097">
        <label>hpx/parallel/algorithms/detail/predicates.hpp</label>
      </node>
      <node id="1100">
        <label>hpx/parallel/executors/execution.hpp</label>
      </node>
      <node id="1096">
        <label>hpx/parallel/algorithms/detail/dispatch.hpp</label>
      </node>
      <node id="1124">
        <label>hpx/util/tagged.hpp</label>
      </node>
      <node id="1112">
        <label>utility</label>
      </node>
      <node id="1123">
        <label>hpx/parallel/tagspec.hpp</label>
        <link refid="tagspec_8hpp_source"/>
        <childnode refid="1086" relation="include">
        </childnode>
        <childnode refid="1124" relation="include">
        </childnode>
      </node>
      <node id="1090">
        <label>hpx/assertion.hpp</label>
      </node>
      <node id="1102">
        <label>hpx/parallel/executors/execution_parameters.hpp</label>
      </node>
      <node id="1119">
        <label>cstddef</label>
      </node>
      <node id="1127">
        <label>hpx/util/zip_iterator.hpp</label>
      </node>
      <node id="1126">
        <label>hpx/lcos/future.hpp</label>
      </node>
      <node id="1111">
        <label>type_traits</label>
      </node>
      <node id="1118">
        <label>algorithm</label>
      </node>
      <node id="1116">
        <label>hpx/parallel/util/detail/algorithm_result.hpp</label>
      </node>
      <node id="1106">
        <label>hpx/parallel/traits/vector_pack_load_store.hpp</label>
      </node>
      <node id="1092">
        <label>hpx/dataflow.hpp</label>
      </node>
      <node id="1088">
        <label>hpx/datastructures/tuple.hpp</label>
      </node>
    </incdepgraph>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1parallel">hpx::parallel</innernamespace>
    <innernamespace refid="namespacehpx_1_1parallel_1_1v1">hpx::parallel::v1</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>Hartmut<sp/>Kaiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2016<sp/>John<sp/>Biddiscombe</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="6"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_PARALLEL_ALGORITHM_SORT_BY_KEY_DEC_2015)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_PARALLEL_ALGORITHM_SORT_BY_KEY_DEC_2015</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/util/tagged_pair.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/datastructures/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/parallel/algorithms/sort.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/parallel/tagspec.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/parallel/util/zip_iterator.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;iterator&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">parallel<sp/>{<sp/></highlight><highlight class="keyword">inline</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">v1</highlight></codeline>
<codeline lineno="24"><highlight class="normal">{</highlight></codeline>
<codeline lineno="26"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sort</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">detail</highlight></codeline>
<codeline lineno="28"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="30"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">extract_key</highlight></codeline>
<codeline lineno="31"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="32"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Tuple&gt;</highlight></codeline>
<codeline lineno="33"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>operator()<sp/>(Tuple<sp/>&amp;&amp;<sp/>t)<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>-&gt;<sp/><sp/>decltype(hpx::util::get&lt;0&gt;(std::forward&lt;Tuple&gt;(t)))</highlight></codeline>
<codeline lineno="35"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="36"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpx::util::get&lt;0&gt;(std::forward&lt;Tuple&gt;(t));</highlight></codeline>
<codeline lineno="37"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="38"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="40"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight></codeline>
<codeline lineno="115"><highlight class="comment"></highlight><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//-----------------------------------------------------------------------------</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="116"><highlight class="normal"></highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ExPolicy,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>KeyIter,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>ValueIter,</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Compare<sp/>=<sp/>detail::less</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>util::detail::algorithm_result&lt;</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ExPolicy,</highlight></codeline>
<codeline lineno="123"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::tagged_pair&lt;tag::in1(KeyIter),<sp/>tag::in2(ValueIter)&gt;</highlight></codeline>
<codeline lineno="124"><highlight class="normal"><sp/><sp/><sp/><sp/>&gt;::type</highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/>sort_by_key(ExPolicy<sp/>&amp;&amp;<sp/>policy,</highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KeyIter<sp/>key_first,</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>KeyIter<sp/>key_last,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueIter<sp/>value_first,</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Compare<sp/>&amp;&amp;<sp/>comp<sp/>=<sp/>Compare())</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="131"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_HAVE_TUPLE_RVALUE_SWAP)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight><highlight class="keyword">sizeof</highlight><highlight class="normal">(KeyIter)<sp/>==<sp/>0,<sp/></highlight><highlight class="comment">//<sp/>always<sp/>false</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;sort_by_key<sp/>is<sp/>not<sp/>supported<sp/>unless<sp/>HPX_HAVE_TUPLE_RVALUE_SWAP<sp/>&quot;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;is<sp/>defined&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight><highlight class="preprocessor">#else</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="136"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hpx::traits::is_random_access_iterator&lt;KeyIter&gt;::value),</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Requires<sp/>a<sp/>random<sp/>access<sp/>iterator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>static_assert(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>(hpx::traits::is_random_access_iterator&lt;ValueIter&gt;::value),</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;Requires<sp/>a<sp/>random<sp/>access<sp/>iterator.&quot;</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>ValueIter<sp/>value_last<sp/>=<sp/>value_first;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::advance(value_last,<sp/>std::distance(key_first,<sp/>key_last));</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="146"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>detail::get_iter_tagged_pair&lt;tag::in1,<sp/>tag::in2&gt;(</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::parallel::sort(</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;ExPolicy&gt;(policy),</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::make_zip_iterator(key_first,<sp/>value_first),</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::make_zip_iterator(key_last,<sp/>value_last),</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Compare&gt;(comp),</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>detail::extract_key()));</highlight></codeline>
<codeline lineno="153"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="155"><highlight class="normal">}}}</highlight></codeline>
<codeline lineno="156"><highlight class="normal"></highlight></codeline>
<codeline lineno="157"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/algorithms/include/hpx/parallel/algorithms/sort_by_key.hpp"/>
  </compounddef>
</doxygen>
