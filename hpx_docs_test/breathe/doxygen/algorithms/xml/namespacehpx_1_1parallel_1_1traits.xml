<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1parallel_1_1traits" kind="namespace" language="C++">
    <compoundname>hpx::parallel::traits</compoundname>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__indirect__callable" prot="public">hpx::parallel::traits::is_indirect_callable</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected" prot="public">hpx::parallel::traits::is_projected</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected__indirect" prot="public">hpx::parallel::traits::is_projected_indirect</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected__range" prot="public">hpx::parallel::traits::is_projected_range</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected__range_3_01_proj_00_01_rng_00_01typename_01std_d00db901faed1fc6153e025a27d0ef72" prot="public">hpx::parallel::traits::is_projected_range&lt; Proj, Rng, typename std::enable_if&lt; hpx::traits::is_range&lt; Rng &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected__zip__iterator" prot="public">hpx::parallel::traits::is_projected_zip_iterator</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1is__projected__zip__iterator_3_01_projected_00_01typename_01hce74e417fa80e7dadecbb39b0aa5f361" prot="public">hpx::parallel::traits::is_projected_zip_iterator&lt; Projected, typename hpx::util::always_void&lt; typename Projected::iterator_type &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected" prot="public">hpx::parallel::traits::projected</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected__range" prot="public">hpx::parallel::traits::projected_range</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected__range_3_01_proj_00_01_rng_00_01typename_01std_1_1e8a6647b3e8b3d01b2d6ae04ba7f2cce1" prot="public">hpx::parallel::traits::projected_range&lt; Proj, Rng, typename std::enable_if&lt; hpx::traits::is_range&lt; Rng &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected__range__result__of" prot="public">hpx::parallel::traits::projected_range_result_of</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected__range__result__of_3_01_proj_00_01_rng_00_01typenama811c02b63dce2ac73b53ca74648d532" prot="public">hpx::parallel::traits::projected_range_result_of&lt; Proj, Rng, typename std::enable_if&lt; hpx::traits::is_range&lt; Rng &gt;::value &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1traits_1_1projected__result__of" prot="public">hpx::parallel::traits::projected_result_of</innerclass>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/algorithms/include/hpx/parallel/traits/projected_range.hpp" line="20" column="1"/>
  </compounddef>
</doxygen>
