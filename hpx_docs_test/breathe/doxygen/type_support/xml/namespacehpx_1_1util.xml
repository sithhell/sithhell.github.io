<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util" kind="namespace" language="C++">
    <compoundname>hpx::util</compoundname>
    <innerclass refid="structhpx_1_1util_1_1always__void" prot="public">hpx::util::always_void</innerclass>
    <innerclass refid="structhpx_1_1util_1_1decay" prot="public">hpx::util::decay</innerclass>
    <innerclass refid="structhpx_1_1util_1_1decay__unwrap" prot="public">hpx::util::decay_unwrap</innerclass>
    <innerclass refid="structhpx_1_1util_1_1identity" prot="public">hpx::util::identity</innerclass>
    <innerclass refid="structhpx_1_1util_1_1lazy__conditional" prot="public">hpx::util::lazy_conditional</innerclass>
    <innerclass refid="structhpx_1_1util_1_1lazy__enable__if" prot="public">hpx::util::lazy_enable_if</innerclass>
    <innerclass refid="structhpx_1_1util_1_1lazy__enable__if_3_01true_00_01_t_01_4" prot="public">hpx::util::lazy_enable_if&lt; true, T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1nonesuch" prot="public">hpx::util::nonesuch</innerclass>
    <innerclass refid="structhpx_1_1util_1_1static__" prot="public">hpx::util::static_</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unused__type" prot="public">hpx::util::unused_type</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unwrap__reference" prot="public">hpx::util::unwrap_reference</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unwrap__reference_3_01boost_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">hpx::util::unwrap_reference&lt; boost::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unwrap__reference_3_01boost_1_1reference__wrapper_3_01_t_01_4_01const_01_4" prot="public">hpx::util::unwrap_reference&lt; boost::reference_wrapper&lt; T &gt; const &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unwrap__reference_3_01std_1_1reference__wrapper_3_01_t_01_4_01_4" prot="public">hpx::util::unwrap_reference&lt; std::reference_wrapper&lt; T &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1unwrap__reference_3_01std_1_1reference__wrapper_3_01_t_01_4_01const_01_4" prot="public">hpx::util::unwrap_reference&lt; std::reference_wrapper&lt; T &gt; const &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1void__guard" prot="public">hpx::util::void_guard</innerclass>
    <innerclass refid="structhpx_1_1util_1_1void__guard_3_01void_01_4" prot="public">hpx::util::void_guard&lt; void &gt;</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1a4f0b42f39fadd2e49e3b19de5505c7c0" prot="public" static="no">
        <type>typename detail::detector&lt; <ref refid="structhpx_1_1util_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::value_t</type>
        <definition>using hpx::util::is_detected = typedef typename detail::detector&lt;nonesuch, void, Op, Args...&gt;::value_t</definition>
        <argsstring></argsstring>
        <name>is_detected</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="50" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1ab93811500c679c04c7d28d62db465858" prot="public" static="no">
        <type>typename detail::detector&lt; <ref refid="structhpx_1_1util_1_1nonesuch" kindref="compound">nonesuch</ref>, void, Op, Args... &gt;::type</type>
        <definition>using hpx::util::detected_t = typedef typename detail::detector&lt;nonesuch, void, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="57" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="58" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1aae59dd404f31742ff5a32f8ffdd10d97" prot="public" static="no">
        <type>detail::detector&lt; Default, void, Op, Args... &gt;</type>
        <definition>using hpx::util::detected_or = typedef detail::detector&lt;Default, void, Op, Args...&gt;</definition>
        <argsstring></argsstring>
        <name>detected_or</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="70" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="70" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1af3acada702fadcd0294aa3ec0d4d9947" prot="public" static="no">
        <type>typename detected_or&lt; Default, Op, Args... &gt;::type</type>
        <definition>using hpx::util::detected_or_t = typedef typename detected_or&lt;Default, Op, Args...&gt;::type</definition>
        <argsstring></argsstring>
        <name>detected_or_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="74" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="74" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1a6b80bd52accc0cb6afa987bd5385b8d2" prot="public" static="no">
        <type>std::is_same&lt; Expected, detected_t&lt; Op, Args... &gt; &gt;</type>
        <definition>using hpx::util::is_detected_exact = typedef std::is_same&lt;Expected, detected_t&lt;Op, Args...&gt; &gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_exact</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="80" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="80" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2type__support_2detected_8hpp_1ac346aff75ddf060685d49e7f5330ee2f" prot="public" static="no">
        <type>std::is_convertible&lt; detected_t&lt; Op, Args... &gt;, To &gt;</type>
        <definition>using hpx::util::is_detected_convertible = typedef std::is_convertible&lt;detected_t&lt;Op, Args...&gt;, To&gt;</definition>
        <argsstring></argsstring>
        <name>is_detected_convertible</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/detected.hpp" line="85" column="1" bodyfile="libs/type_support/include/hpx/type_support/detected.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="hpx_2type__support_2unused_8hpp_1ab2d8a2251a444364af05c8914abbbbc2" prot="public" static="no" mutable="no">
        <type>HPX_CONSTEXPR_OR_CONST <ref refid="structhpx_1_1util_1_1unused__type" kindref="compound">unused_type</ref></type>
        <definition>HPX_CONSTEXPR_OR_CONST unused_type hpx::util::unused</definition>
        <argsstring></argsstring>
        <name>unused</name>
        <initializer>= <ref refid="structhpx_1_1util_1_1unused__type" kindref="compound">unused_type</ref>()</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/unused.hpp" line="85" column="1" bodyfile="libs/type_support/include/hpx/type_support/unused.hpp" bodystart="85" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2type__support_2unwrap__ref_8hpp_1a87603932c7cf0b4205d887a284ed0398" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="structhpx_1_1util_1_1unwrap__reference" kindref="compound">unwrap_reference</ref>&lt; T &gt;::type &amp;</type>
        <definition>unwrap_reference&lt;T&gt;::type&amp; hpx::util::unwrap_ref</definition>
        <argsstring>(T &amp;t)</argsstring>
        <name>unwrap_ref</name>
        <param>
          <type>T &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/type_support/include/hpx/type_support/unwrap_ref.hpp" line="50" column="1" bodyfile="libs/type_support/include/hpx/type_support/unwrap_ref.hpp" bodystart="50" bodyend="53"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/type_support/include/hpx/type_support/identity.hpp" line="9" column="1"/>
  </compounddef>
</doxygen>
