<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="thread__execution_8hpp" kind="file" language="C++">
    <compoundname>thread_execution.hpp</compoundname>
    <includes local="no">hpx/config.hpp</includes>
    <includes local="no">hpx/lcos/dataflow.hpp</includes>
    <includes local="no">hpx/datastructures/detail/pack.hpp</includes>
    <includes local="no">hpx/datastructures/tuple.hpp</includes>
    <includes local="no">hpx/functional/bind.hpp</includes>
    <includes local="no">hpx/functional/bind_back.hpp</includes>
    <includes local="no">hpx/functional/deferred_call.hpp</includes>
    <includes local="no">hpx/iterator_support/range.hpp</includes>
    <includes local="no">hpx/lcos/future.hpp</includes>
    <includes local="no">hpx/lcos/local/futures_factory.hpp</includes>
    <includes refid="executors_2execution_8hpp" local="no">hpx/parallel/executors/execution.hpp</includes>
    <includes refid="fused__bulk__execute_8hpp" local="no">hpx/parallel/executors/fused_bulk_execute.hpp</includes>
    <includes local="no">hpx/runtime/threads/executors/current_executor.hpp</includes>
    <includes local="no">hpx/runtime/threads/thread_executor.hpp</includes>
    <includes local="no">hpx/runtime/threads/thread_helpers.hpp</includes>
    <includes local="no">hpx/traits/future_access.hpp</includes>
    <includes local="no">hpx/traits/is_launch_policy.hpp</includes>
    <includes local="no">hpx/util/unwrap.hpp</includes>
    <includes local="no">algorithm</includes>
    <includes local="no">type_traits</includes>
    <includes local="no">utility</includes>
    <includes local="no">vector</includes>
    <includedby refid="execution_8hpp" local="no">libs/execution/include/hpx/parallel/execution.hpp</includedby>
    <includedby refid="thread__pool__attached__executors_8hpp" local="no">libs/execution/include/hpx/parallel/executors/thread_pool_attached_executors.hpp</includedby>
    <includedby refid="thread__pool__executors_8hpp" local="no">libs/execution/include/hpx/parallel/executors/thread_pool_executors.hpp</includedby>
    <includedby refid="service__executors_8hpp" local="no">libs/execution/include/hpx/parallel/executors/service_executors.hpp</includedby>
    <includedby refid="this__thread__executors_8hpp" local="no">libs/execution/include/hpx/parallel/executors/this_thread_executors.hpp</includedby>
    <includedby refid="pool__executor_8hpp" local="no">libs/execution/include/hpx/parallel/executors/pool_executor.hpp</includedby>
    <includedby refid="thread__pool__os__executors_8hpp" local="no">libs/execution/include/hpx/parallel/executors/thread_pool_os_executors.hpp</includedby>
    <includedby refid="default__executor_8hpp" local="no">libs/execution/include/hpx/parallel/executors/default_executor.hpp</includedby>
    <incdepgraph>
      <node id="1362">
        <label>hpx/lcos/local/futures_factory.hpp</label>
      </node>
      <node id="1358">
        <label>hpx/functional/bind_back.hpp</label>
      </node>
      <node id="1384">
        <label>functional</label>
      </node>
      <node id="1360">
        <label>hpx/iterator_support/range.hpp</label>
      </node>
      <node id="1377">
        <label>hpx/traits/future_access.hpp</label>
      </node>
      <node id="1383">
        <label>iterator</label>
      </node>
      <node id="1369">
        <label>hpx/type_support/detected.hpp</label>
      </node>
      <node id="1355">
        <label>hpx/datastructures/detail/pack.hpp</label>
      </node>
      <node id="1364">
        <label>hpx/parallel/executors/execution_fwd.hpp</label>
        <link refid="execution__fwd_8hpp_source"/>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1367" relation="include">
        </childnode>
      </node>
      <node id="1352">
        <label>libs/execution/include/hpx/parallel/executors/thread_execution.hpp</label>
        <link refid="thread__execution_8hpp"/>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1354" relation="include">
        </childnode>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1356" relation="include">
        </childnode>
        <childnode refid="1357" relation="include">
        </childnode>
        <childnode refid="1358" relation="include">
        </childnode>
        <childnode refid="1359" relation="include">
        </childnode>
        <childnode refid="1360" relation="include">
        </childnode>
        <childnode refid="1361" relation="include">
        </childnode>
        <childnode refid="1362" relation="include">
        </childnode>
        <childnode refid="1363" relation="include">
        </childnode>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1386" relation="include">
        </childnode>
        <childnode refid="1387" relation="include">
        </childnode>
        <childnode refid="1388" relation="include">
        </childnode>
        <childnode refid="1377" relation="include">
        </childnode>
        <childnode refid="1389" relation="include">
        </childnode>
        <childnode refid="1382" relation="include">
        </childnode>
        <childnode refid="1390" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1376" relation="include">
        </childnode>
      </node>
      <node id="1385">
        <label>stdexcept</label>
      </node>
      <node id="1389">
        <label>hpx/traits/is_launch_policy.hpp</label>
      </node>
      <node id="1353">
        <label>hpx/config.hpp</label>
      </node>
      <node id="1368">
        <label>hpx/concepts/has_member_xxx.hpp</label>
      </node>
      <node id="1367">
        <label>hpx/traits/executor_traits.hpp</label>
        <link refid="executor__traits_8hpp_source"/>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1368" relation="include">
        </childnode>
        <childnode refid="1369" relation="include">
        </childnode>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
      </node>
      <node id="1382">
        <label>hpx/util/unwrap.hpp</label>
      </node>
      <node id="1354">
        <label>hpx/lcos/dataflow.hpp</label>
      </node>
      <node id="1357">
        <label>hpx/functional/bind.hpp</label>
      </node>
      <node id="1372">
        <label>hpx/functional/invoke.hpp</label>
      </node>
      <node id="1386">
        <label>hpx/runtime/threads/executors/current_executor.hpp</label>
      </node>
      <node id="1379">
        <label>hpx/traits/future_traits.hpp</label>
      </node>
      <node id="1373">
        <label>hpx/lcos/wait_all.hpp</label>
      </node>
      <node id="1381">
        <label>hpx/type_support/detail/wrap_int.hpp</label>
      </node>
      <node id="1363">
        <label>hpx/parallel/executors/execution.hpp</label>
        <link refid="executors_2execution_8hpp"/>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1356" relation="include">
        </childnode>
        <childnode refid="1371" relation="include">
        </childnode>
        <childnode refid="1358" relation="include">
        </childnode>
        <childnode refid="1372" relation="include">
        </childnode>
        <childnode refid="1360" relation="include">
        </childnode>
        <childnode refid="1354" relation="include">
        </childnode>
        <childnode refid="1361" relation="include">
        </childnode>
        <childnode refid="1373" relation="include">
        </childnode>
        <childnode refid="1374" relation="include">
        </childnode>
        <childnode refid="1367" relation="include">
        </childnode>
        <childnode refid="1377" relation="include">
        </childnode>
        <childnode refid="1378" relation="include">
        </childnode>
        <childnode refid="1379" relation="include">
        </childnode>
        <childnode refid="1380" relation="include">
        </childnode>
        <childnode refid="1381" relation="include">
        </childnode>
        <childnode refid="1359" relation="include">
        </childnode>
        <childnode refid="1382" relation="include">
        </childnode>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1383" relation="include">
        </childnode>
        <childnode refid="1384" relation="include">
        </childnode>
        <childnode refid="1385" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1376" relation="include">
        </childnode>
      </node>
      <node id="1387">
        <label>hpx/runtime/threads/thread_executor.hpp</label>
      </node>
      <node id="1388">
        <label>hpx/runtime/threads/thread_helpers.hpp</label>
      </node>
      <node id="1374">
        <label>hpx/parallel/executors/fused_bulk_execute.hpp</label>
        <link refid="fused__bulk__execute_8hpp_source"/>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1364" relation="include">
        </childnode>
        <childnode refid="1375" relation="include">
        </childnode>
        <childnode refid="1359" relation="include">
        </childnode>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1360" relation="include">
        </childnode>
        <childnode refid="1356" relation="include">
        </childnode>
        <childnode refid="1370" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
        <childnode refid="1365" relation="include">
        </childnode>
        <childnode refid="1376" relation="include">
        </childnode>
      </node>
      <node id="1376">
        <label>vector</label>
      </node>
      <node id="1365">
        <label>utility</label>
      </node>
      <node id="1371">
        <label>hpx/errors.hpp</label>
      </node>
      <node id="1380">
        <label>hpx/traits/is_executor.hpp</label>
        <link refid="is__executor_8hpp_source"/>
        <childnode refid="1353" relation="include">
        </childnode>
        <childnode refid="1355" relation="include">
        </childnode>
        <childnode refid="1366" relation="include">
        </childnode>
      </node>
      <node id="1375">
        <label>hpx/iterator_support/is_range.hpp</label>
      </node>
      <node id="1370">
        <label>cstddef</label>
      </node>
      <node id="1359">
        <label>hpx/functional/deferred_call.hpp</label>
      </node>
      <node id="1361">
        <label>hpx/lcos/future.hpp</label>
      </node>
      <node id="1366">
        <label>type_traits</label>
      </node>
      <node id="1378">
        <label>hpx/traits/future_then_result.hpp</label>
      </node>
      <node id="1390">
        <label>algorithm</label>
      </node>
      <node id="1356">
        <label>hpx/datastructures/tuple.hpp</label>
      </node>
    </incdepgraph>
    <invincdepgraph>
      <node id="1397">
        <label>libs/execution/include/hpx/parallel/executors/this_thread_executors.hpp</label>
        <link refid="this__thread__executors_8hpp_source"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1391">
        <label>libs/execution/include/hpx/parallel/executors/thread_execution.hpp</label>
        <link refid="thread__execution_8hpp"/>
        <childnode refid="1392" relation="include">
        </childnode>
        <childnode refid="1393" relation="include">
        </childnode>
        <childnode refid="1395" relation="include">
        </childnode>
        <childnode refid="1396" relation="include">
        </childnode>
        <childnode refid="1397" relation="include">
        </childnode>
        <childnode refid="1398" relation="include">
        </childnode>
        <childnode refid="1399" relation="include">
        </childnode>
        <childnode refid="1400" relation="include">
        </childnode>
      </node>
      <node id="1393">
        <label>libs/execution/include/hpx/parallel/executors/thread_pool_attached_executors.hpp</label>
        <link refid="thread__pool__attached__executors_8hpp_source"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1395">
        <label>libs/execution/include/hpx/parallel/executors/thread_pool_executors.hpp</label>
        <link refid="thread__pool__executors_8hpp"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1392">
        <label>libs/execution/include/hpx/parallel/execution.hpp</label>
        <link refid="execution_8hpp_source"/>
      </node>
      <node id="1396">
        <label>libs/execution/include/hpx/parallel/executors/service_executors.hpp</label>
        <link refid="service__executors_8hpp"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1394">
        <label>libs/execution/include/hpx/parallel/executors.hpp</label>
        <link refid="executors_8hpp_source"/>
        <childnode refid="1392" relation="include">
        </childnode>
      </node>
      <node id="1398">
        <label>libs/execution/include/hpx/parallel/executors/pool_executor.hpp</label>
        <link refid="pool__executor_8hpp"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1399">
        <label>libs/execution/include/hpx/parallel/executors/thread_pool_os_executors.hpp</label>
        <link refid="thread__pool__os__executors_8hpp_source"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
      <node id="1400">
        <label>libs/execution/include/hpx/parallel/executors/default_executor.hpp</label>
        <link refid="default__executor_8hpp"/>
        <childnode refid="1394" relation="include">
        </childnode>
      </node>
    </invincdepgraph>
    <innernamespace refid="namespacehpx">hpx</innernamespace>
    <innernamespace refid="namespacehpx_1_1threads">hpx::threads</innernamespace>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">//<sp/><sp/>Copyright<sp/>(c)<sp/>2017<sp/>Hartmut<sp/>Kaiser</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="2"><highlight class="normal"></highlight><highlight class="comment">//</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="3"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>Distributed<sp/>under<sp/>the<sp/>Boost<sp/>Software<sp/>License,<sp/>Version<sp/>1.0.<sp/>(See<sp/>accompanying</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="4"><highlight class="normal"></highlight><highlight class="comment">//<sp/><sp/>file<sp/>LICENSE_1_0.txt<sp/>or<sp/>copy<sp/>at<sp/>http://www.boost.org/LICENSE_1_0.txt)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="5"><highlight class="normal"></highlight></codeline>
<codeline lineno="7"><highlight class="normal"></highlight></codeline>
<codeline lineno="8"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_PARALLEL_EXECUTORS_THREAD_EXECUTION_JAN_03_2017_1145AM)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="9"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>HPX_PARALLEL_EXECUTORS_THREAD_EXECUTION_JAN_03_2017_1145AM</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="10"><highlight class="normal"></highlight></codeline>
<codeline lineno="11"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/config.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="12"><highlight class="normal"></highlight><highlight class="preprocessor">#if<sp/>!defined(HPX_COMPUTE_DEVICE_CODE)</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="13"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/lcos/dataflow.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="14"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="15"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/datastructures/detail/pack.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="16"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/datastructures/tuple.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="17"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/functional/bind.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="18"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/functional/bind_back.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="19"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/functional/deferred_call.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="20"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/iterator_support/range.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="21"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/lcos/future.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="22"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/lcos/local/futures_factory.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="23"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;<ref refid="executors_2execution_8hpp" kindref="compound">hpx/parallel/executors/execution.hpp</ref>&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="24"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/parallel/executors/fused_bulk_execute.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="25"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/runtime/threads/executors/current_executor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="26"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/runtime/threads/thread_executor.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="27"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/runtime/threads/thread_helpers.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="28"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/traits/future_access.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="29"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/traits/is_launch_policy.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="30"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;hpx/util/unwrap.hpp&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="31"><highlight class="normal"></highlight></codeline>
<codeline lineno="32"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;algorithm&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="33"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;type_traits&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="34"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;utility&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;vector&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="36"><highlight class="normal"></highlight></codeline>
<codeline lineno="38"><highlight class="comment">//<sp/>define<sp/>customization<sp/>point<sp/>specializations<sp/>for<sp/>thread<sp/>executors</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal"><ref refid="namespacehpx" kindref="compound">hpx</ref><sp/>{<sp/></highlight><highlight class="keyword">namespace<sp/></highlight><highlight class="normal">threads<sp/>{</highlight></codeline>
<codeline lineno="41"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>async_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="43"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="44"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="45"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::lcos::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::util::detail::invoke_deferred_result&lt;F,</highlight></codeline>
<codeline lineno="46"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ts...&gt;::type&gt;&gt;::type</highlight></codeline>
<codeline lineno="47"><highlight class="normal"><sp/><sp/><sp/><sp/>async_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="48"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="49"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>util::detail::invoke_deferred_result&lt;F,<sp/>Ts...&gt;::type</highlight></codeline>
<codeline lineno="50"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_type;</highlight></codeline>
<codeline lineno="51"><highlight class="normal"></highlight></codeline>
<codeline lineno="52"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcos::local::futures_factory&lt;result_type()&gt;<sp/>p(</highlight></codeline>
<codeline lineno="53"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Executor&gt;(exec),</highlight></codeline>
<codeline lineno="54"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util::deferred_call(std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Ts&gt;(ts)...));</highlight></codeline>
<codeline lineno="55"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>p.apply();</highlight></codeline>
<codeline lineno="56"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>p.get_future();</highlight></codeline>
<codeline lineno="57"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="58"><highlight class="normal"></highlight></codeline>
<codeline lineno="60"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>sync_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="61"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="62"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="63"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="64"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::util::detail::invoke_deferred_result&lt;F,</highlight></codeline>
<codeline lineno="65"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ts...&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="66"><highlight class="normal"><sp/><sp/><sp/><sp/>sync_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="67"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="68"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>async_execute(std::forward&lt;Executor&gt;(exec),<sp/>std::forward&lt;F&gt;(f),</highlight></codeline>
<codeline lineno="69"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Ts&gt;(ts)...)</highlight></codeline>
<codeline lineno="70"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>.get();</highlight></codeline>
<codeline lineno="71"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="72"><highlight class="normal"></highlight></codeline>
<codeline lineno="74"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>then_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="75"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Future,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="76"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="77"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="78"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::lcos::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::util::detail::invoke_deferred_result&lt;F,</highlight></codeline>
<codeline lineno="79"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Future,<sp/>Ts...&gt;::type&gt;&gt;::type</highlight></codeline>
<codeline lineno="80"><highlight class="normal"><sp/><sp/><sp/><sp/>then_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Future&amp;&amp;<sp/>predecessor,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="81"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="82"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::util::detail::invoke_deferred_result&lt;F,<sp/>Future,</highlight></codeline>
<codeline lineno="83"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ts...&gt;::type<sp/>result_type;</highlight></codeline>
<codeline lineno="84"><highlight class="normal"></highlight></codeline>
<codeline lineno="85"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=<sp/>hpx::util::one_shot(</highlight></codeline>
<codeline lineno="86"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::bind_back(std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Ts&gt;(ts)...));</highlight></codeline>
<codeline lineno="87"><highlight class="normal"></highlight></codeline>
<codeline lineno="88"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::traits::detail::shared_state_ptr&lt;result_type&gt;::type<sp/>p<sp/>=</highlight></codeline>
<codeline lineno="89"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::lcos::detail::make_continuation_exec&lt;result_type&gt;(</highlight></codeline>
<codeline lineno="90"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Future&gt;(predecessor),<sp/>std::forward&lt;Executor&gt;(exec),</highlight></codeline>
<codeline lineno="91"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(func));</highlight></codeline>
<codeline lineno="92"><highlight class="normal"></highlight></codeline>
<codeline lineno="93"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpx::traits::future_access&lt;</highlight></codeline>
<codeline lineno="94"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::lcos::future&lt;result_type&gt;&gt;::create(std::move(p));</highlight></codeline>
<codeline lineno="95"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="96"><highlight class="normal"></highlight></codeline>
<codeline lineno="98"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>post()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="99"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="100"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="101"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value&gt;::type</highlight></codeline>
<codeline lineno="102"><highlight class="normal"><sp/><sp/><sp/><sp/>post(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="103"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="104"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec.add(</highlight></codeline>
<codeline lineno="105"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util::deferred_call(std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Ts&gt;(ts)...),</highlight></codeline>
<codeline lineno="106"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hpx::parallel::execution::post&quot;</highlight><highlight class="normal">,<sp/>threads::pending,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="107"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec.get_stacksize(),<sp/>threads::thread_schedule_hint(),<sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="108"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="110"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>post()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="111"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Hint,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="112"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="113"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value<sp/>&amp;&amp;</highlight></codeline>
<codeline lineno="114"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::is_same&lt;typename<sp/>hpx::util::decay&lt;Hint&gt;::type,</highlight></codeline>
<codeline lineno="115"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::threads::thread_schedule_hint&gt;::value&gt;::type</highlight></codeline>
<codeline lineno="116"><highlight class="normal"><sp/><sp/><sp/><sp/>post(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Hint&amp;&amp;<sp/>hint,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="117"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="118"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec.add(</highlight></codeline>
<codeline lineno="119"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>util::deferred_call(std::forward&lt;F&gt;(f),<sp/>std::forward&lt;Ts&gt;(ts)...),</highlight></codeline>
<codeline lineno="120"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="stringliteral">&quot;hpx::parallel::execution::post&quot;</highlight><highlight class="normal">,<sp/>threads::pending,<sp/></highlight><highlight class="keyword">true</highlight><highlight class="normal">,</highlight></codeline>
<codeline lineno="121"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>exec.get_stacksize(),<sp/>std::forward&lt;Hint&gt;(hint),<sp/></highlight><highlight class="keywordflow">throws</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="122"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="123"><highlight class="normal"></highlight></codeline>
<codeline lineno="125"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bulk_async_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="126"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="127"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="128"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hpx::lcos::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::</highlight></codeline>
<codeline lineno="129"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk_function_result&lt;F,<sp/>Shape,<sp/>Ts...&gt;::type&gt;&gt;&gt;::type</highlight></codeline>
<codeline lineno="130"><highlight class="normal"><sp/><sp/><sp/><sp/>bulk_async_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>shape,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="131"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="132"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hpx::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::</highlight></codeline>
<codeline lineno="133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk_function_result&lt;F,<sp/>Shape,<sp/>Ts...&gt;::type&gt;&gt;</highlight></codeline>
<codeline lineno="134"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results;</highlight></codeline>
<codeline lineno="135"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.reserve(util::size(shape));</highlight></codeline>
<codeline lineno="136"><highlight class="normal"></highlight></codeline>
<codeline lineno="137"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>shape)</highlight></codeline>
<codeline lineno="138"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="139"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(</highlight></codeline>
<codeline lineno="140"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>async_execute(exec,<sp/>std::forward&lt;F&gt;(f),<sp/>elem,<sp/>ts...));</highlight></codeline>
<codeline lineno="141"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="142"><highlight class="normal"></highlight></codeline>
<codeline lineno="143"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>results;</highlight></codeline>
<codeline lineno="144"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="145"><highlight class="normal"></highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bulk_sync_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="149"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="150"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::bulk_execute_result&lt;F,<sp/>Shape,</highlight></codeline>
<codeline lineno="151"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Ts...&gt;::type&gt;::type</highlight></codeline>
<codeline lineno="152"><highlight class="normal"><sp/><sp/><sp/><sp/>bulk_sync_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>shape,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="153"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="154"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::vector&lt;hpx::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::</highlight></codeline>
<codeline lineno="155"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk_function_result&lt;F,<sp/>Shape,<sp/>Ts...&gt;::type&gt;&gt;</highlight></codeline>
<codeline lineno="156"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results;</highlight></codeline>
<codeline lineno="157"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.reserve(util::size(shape));</highlight></codeline>
<codeline lineno="158"><highlight class="normal"></highlight></codeline>
<codeline lineno="159"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">for</highlight><highlight class="normal"><sp/>(</highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>elem<sp/>:<sp/>shape)</highlight></codeline>
<codeline lineno="160"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="161"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>results.push_back(</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>async_execute(exec,<sp/>std::forward&lt;F&gt;(f),<sp/>elem,<sp/>ts...));</highlight></codeline>
<codeline lineno="163"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="164"><highlight class="normal"></highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpx::util::unwrap(results);</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="167"><highlight class="normal"></highlight></codeline>
<codeline lineno="169"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>bulk_then_execute()</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="170"><highlight class="normal"><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">template</highlight><highlight class="normal"><sp/>&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Executor,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>F,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Shape,<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>Future,</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal">...<sp/>Ts&gt;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/>HPX_FORCEINLINE<sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::enable_if&lt;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::traits::is_threads_executor&lt;Executor&gt;::value,</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::future&lt;</highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>bulk_then_execute_result&lt;F,<sp/>Shape,<sp/>Future,<sp/>Ts...&gt;::type&gt;&gt;::type</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/>bulk_then_execute(Executor&amp;&amp;<sp/>exec,<sp/>F&amp;&amp;<sp/>f,<sp/>Shape<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal">&amp;<sp/>shape,</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>Future&amp;&amp;<sp/>predecessor,<sp/>Ts&amp;&amp;...<sp/>ts)</highlight></codeline>
<codeline lineno="178"><highlight class="normal"><sp/><sp/><sp/><sp/>{</highlight></codeline>
<codeline lineno="179"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::then_bulk_function_result&lt;</highlight></codeline>
<codeline lineno="180"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F,<sp/>Shape,<sp/>Future,<sp/>Ts...</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type<sp/>func_result_type;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"></highlight></codeline>
<codeline lineno="183"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>std::vector&lt;hpx::lcos::future&lt;func_result_type&gt;<sp/>&gt;<sp/>result_type;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"></highlight></codeline>
<codeline lineno="185"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">auto</highlight><highlight class="normal"><sp/>func<sp/>=</highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>parallel::execution::detail::make_fused_bulk_async_execute_helper&lt;</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_type</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;(exec,<sp/>std::forward&lt;F&gt;(f),<sp/>shape,</highlight></codeline>
<codeline lineno="189"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::make_tuple(std::forward&lt;Ts&gt;(ts)...));</highlight></codeline>
<codeline lineno="190"><highlight class="normal"></highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>void<sp/>or<sp/>std::vector&lt;func_result_type&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>parallel::execution::detail::bulk_then_execute_result&lt;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>F,<sp/>Shape,<sp/>Future,<sp/>Ts...</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type<sp/>vector_result_type;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"></highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/>hpx::future&lt;vector_result_type&gt;<sp/>result_future_type;</highlight></codeline>
<codeline lineno="197"><highlight class="normal"></highlight></codeline>
<codeline lineno="198"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>hpx::traits::detail::shared_state_ptr&lt;</highlight></codeline>
<codeline lineno="199"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>result_future_type</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>&gt;::type<sp/>shared_state_type;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"></highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">typedef</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">typename</highlight><highlight class="normal"><sp/>std::decay&lt;Future&gt;::type<sp/>future_type;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"></highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>thread_id_type<sp/></highlight><highlight class="keywordtype">id</highlight><highlight class="normal"><sp/>=<sp/>hpx::threads::get_self_id();</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>executors::current_executor<sp/>exec_current<sp/>=</highlight></codeline>
<codeline lineno="206"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::threads::get_executor(</highlight><highlight class="keywordtype">id</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="207"><highlight class="normal"></highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>shared_state_type<sp/>p<sp/>=</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>lcos::detail::make_continuation_exec&lt;result_future_type&gt;(</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::forward&lt;Future&gt;(predecessor),<sp/>std::forward&lt;Executor&gt;(exec),</highlight></codeline>
<codeline lineno="211"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>[HPX_CAPTURE_MOVE(func),<sp/>HPX_CAPTURE_MOVE(exec_current)](</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>future_type&amp;&amp;<sp/>predecessor)<sp/></highlight><highlight class="keyword">mutable</highlight><highlight class="normal"><sp/>-&gt;<sp/>result_future_type<sp/>{</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpx::dataflow(exec_current,</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>hpx::util::functional::unwrap{},</highlight></codeline>
<codeline lineno="215"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>func(std::move(predecessor)));</highlight></codeline>
<codeline lineno="216"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>});</highlight></codeline>
<codeline lineno="217"><highlight class="normal"></highlight></codeline>
<codeline lineno="218"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordflow">return</highlight><highlight class="normal"><sp/>hpx::traits::future_access&lt;result_future_type&gt;::create(</highlight></codeline>
<codeline lineno="219"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>std::move(p));</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/>}</highlight></codeline>
<codeline lineno="221"><highlight class="normal">}}<sp/><sp/><sp/><sp/></highlight><highlight class="comment">//<sp/>namespace<sp/>hpx::threads</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="222"><highlight class="normal"></highlight></codeline>
<codeline lineno="223"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
    </programlisting>
    <location file="libs/execution/include/hpx/parallel/executors/thread_execution.hpp"/>
  </compounddef>
</doxygen>
