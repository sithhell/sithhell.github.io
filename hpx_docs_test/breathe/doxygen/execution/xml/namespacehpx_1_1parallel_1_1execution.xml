<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1parallel_1_1execution" kind="namespace" language="C++">
    <compoundname>hpx::parallel::execution</compoundname>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1auto__chunk__size" prot="public">hpx::parallel::execution::auto_chunk_size</innerclass>
    <innerclass refid="classhpx_1_1parallel_1_1execution_1_1distribution__policy__executor" prot="public">hpx::parallel::execution::distribution_policy_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1dynamic__chunk__size" prot="public">hpx::parallel::execution::dynamic_chunk_size</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__context" prot="public">hpx::parallel::execution::executor_context</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__execution__category" prot="public">hpx::parallel::execution::executor_execution_category</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__index" prot="public">hpx::parallel::execution::executor_index</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__parameters__join" prot="public">hpx::parallel::execution::executor_parameters_join</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__parameters__join_3_01_param_01_4" prot="public">hpx::parallel::execution::executor_parameters_join&lt; Param &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__parameters__type" prot="public">hpx::parallel::execution::executor_parameters_type</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1executor__shape" prot="public">hpx::parallel::execution::executor_shape</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1extract__executor__parameters" prot="public">hpx::parallel::execution::extract_executor_parameters</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1extract__executor__parameters_3_01_executor_00_01typename_3c81d1562817f29ac27398df67262317" prot="public">hpx::parallel::execution::extract_executor_parameters&lt; Executor, typename hpx::util::always_void&lt; typename Executor::executor_parameters_type &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1extract__has__variable__chunk__size" prot="public">hpx::parallel::execution::extract_has_variable_chunk_size</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1extract__has__variable__chunk__size_3_01_parameters_00_01t2bfd913cf8331ca05f4a8e9cceebc77c" prot="public">hpx::parallel::execution::extract_has_variable_chunk_size&lt; Parameters, typename hpx::util::always_void&lt; typename Parameters::has_variable_chunk_size &gt;::type &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1guided__chunk__size" prot="public">hpx::parallel::execution::guided_chunk_size</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__async__execute__member" prot="public">hpx::parallel::execution::has_async_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__bulk__async__execute__member" prot="public">hpx::parallel::execution::has_bulk_async_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__bulk__sync__execute__member" prot="public">hpx::parallel::execution::has_bulk_sync_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__bulk__then__execute__member" prot="public">hpx::parallel::execution::has_bulk_then_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__post__member" prot="public">hpx::parallel::execution::has_post_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__sync__execute__member" prot="public">hpx::parallel::execution::has_sync_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1has__then__execute__member" prot="public">hpx::parallel::execution::has_then_execute_member</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__async__execution__policy" prot="public">hpx::parallel::execution::is_async_execution_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__bulk__one__way__executor" prot="public">hpx::parallel::execution::is_bulk_one_way_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__bulk__two__way__executor" prot="public">hpx::parallel::execution::is_bulk_two_way_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__execution__policy" prot="public">hpx::parallel::execution::is_execution_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__executor__parameters" prot="public">hpx::parallel::execution::is_executor_parameters</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__never__blocking__one__way__executor" prot="public">hpx::parallel::execution::is_never_blocking_one_way_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__one__way__executor" prot="public">hpx::parallel::execution::is_one_way_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__parallel__execution__policy" prot="public">hpx::parallel::execution::is_parallel_execution_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__sequenced__execution__policy" prot="public">hpx::parallel::execution::is_sequenced_execution_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__timed__executor" prot="public">hpx::parallel::execution::is_timed_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1is__two__way__executor" prot="public">hpx::parallel::execution::is_two_way_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__execution__tag" prot="public">hpx::parallel::execution::parallel_execution_tag</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" prot="public">hpx::parallel::execution::parallel_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor" prot="public">hpx::parallel::execution::parallel_policy_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor__aggregated" prot="public">hpx::parallel::execution::parallel_policy_executor_aggregated</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor__aggregated_3_01hpx_1_1launch_01_4" prot="public">hpx::parallel::execution::parallel_policy_executor_aggregated&lt; hpx::launch &gt;</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__shim" prot="public">hpx::parallel::execution::parallel_policy_shim</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__task__policy" prot="public">hpx::parallel::execution::parallel_task_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__task__policy__shim" prot="public">hpx::parallel::execution::parallel_task_policy_shim</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1parallel__unsequenced__policy" prot="public">hpx::parallel::execution::parallel_unsequenced_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1persistent__auto__chunk__size" prot="public">hpx::parallel::execution::persistent_auto_chunk_size</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1rebind__executor" prot="public">hpx::parallel::execution::rebind_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__execution__tag" prot="public">hpx::parallel::execution::sequenced_execution_tag</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__executor" prot="public">hpx::parallel::execution::sequenced_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__policy" prot="public">hpx::parallel::execution::sequenced_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__policy__shim" prot="public">hpx::parallel::execution::sequenced_policy_shim</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy" prot="public">hpx::parallel::execution::sequenced_task_policy</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequenced__task__policy__shim" prot="public">hpx::parallel::execution::sequenced_task_policy_shim</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1sequential__executor__parameters" prot="public">hpx::parallel::execution::sequential_executor_parameters</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1static__chunk__size" prot="public">hpx::parallel::execution::static_chunk_size</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1timed__executor" prot="public">hpx::parallel::execution::timed_executor</innerclass>
    <innerclass refid="structhpx_1_1parallel_1_1execution_1_1unsequenced__execution__tag" prot="public">hpx::parallel::execution::unsequenced_execution_tag</innerclass>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="is__timed__executor_8hpp_1aadbdae2b9bf10ffc0e77ea1e293d0e74" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__timed__executor" kindref="compound">is_timed_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_timed_executor_t = typedef typename is_timed_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_timed_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_timed_executor.hpp" line="38" column="1" bodyfile="libs/execution/include/hpx/traits/is_timed_executor.hpp" bodystart="38" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor_8hpp_1ad62b1adec47011197218f0ed63fc45a4" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__one__way__executor" kindref="compound">is_one_way_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_one_way_executor_t = typedef typename is_one_way_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_one_way_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor.hpp" line="54" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor_8hpp_1acb7e65f3be4b25441e4e43f36f23cf04" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__never__blocking__one__way__executor" kindref="compound">is_never_blocking_one_way_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_never_blocking_one_way_executor_t = typedef typename is_never_blocking_one_way_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_never_blocking_one_way_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor.hpp" line="64" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor.hpp" bodystart="65" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor_8hpp_1a390d319517547a2273dd2b90099ebed1" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__bulk__one__way__executor" kindref="compound">is_bulk_one_way_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_bulk_one_way_executor_t = typedef typename is_bulk_one_way_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_bulk_one_way_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor.hpp" line="75" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor.hpp" bodystart="76" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor_8hpp_1a2103c0b62454bd0de6946ec56b1270bb" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__two__way__executor" kindref="compound">is_two_way_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_two_way_executor_t = typedef typename is_two_way_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_two_way_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor.hpp" line="86" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor.hpp" bodystart="86" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor_8hpp_1a3e1723a74f3db003f1f69344434e064f" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__bulk__two__way__executor" kindref="compound">is_bulk_two_way_executor</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_bulk_two_way_executor_t = typedef typename is_bulk_two_way_executor&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_bulk_two_way_executor_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor.hpp" line="96" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor.hpp" bodystart="97" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="is__executor__parameters_8hpp_1a74110dd34ada5909270be68c99759799" prot="public" static="no">
        <type>typename <ref refid="structhpx_1_1parallel_1_1execution_1_1is__executor__parameters" kindref="compound">is_executor_parameters</ref>&lt; T &gt;::type</type>
        <definition>using hpx::parallel::execution::is_executor_parameters_t = typedef typename is_executor_parameters&lt;T&gt;::type</definition>
        <argsstring></argsstring>
        <name>is_executor_parameters_t</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/traits/is_executor_parameters.hpp" line="105" column="1" bodyfile="libs/execution/include/hpx/traits/is_executor_parameters.hpp" bodystart="105" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="parallel__executor_8hpp_1a145ed13953eab568938127679016af0b" prot="public" static="no">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor" kindref="compound">parallel_policy_executor</ref>&lt; hpx::launch &gt;</type>
        <definition>using hpx::parallel::execution::parallel_executor = typedef parallel_policy_executor&lt;hpx::launch&gt;</definition>
        <argsstring></argsstring>
        <name>parallel_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/parallel_executor.hpp" line="324" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/parallel_executor.hpp" bodystart="324" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="thread__pool__attached__executors_8hpp_1aaf57db8c827785140342b9814e82e7e1" prot="public" static="no">
        <type>threads::executors::local_priority_queue_attached_executor</type>
        <definition>using hpx::parallel::execution::local_priority_queue_attached_executor = typedef threads::executors::local_priority_queue_attached_executor</definition>
        <argsstring></argsstring>
        <name>local_priority_queue_attached_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/thread_pool_attached_executors.hpp" line="31" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/thread_pool_attached_executors.hpp" bodystart="32" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="thread__pool__executors_8hpp_1ac4d0cb953702c2b4d9227d8f750ec530" prot="public" static="no">
        <type>threads::executors::local_priority_queue_executor</type>
        <definition>using hpx::parallel::execution::local_priority_queue_executor = typedef threads::executors::local_priority_queue_executor</definition>
        <argsstring></argsstring>
        <name>local_priority_queue_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new local_priority_queue_executor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_punits</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The maximum number of processing units to associate with the newly created executor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_punits</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The minimum number of processing units to associate with the newly created executor (default: 1). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/thread_pool_executors.hpp" line="54" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/thread_pool_executors.hpp" bodystart="55" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service__executors_8hpp_1a29ce45fce2d059162a60eb04dcc135a5" prot="public" static="no">
        <type>threads::executors::service_executor</type>
        <definition>using hpx::parallel::execution::service_executor = typedef threads::executors::service_executor</definition>
        <argsstring></argsstring>
        <name>service_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>service_executor</emphasis> exposes one of the predefined HPX thread pools through an executor interface.</para><para><simplesect kind="note"><para>All tasks executed by one of these executors will run on one of the OS-threads dedicated for the given thread pool. The tasks will not run as HPX-threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/service_executors.hpp" line="27" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/service_executors.hpp" bodystart="27" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service__executors_8hpp_1a3b4e7d31d0b112d896d825f3e18ef88e" prot="public" static="no">
        <type>threads::executors::io_pool_executor</type>
        <definition>using hpx::parallel::execution::io_pool_executor = typedef threads::executors::io_pool_executor</definition>
        <argsstring></argsstring>
        <name>io_pool_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>io_pool_executor</emphasis> exposes the predefined HPX IO thread pool through an executor interface.</para><para><simplesect kind="note"><para>All tasks executed by one of these executors will run on one of the OS-threads dedicated for the IO thread pool. The tasks will not run as HPX-threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/service_executors.hpp" line="36" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/service_executors.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service__executors_8hpp_1aaf699efe7451389c926b48ea5c23c58b" prot="public" static="no">
        <type>threads::executors::parcel_pool_executor</type>
        <definition>using hpx::parallel::execution::parcel_pool_executor = typedef threads::executors::parcel_pool_executor</definition>
        <argsstring></argsstring>
        <name>parcel_pool_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>io_pool_executor</emphasis> exposes the predefined HPX parcel thread pool through an executor interface.</para><para><simplesect kind="note"><para>All tasks executed by one of these executors will run on one of the OS-threads dedicated for the parcel thread pool. The tasks will not run as HPX-threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/service_executors.hpp" line="45" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/service_executors.hpp" bodystart="45" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service__executors_8hpp_1a15967cbd9cbc9a3897901b86e75a7d22" prot="public" static="no">
        <type>threads::executors::timer_pool_executor</type>
        <definition>using hpx::parallel::execution::timer_pool_executor = typedef threads::executors::timer_pool_executor</definition>
        <argsstring></argsstring>
        <name>timer_pool_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>io_pool_executor</emphasis> exposes the predefined HPX timer thread pool through an executor interface.</para><para><simplesect kind="note"><para>All tasks executed by one of these executors will run on one of the OS-threads dedicated for the timer thread pool. The tasks will not run as HPX-threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/service_executors.hpp" line="54" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/service_executors.hpp" bodystart="54" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="service__executors_8hpp_1a7ab3f5bb60831868e7624e5faf6896a3" prot="public" static="no">
        <type>threads::executors::main_pool_executor</type>
        <definition>using hpx::parallel::execution::main_pool_executor = typedef threads::executors::main_pool_executor</definition>
        <argsstring></argsstring>
        <name>main_pool_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>A <emphasis>io_pool_executor</emphasis> exposes the predefined HPX main thread pool through an executor interface.</para><para><simplesect kind="note"><para>All tasks executed by one of these executors will run on one of the OS-threads dedicated for the main thread pool. The tasks will not run as HPX-threads. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/service_executors.hpp" line="63" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/service_executors.hpp" bodystart="63" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="pool__executor_8hpp_1a57c2d95b61062930f321dca5efce11db" prot="public" static="no">
        <type>threads::executors::pool_executor</type>
        <definition>using hpx::parallel::execution::pool_executor = typedef threads::executors::pool_executor</definition>
        <argsstring></argsstring>
        <name>pool_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/pool_executor.hpp" line="22" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/pool_executor.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timed__executors_8hpp_1ae1d86a9822ae15ea2cf697ceaabc9ada" prot="public" static="no">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1timed__executor" kindref="compound">timed_executor</ref>&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__executor" kindref="compound">execution::sequenced_executor</ref> &gt;</type>
        <definition>using hpx::parallel::execution::sequenced_timed_executor = typedef timed_executor&lt;execution::sequenced_executor&gt;</definition>
        <argsstring></argsstring>
        <name>sequenced_timed_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/timed_executors.hpp" line="465" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/timed_executors.hpp" bodystart="466" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="timed__executors_8hpp_1aa0dd278854131469a1b2613c42f83413" prot="public" static="no">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1timed__executor" kindref="compound">timed_executor</ref>&lt; <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor" kindref="compound">execution::parallel_executor</ref> &gt;</type>
        <definition>using hpx::parallel::execution::parallel_timed_executor = typedef timed_executor&lt;execution::parallel_executor&gt;</definition>
        <argsstring></argsstring>
        <name>parallel_timed_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/timed_executors.hpp" line="468" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/timed_executors.hpp" bodystart="469" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="parallel__executor__aggregated_8hpp_1a89cda2049140d5727fdb04b0c30189b8" prot="public" static="no">
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy__executor__aggregated" kindref="compound">parallel_policy_executor_aggregated</ref>&lt; hpx::launch::async_policy &gt;</type>
        <definition>using hpx::parallel::execution::parallel_executor_aggregated = typedef parallel_policy_executor_aggregated&lt;hpx::launch::async_policy&gt;</definition>
        <argsstring></argsstring>
        <name>parallel_executor_aggregated</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/parallel_executor_aggregated.hpp" line="450" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/parallel_executor_aggregated.hpp" bodystart="451" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="thread__pool__os__executors_8hpp_1ae7a8f1bdbb77de88bfdab427da4df05d" prot="public" static="no">
        <type>threads::executors::local_priority_queue_os_executor</type>
        <definition>using hpx::parallel::execution::local_priority_queue_os_executor = typedef threads::executors::local_priority_queue_os_executor</definition>
        <argsstring></argsstring>
        <name>local_priority_queue_os_executor</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Creates a new local_priority_queue_executor</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>max_punits</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The maximum number of processing units to associate with the newly created executor. </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>min_punits</parametername>
</parameternamelist>
<parameterdescription>
<para>[in] The minimum number of processing units to associate with the newly created executor (default: 1). </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/thread_pool_os_executors.hpp" line="56" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/thread_pool_os_executors.hpp" bodystart="57" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="default__executor_8hpp_1a07b0c8c937b7db7e5db06f97e8b7a45a" prot="public" static="no">
        <type>threads::executors::default_executor</type>
        <definition>using hpx::parallel::execution::default_executor = typedef threads::executors::default_executor</definition>
        <argsstring></argsstring>
        <name>default_executor</name>
        <briefdescription>
<para>Refers to the currently used base-executor. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/default_executor.hpp" line="22" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/default_executor.hpp" bodystart="22" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="execution__policy_8hpp_1a379ad4dc40ef57f1dfada5de37cba421" prot="public" static="yes" mutable="no">
        <type>task_policy_tag HPX_CONSTEXPR_OR_CONST</type>
        <definition>task_policy_tag HPX_CONSTEXPR_OR_CONST hpx::parallel::execution::task</definition>
        <argsstring></argsstring>
        <name>task</name>
        <briefdescription>
<para>Default sequential execution policy object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/execution_policy.hpp" line="36" column="1" bodyfile="libs/execution/include/hpx/parallel/execution_policy.hpp" bodystart="36" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="execution__policy_8hpp_1aa42dc9cec2bf4586b8f5f236637db308" prot="public" static="no" mutable="no">
        <type>HPX_STATIC_CONSTEXPR <ref refid="structhpx_1_1parallel_1_1execution_1_1sequenced__policy" kindref="compound">sequenced_policy</ref></type>
        <definition>HPX_STATIC_CONSTEXPR sequenced_policy hpx::parallel::execution::seq</definition>
        <argsstring></argsstring>
        <name>seq</name>
        <briefdescription>
<para>Default sequential execution policy object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/execution_policy.hpp" line="478" column="1" bodyfile="libs/execution/include/hpx/parallel/execution_policy.hpp" bodystart="478" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="execution__policy_8hpp_1aff7612e112313e7279899522814adb22" prot="public" static="no" mutable="no">
        <type>HPX_STATIC_CONSTEXPR <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__policy" kindref="compound">parallel_policy</ref></type>
        <definition>HPX_STATIC_CONSTEXPR parallel_policy hpx::parallel::execution::par</definition>
        <argsstring></argsstring>
        <name>par</name>
        <briefdescription>
<para>Default parallel execution policy object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/execution_policy.hpp" line="1054" column="1" bodyfile="libs/execution/include/hpx/parallel/execution_policy.hpp" bodystart="1054" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="execution__policy_8hpp_1ad8c4bc27c0ce1912fa289d7164ef8b0a" prot="public" static="no" mutable="no">
        <type>HPX_STATIC_CONSTEXPR <ref refid="structhpx_1_1parallel_1_1execution_1_1parallel__unsequenced__policy" kindref="compound">parallel_unsequenced_policy</ref></type>
        <definition>HPX_STATIC_CONSTEXPR parallel_unsequenced_policy hpx::parallel::execution::par_unseq</definition>
        <argsstring></argsstring>
        <name>par_unseq</name>
        <briefdescription>
<para>Default vector execution policy object. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/execution_policy.hpp" line="1268" column="1" bodyfile="libs/execution/include/hpx/parallel/execution_policy.hpp" bodystart="1268" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="execution__parameters_8hpp_1a93afb8d763f739085cf6a702a77f470e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename ...</type>
            <declname>Params</declname>
            <defname>Params</defname>
          </param>
        </templateparamlist>
        <type><ref refid="structhpx_1_1parallel_1_1execution_1_1executor__parameters__join" kindref="compound">executor_parameters_join</ref>&lt; Params... &gt;::type</type>
        <definition>executor_parameters_join&lt;Params...&gt;::type hpx::parallel::execution::join_executor_parameters</definition>
        <argsstring>(Params &amp;&amp;... params)</argsstring>
        <name>join_executor_parameters</name>
        <param>
          <type>Params &amp;&amp;...</type>
          <declname>params</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/execution_parameters.hpp" line="760" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/execution_parameters.hpp" bodystart="760" bodyend="766"/>
      </memberdef>
      <memberdef kind="function" id="execution__parameters_8hpp_1a6c67e78a91b334a60421f84e8557dd3e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename Param</type>
          </param>
        </templateparamlist>
        <type>Param &amp;&amp;</type>
        <definition>Param&amp;&amp; hpx::parallel::execution::join_executor_parameters</definition>
        <argsstring>(Param &amp;&amp;param)</argsstring>
        <name>join_executor_parameters</name>
        <param>
          <type>Param &amp;&amp;</type>
          <declname>param</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/execution_parameters.hpp" line="777" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/execution_parameters.hpp" bodystart="777" bodyend="786"/>
      </memberdef>
      <memberdef kind="function" id="distribution__policy__executor_8hpp_1a15c6cbe7f657f117ad0a3c4943df0365" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename DistPolicy</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1parallel_1_1execution_1_1distribution__policy__executor" kindref="compound">distribution_policy_executor</ref>&lt; typename hpx::util::decay&lt; DistPolicy &gt;::type &gt;</type>
        <definition>distribution_policy_executor&lt;typename hpx::util::decay&lt;DistPolicy&gt;::type&gt; hpx::parallel::execution::make_distribution_policy_executor</definition>
        <argsstring>(DistPolicy &amp;&amp;policy)</argsstring>
        <name>make_distribution_policy_executor</name>
        <param>
          <type>DistPolicy &amp;&amp;</type>
          <declname>policy</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para>Create a new <ref refid="classhpx_1_1parallel_1_1execution_1_1distribution__policy__executor" kindref="compound">distribution_policy_executor</ref> from the given distribution_policy.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>policy</parametername>
</parameternamelist>
<parameterdescription>
<para>The distribution_policy to create an executor from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/execution/include/hpx/parallel/executors/distribution_policy_executor.hpp" line="191" column="1" bodyfile="libs/execution/include/hpx/parallel/executors/distribution_policy_executor.hpp" bodystart="191" bodyend="196"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/execution/include/hpx/traits/is_execution_policy.hpp" line="17" column="1"/>
  </compounddef>
</doxygen>
