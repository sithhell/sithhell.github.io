<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util" kind="namespace" language="C++">
    <compoundname>hpx::util</compoundname>
    <innerclass refid="structhpx_1_1util_1_1bad__any__cast" prot="public">hpx::util::bad_any_cast</innerclass>
    <innerclass refid="classhpx_1_1util_1_1bad__optional__access" prot="public">hpx::util::bad_optional_access</innerclass>
    <innerclass refid="classhpx_1_1util_1_1basic__any" prot="public">hpx::util::basic_any</innerclass>
    <innerclass refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4" prot="public">hpx::util::basic_any&lt; void, void, Char &gt;</innerclass>
    <innerclass refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01void_01_4" prot="public">hpx::util::basic_any&lt; void, void, void &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1in__place" prot="public">hpx::util::in_place</innerclass>
    <innerclass refid="structhpx_1_1util_1_1in__place__t" prot="public">hpx::util::in_place_t</innerclass>
    <innerclass refid="structhpx_1_1util_1_1nullopt__t" prot="public">hpx::util::nullopt_t</innerclass>
    <innerclass refid="classhpx_1_1util_1_1optional" prot="public">hpx::util::optional</innerclass>
    <innerclass refid="classhpx_1_1util_1_1tuple" prot="public">hpx::util::tuple</innerclass>
    <innerclass refid="classhpx_1_1util_1_1tuple_3_4" prot="public">hpx::util::tuple&lt;&gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element" prot="public">hpx::util::tuple_element</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_010_00_01std_1_1pair_3_01_t0_00_01_t1_01_4_01_4" prot="public">hpx::util::tuple_element&lt; 0, std::pair&lt; T0, T1 &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_011_00_01std_1_1pair_3_01_t0_00_01_t1_01_4_01_4" prot="public">hpx::util::tuple_element&lt; 1, std::pair&lt; T0, T1 &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01boost_1_1array_3_01_type_00_01_size_01_4_01_4" prot="public">hpx::util::tuple_element&lt; I, boost::array&lt; Type, Size &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01const_01_t_01_4" prot="public">hpx::util::tuple_element&lt; I, const T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01const_01volatile_01_t_01_4" prot="public">hpx::util::tuple_element&lt; I, const volatile T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01std_1_1array_3_01_type_00_01_size_01_4_01_4" prot="public">hpx::util::tuple_element&lt; I, std::array&lt; Type, Size &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">hpx::util::tuple_element&lt; I, tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__element_3_01_i_00_01volatile_01_t_01_4" prot="public">hpx::util::tuple_element&lt; I, volatile T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size" prot="public">hpx::util::tuple_size</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01boost_1_1array_3_01_type_00_01_size_01_4_01_4" prot="public">hpx::util::tuple_size&lt; boost::array&lt; Type, Size &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01const_01_t_01_4" prot="public">hpx::util::tuple_size&lt; const T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01const_01volatile_01_t_01_4" prot="public">hpx::util::tuple_size&lt; const volatile T &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01std_1_1array_3_01_type_00_01_size_01_4_01_4" prot="public">hpx::util::tuple_size&lt; std::array&lt; Type, Size &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01std_1_1pair_3_01_t0_00_01_t1_01_4_01_4" prot="public">hpx::util::tuple_size&lt; std::pair&lt; T0, T1 &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01tuple_3_01_ts_8_8_8_01_4_01_4" prot="public">hpx::util::tuple_size&lt; tuple&lt; Ts... &gt; &gt;</innerclass>
    <innerclass refid="structhpx_1_1util_1_1tuple__size_3_01volatile_01_t_01_4" prot="public">hpx::util::tuple_size&lt; volatile T &gt;</innerclass>
    <innernamespace refid="namespacehpx_1_1util_1_1__optional__swap">hpx::util::_optional_swap</innernamespace>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="hpx_2datastructures_2any_8hpp_1a488275b350ec86910324e0b169dfc114" prot="public" static="no">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; void, void, void &gt;</type>
        <definition>using hpx::util::any_nonser = typedef basic_any&lt;void, void, void&gt;</definition>
        <argsstring></argsstring>
        <name>any_nonser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="990" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="990" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2datastructures_2any_8hpp_1a7847e7247be6079c03857395819acaf4" prot="public" static="no">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; void, void, char &gt;</type>
        <definition>using hpx::util::streamable_any_nonser = typedef basic_any&lt;void, void, char&gt;</definition>
        <argsstring></argsstring>
        <name>streamable_any_nonser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="992" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="992" bodyend="-1"/>
      </memberdef>
      <memberdef kind="typedef" id="hpx_2datastructures_2any_8hpp_1a67b6d7e05f0612e24960cc2e4c7b2a0b" prot="public" static="no">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; void, void, wchar_t &gt;</type>
        <definition>using hpx::util::streamable_wany_nonser = typedef basic_any&lt;void, void, wchar_t&gt;</definition>
        <argsstring></argsstring>
        <name>streamable_wany_nonser</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="993" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="993" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="var">
      <memberdef kind="variable" id="hpx_2datastructures_2optional_8hpp_1a76ca84983e6cabd55d7c6cdc42b1039e" prot="public" static="no" mutable="no">
        <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        <definition>nullopt_t hpx::util::nullopt</definition>
        <argsstring></argsstring>
        <name>nullopt</name>
        <initializer>{<ref refid="structhpx_1_1util_1_1nullopt__t_1_1init" kindref="compound">nullopt_t::init</ref>()}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="26" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="26" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="hpx_2datastructures_2tuple_8hpp_1aecfe4813474144069383c832aff76dec" prot="public" static="no" mutable="no">
        <type>detail::ignore_type const</type>
        <definition>detail::ignore_type const hpx::util::ignore</definition>
        <argsstring></argsstring>
        <name>ignore</name>
        <initializer>= {}</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="719" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="719" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a51cfc932a58ba694bb27ed5ca8bfa54d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="306" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="306" bodyend="312"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1ac20b4068ec07a2db97b6e9d6b5bd30b4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="315" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="315" bodyend="319"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1aed35a8be1bac57dbe61946b8a2cd71bb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="322" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="322" bodyend="325"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1af00dda8f020d39ccb78207167c0b8cd4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="328" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="328" bodyend="332"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a26f2de3617e62f8acd336712f9565514" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="335" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="335" bodyend="338"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a123c8fd49331d30eb86987312b739765" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;lhs, optional&lt; T &gt; const &amp;rhs)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="341" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="341" bodyend="345"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a33539dbf74f6ca47981cb437d0e52006" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="349" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="349" bodyend="352"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1ab32898c590b88d5d6e339807559dbf45" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator==</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="355" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="355" bodyend="358"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a4e30c9bcf8dd3fa1dbd6e5ebd1a84988" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="361" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="361" bodyend="364"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1aae687945227f5e88c9739a80a01d8172" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator!=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="367" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="367" bodyend="370"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1af022642b66cbd7edc8ca853e85448374" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="373" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="373" bodyend="376"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a2ff213472d3f1016d0d430e37bb6b486" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="379" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="379" bodyend="382"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a063e5f71f545507e9bb6fe121f1afa84" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="385" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="385" bodyend="388"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a60e57b4039e76f212dd00a20daff4116" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="391" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="391" bodyend="394"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a04bd982e0d49da4dec7c66c74ec9087e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="397" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="397" bodyend="400"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a2bd887ce9eb1b725d714916e066c5175" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="403" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="403" bodyend="406"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a938bb9556808c730fb7c08bfb098ffb2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, nullopt_t) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="409" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="409" bodyend="412"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a8d99d8bb7004850df3f03d6c9bc3fab6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;=</definition>
        <argsstring>(nullopt_t, optional&lt; T &gt; const &amp;opt) noexcept</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="415" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="415" bodyend="418"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a0987238d49d1c7341abb91b87c4e51b8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator==</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="422" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="422" bodyend="425"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a71bd81f007dd6427bf2653b71a6a9940" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator==</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator==</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="428" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="428" bodyend="431"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a3b0ec130b31fc1e51e5b463e6a4161f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator!=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="434" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="434" bodyend="437"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1ac86224034c4ba535a80c70abd1929793" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator!=</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator!=</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="440" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="440" bodyend="443"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a37aae4eea8d72bdc70b4c0dcc334f6f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="446" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="446" bodyend="449"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1acdb8ea09d973fc5b0bf2e19c459a3257" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="452" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="452" bodyend="455"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a8cb08603b2690d812adbacca6d57ee98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="458" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="458" bodyend="461"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a6095a0f4302bb35dacfb493a35e9b4ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;=</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="464" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="464" bodyend="467"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a19b18c707be0b39065d7ff023039f318" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="470" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="470" bodyend="473"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a6da4fcab0bd1dda91dd31156f1ec7097" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&gt;</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="476" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="476" bodyend="479"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a4284a3e7abe87d52c857ecd09663bf92" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;=</definition>
        <argsstring>(optional&lt; T &gt; const &amp;opt, T const &amp;value)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="482" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="482" bodyend="485"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1af9486c9f454cdb92a86b4b81c5a555ee" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>bool</type>
        <definition>bool hpx::util::operator&lt;=</definition>
        <argsstring>(T const &amp;value, optional&lt; T &gt; const &amp;opt)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type>T const &amp;</type>
          <declname>value</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; const &amp;</type>
          <declname>opt</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="488" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="488" bodyend="491"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a07e3103ff1835f6fce628f29831ff405" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::swap</definition>
        <argsstring>(optional&lt; T &gt; &amp;x, optional&lt; T &gt; &amp;y) noexcept(noexcept(x.swap(y)))</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="495" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="495" bodyend="498"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a9dd4630bb701a2caf32a58b92938247c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; typename std::decay&lt; T &gt;::type &gt;</type>
        <definition>optional&lt;typename std::decay&lt;T&gt;::type&gt; hpx::util::make_optional</definition>
        <argsstring>(T &amp;&amp;v)</argsstring>
        <name>make_optional</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>v</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="502" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="502" bodyend="505"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1a6bf7bbeea2b0de8c608a1cbd745f7877" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
        <definition>optional&lt;T&gt; hpx::util::make_optional</definition>
        <argsstring>(Ts &amp;&amp;... ts)</argsstring>
        <name>make_optional</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="508" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="508" bodyend="511"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2optional_8hpp_1aad33e3d1b5bf165a0bb38e50d86534d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref>&lt; T &gt;</type>
        <definition>optional&lt;T&gt; hpx::util::make_optional</definition>
        <argsstring>(std::initializer_list&lt; U &gt; il, Ts &amp;&amp;... ts)</argsstring>
        <name>make_optional</name>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="514" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="514" bodyend="518"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a64e364235aa51f7369d1962f663ce912" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="structhpx_1_1util_1_1tuple__element" kindref="compound">tuple_element</ref>&lt; I, Tuple &gt;::type &amp;</type>
        <definition>HPX_HOST_DEVICE tuple_element&lt; I, Tuple &gt;::type &amp; hpx::util::get</definition>
        <argsstring>(Tuple &amp;t) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>Tuple &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="41" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="678" bodyend="681"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1acd6f226ac4a8808deac013963a7ca88f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="structhpx_1_1util_1_1tuple__element" kindref="compound">tuple_element</ref>&lt; I, Tuple &gt;::type const  &amp;</type>
        <definition>HPX_HOST_DEVICE tuple_element&lt; I, Tuple &gt;::type const  &amp; hpx::util::get</definition>
        <argsstring>(Tuple const &amp;t) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>Tuple const &amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="46" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="689" bodyend="692"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1aa14412f117322a1e2de57c668996e8c3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="structhpx_1_1util_1_1tuple__element" kindref="compound">tuple_element</ref>&lt; I, Tuple &gt;::type &amp;&amp;</type>
        <definition>HPX_HOST_DEVICE tuple_element&lt; I, Tuple &gt;::type &amp;&amp; hpx::util::get</definition>
        <argsstring>(Tuple &amp;&amp;t) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>Tuple &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="51" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="700" bodyend="704"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1ac86d3b2166b1c53cd746af9a9ccf0c4d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>std::size_t</type>
            <declname>I</declname>
            <defname>I</defname>
          </param>
          <param>
            <type>typename Tuple</type>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="structhpx_1_1util_1_1tuple__element" kindref="compound">tuple_element</ref>&lt; I, Tuple &gt;::type const  &amp;&amp;</type>
        <definition>HPX_HOST_DEVICE tuple_element&lt; I, Tuple &gt;::type const  &amp;&amp; hpx::util::get</definition>
        <argsstring>(Tuple const &amp;&amp;t) noexcept</argsstring>
        <name>get</name>
        <param>
          <type>Tuple const &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="56" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="712" bodyend="716"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1ab31ce13adf84228775060f225175de9f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; typename decay_unwrap&lt; Ts &gt;::type... &gt;</type>
        <definition>HPX_HOST_DEVICE tuple&lt;typename decay_unwrap&lt;Ts&gt;::type...&gt; hpx::util::make_tuple</definition>
        <argsstring>(Ts &amp;&amp;... vs)</argsstring>
        <name>make_tuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="726" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="726" bodyend="730"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1ae4fcd9b83d5f753c8f7bf29cb62aa208" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts &amp;&amp;... &gt;</type>
        <definition>HPX_HOST_DEVICE tuple&lt;Ts&amp;&amp;...&gt; hpx::util::forward_as_tuple</definition>
        <argsstring>(Ts &amp;&amp;... vs) noexcept</argsstring>
        <name>forward_as_tuple</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="739" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="739" bodyend="743"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a8d2a425f20020cc302c1849d9b35bbd3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE <ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts &amp;... &gt;</type>
        <definition>HPX_HOST_DEVICE tuple&lt;Ts&amp;...&gt; hpx::util::tie</definition>
        <argsstring>(Ts &amp;... vs) noexcept</argsstring>
        <name>tie</name>
        <param>
          <type>Ts &amp;...</type>
          <declname>vs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="748" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="748" bodyend="751"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1ada3cc2ebd76d6c720655ce0f0995d62e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Tuples</declname>
            <defname>Tuples</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE auto</type>
        <definition>HPX_HOST_DEVICE auto hpx::util::tuple_cat</definition>
        <argsstring>(Tuples &amp;&amp;... tuples) -&gt; decltype(detail::tuple_cat_impl(typename detail::make_index_pack&lt; detail::tuple_cat_size&lt; typename std::decay&lt; Tuples &gt;::type... &gt;::value &gt;::type</argsstring>
        <name>tuple_cat</name>
        <param>
          <type>Tuples &amp;&amp;...</type>
          <declname>tuples</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="845" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="845" bodyend="849"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a059719f60057de1ae8bed9e11d3370ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator==</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator==</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="896" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="896" bodyend="899"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a862f1759503e1866f544fd0aeff22c9d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator!=</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator!=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="907" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="907" bodyend="910"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1aff9b23bd66525e8173bb106724ddda4a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator&lt;</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator&lt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="947" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="948" bodyend="951"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a2cb0d1e1f85f6529090f59e33a54823a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator&gt;</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator&gt;</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="959" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="959" bodyend="962"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a0b3ab34996284bb37687d9685fc4c160" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator&lt;=</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator&lt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="969" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="970" bodyend="973"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a05bc18ff4c4bfb37c0c25344d8bf505b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
          <param>
            <type>typename...</type>
            <declname>Us</declname>
            <defname>Us</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE std::enable_if&lt; sizeof...(Ts)==sizeof...(Us), bool &gt;::type</type>
        <definition>HPX_HOST_DEVICE std::enable_if&lt;sizeof...(Ts) == sizeof...(Us), bool&gt;::type hpx::util::operator&gt;=</definition>
        <argsstring>(tuple&lt; Ts... &gt; const &amp;t, tuple&lt; Us... &gt; const &amp;u)</argsstring>
        <name>operator&gt;=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; const &amp;</type>
          <declname>t</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Us... &gt; const &amp;</type>
          <declname>u</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="981" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="981" bodyend="984"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2tuple_8hpp_1a7c3b43e61e132d8e9fba24b1626fce7b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>HPX_HOST_DEVICE void</type>
        <definition>HPX_HOST_DEVICE void hpx::util::swap</definition>
        <argsstring>(tuple&lt; Ts... &gt; &amp;x, tuple&lt; Ts... &gt; &amp;y) noexcept(noexcept(x.swap(y)))</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; &amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1tuple" kindref="compound">tuple</ref>&lt; Ts... &gt; &amp;</type>
          <declname>y</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/tuple.hpp" line="992" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/tuple.hpp" bodystart="992" bodyend="996"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1aac5aac3d759279b11f8dc7f7a71e1cdd" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IArch_</type>
          </param>
          <param>
            <type>typename OArch_</type>
          </param>
          <param>
            <type>typename Char_</type>
          </param>
        </templateparamlist>
        <type>std::basic_istream&lt; Char_ &gt; &amp;</type>
        <definition>std::basic_istream&lt;Char_&gt;&amp; hpx::util::operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; Char_ &gt; &amp;i, basic_any&lt; IArch_, OArch_, Char_ &gt; &amp;obj)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::basic_istream&lt; Char_ &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch_, OArch_, Char_ &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="882" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="882" bodyend="886"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1afcac4112a4ce5e1c168b36e3872f6693" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IArch_</type>
          </param>
          <param>
            <type>typename OArch_</type>
          </param>
          <param>
            <type>typename Char_</type>
          </param>
        </templateparamlist>
        <type>std::basic_ostream&lt; Char_ &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char_&gt;&amp; hpx::util::operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char_ &gt; &amp;o, basic_any&lt; IArch_, OArch_, Char_ &gt; const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char_ &gt; &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch_, OArch_, Char_ &gt; const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="882" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="889" bodyend="893"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a9b9a3d563983f5515d445b7995305445" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IArch</type>
          </param>
          <param>
            <type>typename OArch</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::swap</definition>
        <argsstring>(basic_any&lt; IArch, OArch, Char &gt; &amp;lhs, basic_any&lt; IArch, OArch, Char &gt; &amp;rhs) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; &amp;</type>
          <declname>lhs</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="897" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="897" bodyend="901"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a4754036762760a5dca23a4ef64d23928" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArch</type>
          </param>
          <param>
            <type>typename OArch</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>T *</type>
        <definition>T* hpx::util::any_cast</definition>
        <argsstring>(basic_any&lt; IArch, OArch, Char &gt; *operand) noexcept</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; *</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="905" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="905" bodyend="915"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a6b3c26603ffcddca3f548966a8c5bdbc" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArch</type>
          </param>
          <param>
            <type>typename OArch</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>T const  *</type>
        <definition>T const* hpx::util::any_cast</definition>
        <argsstring>(basic_any&lt; IArch, OArch, Char &gt; const *operand) noexcept</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; const *</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="918" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="918" bodyend="922"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a1f4e5deb87b147e481848d50b1bd06d6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArch</type>
          </param>
          <param>
            <type>typename OArch</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>T</type>
        <definition>T hpx::util::any_cast</definition>
        <argsstring>(basic_any&lt; IArch, OArch, Char &gt; &amp;operand)</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; &amp;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="925" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="925" bodyend="933"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a685f4dad1e8600dbe56540dcf053fc98" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArch</type>
          </param>
          <param>
            <type>typename OArch</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; hpx::util::any_cast</definition>
        <argsstring>(basic_any&lt; IArch, OArch, Char &gt; const &amp;operand)</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch, OArch, Char &gt; const &amp;</type>
          <declname>operand</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="936" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="936" bodyend="942"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a94b8dcaadb3fd7230d0e788891cb1bc8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; void, void, void &gt;</type>
        <definition>basic_any&lt;void, void, void&gt; hpx::util::make_any_nonser</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>make_any_nonser</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="978" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="978" bodyend="981"/>
      </memberdef>
      <memberdef kind="function" id="hpx_2datastructures_2any_8hpp_1a068b5d46b35d0b23f2215ef8fd66bcab" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Char</type>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; void, void, Char &gt;</type>
        <definition>basic_any&lt;void, void, Char&gt; hpx::util::make_streamable_any_nonser</definition>
        <argsstring>(T &amp;&amp;t)</argsstring>
        <name>make_streamable_any_nonser</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>t</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="984" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="984" bodyend="987"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="18" column="1"/>
  </compounddef>
</doxygen>
