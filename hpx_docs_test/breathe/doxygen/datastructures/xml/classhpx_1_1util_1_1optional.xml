<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1optional" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::optional</compoundname>
    <templateparamlist>
      <param>
        <type>typename</type>
        <declname>T</declname>
        <defname>T</defname>
      </param>
    </templateparamlist>
      <sectiondef kind="public-type">
      <memberdef kind="typedef" id="classhpx_1_1util_1_1optional_1a2277ebfb9b5714fc7185b9b98201ac81" prot="public" static="no">
        <type>T</type>
        <definition>using hpx::util::optional&lt; T &gt;::value_type =  T</definition>
        <argsstring></argsstring>
        <name>value_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="61" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="61" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1optional_1a6ec9b8a82c1e7f77ac3b7cd3263c6631" prot="private" static="no" mutable="no">
        <type>std::aligned_storage&lt; sizeof(T), alignof(T)&gt;::type</type>
        <definition>std::aligned_storage&lt;sizeof(T), alignof(T)&gt;::type hpx::util::optional&lt; T &gt;::storage_</definition>
        <argsstring></argsstring>
        <name>storage_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="300" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="300" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1optional_1a6dee0911de03ca57dc65e22cbdb6d1db" prot="private" static="no" mutable="no">
        <type>bool</type>
        <definition>bool hpx::util::optional&lt; T &gt;::empty_</definition>
        <argsstring></argsstring>
        <name>empty_</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="301" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="301" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1af769bf142ce0bd81788fbd96c79caa3f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>() noexcept</argsstring>
        <name>optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="63" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="63" bodyend="66"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a7e101305e679446d9f7113fd6222ae54" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(nullopt_t) noexcept</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="68" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="68" bodyend="71"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a50b3453c164e622f9e119fb80bc64031" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional const &amp;other)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="73" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="73" bodyend="81"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a6fbe226e384fb3a7751af729bcd16f95" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(optional &amp;&amp;other) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="82" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="82" bodyend="91"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1af95fe53ab710433b597041148812195c" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(T const &amp;val)</argsstring>
        <name>optional</name>
        <param>
          <type>T const &amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="93" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="93" bodyend="98"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1acc19e90fe189898972a83f59b7574718" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(T &amp;&amp;val) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>optional</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>val</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="99" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="99" bodyend="104"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a262f0e5773f6d665df48d871ed8e14ae" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(in_place_t, Ts &amp;&amp;... ts)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1in__place__t" kindref="compound">in_place_t</ref></type>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="107" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="107" bodyend="112"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a2c3a68f285fccd67c312c4004b0e8d0c" prot="public" static="no" const="no" explicit="yes" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::optional</definition>
        <argsstring>(in_place_t, std::initializer_list&lt; U &gt; il, Ts &amp;&amp;... ts)</argsstring>
        <name>optional</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1in__place__t" kindref="compound">in_place_t</ref></type>
        </param>
        <param>
          <type>std::initializer_list&lt; U &gt;</type>
          <declname>il</declname>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="115" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="115" bodyend="120"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1ac2d4c4a7ae58e92274e5ab2117ff2537" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::~optional</definition>
        <argsstring>()</argsstring>
        <name>~optional</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="122" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="122" bodyend="125"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a2986d5f9e794b28e58b99c06acee2197" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; hpx::util::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="127" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="127" bodyend="133"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a38cda79cd9167241701480081cb60aca" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; hpx::util::optional&lt; T &gt;::operator=</definition>
        <argsstring>(optional &amp;&amp;other) noexcept(std::is_nothrow_move_assignable&lt; T &gt;::value &amp;&amp;std::is_nothrow_move_constructible&lt; T &gt;::value)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="134" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="134" bodyend="159"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a0ef611183e4474d1485c84845ffa7c4a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; hpx::util::optional&lt; T &gt;::operator=</definition>
        <argsstring>(T const &amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>T const &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="161" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="161" bodyend="167"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a6ae182cca02a3795d2c34d1e4c939a44" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; hpx::util::optional&lt; T &gt;::operator=</definition>
        <argsstring>(T &amp;&amp;other)</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="168" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="168" bodyend="180"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1af067073e8d3e235ead1f4302acb75a35" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
        <definition>optional&amp; hpx::util::optional&lt; T &gt;::operator=</definition>
        <argsstring>(nullopt_t) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="structhpx_1_1util_1_1nullopt__t" kindref="compound">nullopt_t</ref></type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="182" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="182" bodyend="190"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a6f6f166a9b862e7666e36183f1e63d18" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  *</type>
        <definition>T const* hpx::util::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="193" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="193" bodyend="196"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a9f6c7034dae7d52b512cf96f17f8a97f" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T *</type>
        <definition>T* hpx::util::optional&lt; T &gt;::operator-&gt;</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator-&gt;</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="198" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="198" bodyend="201"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a3d52f2af1de16601de6ad542721e912a" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; hpx::util::optional&lt; T &gt;::operator*</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="203" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="203" bodyend="206"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1af55ba71a0eac3be4ffcc15415e7ddbf4" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; hpx::util::optional&lt; T &gt;::operator*</definition>
        <argsstring>() noexcept</argsstring>
        <name>operator*</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="208" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="208" bodyend="211"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1af6c4b63bafc173282151c632076178b2" prot="public" static="no" const="yes" explicit="yes" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::optional&lt; T &gt;::operator bool</definition>
        <argsstring>() const noexcept</argsstring>
        <name>operator bool</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="213" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="213" bodyend="216"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a257214d3d013c0158b40e0da8c522652" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::optional&lt; T &gt;::has_value</definition>
        <argsstring>() const</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="218" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="218" bodyend="221"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a4b258c7e9fa2862de83d8aa6e2b1f529" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>T &amp;</type>
        <definition>T&amp; hpx::util::optional&lt; T &gt;::value</definition>
        <argsstring>()</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="223" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="223" bodyend="231"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a4780831c74d47177eaff54bbfc02419f" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>T const  &amp;</type>
        <definition>T const&amp; hpx::util::optional&lt; T &gt;::value</definition>
        <argsstring>() const</argsstring>
        <name>value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="233" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="233" bodyend="241"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1aa4fe811fef35f0b0c696b024442c7c9e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename U</type>
          </param>
        </templateparamlist>
        <type>HPX_CXX14_CONSTEXPR T</type>
        <definition>HPX_CXX14_CONSTEXPR T hpx::util::optional&lt; T &gt;::value_or</definition>
        <argsstring>(U &amp;&amp;value) const</argsstring>
        <name>value_or</name>
        <param>
          <type>U &amp;&amp;</type>
          <declname>value</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="244" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="244" bodyend="249"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1aaa8b6d0d8eb07c16671096281b13406a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>void hpx::util::optional&lt; T &gt;::emplace</definition>
        <argsstring>(Ts &amp;&amp;... ts)</argsstring>
        <name>emplace</name>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="252" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="252" bodyend="261"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1acc290f42282b1eddeea676bc748cb7c1" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::optional&lt; T &gt;::swap</definition>
        <argsstring>(optional &amp;other) noexcept(std::is_nothrow_move_constructible&lt; T &gt;::value &amp;&amp;noexcept(_optional_swap::check_swap&lt; T &gt;()))</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1optional" kindref="compound">optional</ref> &amp;</type>
          <declname>other</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="263" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="263" bodyend="289"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1optional_1a9b94f18913c343505dcaffa8d60b16f9" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::optional&lt; T &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="291" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="291" bodyend="297"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/datastructures/include/hpx/datastructures/optional.hpp" line="59" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/optional.hpp" bodystart="58" bodyend="302"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1optional_1aaa8b6d0d8eb07c16671096281b13406a" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>emplace</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a6dee0911de03ca57dc65e22cbdb6d1db" prot="private" virt="non-virtual"><scope>hpx::util::optional</scope><name>empty_</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a257214d3d013c0158b40e0da8c522652" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>has_value</name></member>
      <member refid="classhpx_1_1util_1_1optional_1af6c4b63bafc173282151c632076178b2" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator bool</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a3d52f2af1de16601de6ad542721e912a" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator*</name></member>
      <member refid="classhpx_1_1util_1_1optional_1af55ba71a0eac3be4ffcc15415e7ddbf4" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator*</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a6f6f166a9b862e7666e36183f1e63d18" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator-&gt;</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a9f6c7034dae7d52b512cf96f17f8a97f" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator-&gt;</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a2986d5f9e794b28e58b99c06acee2197" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a38cda79cd9167241701480081cb60aca" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a0ef611183e4474d1485c84845ffa7c4a" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a6ae182cca02a3795d2c34d1e4c939a44" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1optional_1af067073e8d3e235ead1f4302acb75a35" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1optional_1af769bf142ce0bd81788fbd96c79caa3f" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a7e101305e679446d9f7113fd6222ae54" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a50b3453c164e622f9e119fb80bc64031" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a6fbe226e384fb3a7751af729bcd16f95" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1af95fe53ab710433b597041148812195c" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1acc19e90fe189898972a83f59b7574718" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a262f0e5773f6d665df48d871ed8e14ae" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a2c3a68f285fccd67c312c4004b0e8d0c" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>optional</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a9b94f18913c343505dcaffa8d60b16f9" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>reset</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a6ec9b8a82c1e7f77ac3b7cd3263c6631" prot="private" virt="non-virtual"><scope>hpx::util::optional</scope><name>storage_</name></member>
      <member refid="classhpx_1_1util_1_1optional_1acc290f42282b1eddeea676bc748cb7c1" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>swap</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a4b258c7e9fa2862de83d8aa6e2b1f529" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>value</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a4780831c74d47177eaff54bbfc02419f" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>value</name></member>
      <member refid="classhpx_1_1util_1_1optional_1aa4fe811fef35f0b0c696b024442c7c9e" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>value_or</name></member>
      <member refid="classhpx_1_1util_1_1optional_1a2277ebfb9b5714fc7185b9b98201ac81" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>value_type</name></member>
      <member refid="classhpx_1_1util_1_1optional_1ac2d4c4a7ae58e92274e5ab2117ff2537" prot="public" virt="non-virtual"><scope>hpx::util::optional</scope><name>~optional</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
