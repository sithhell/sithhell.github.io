<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4" kind="class" language="C++" prot="public">
    <compoundname>hpx::util::basic_any&lt; void, void, Char &gt;</compoundname>
    <templateparamlist>
      <param>
        <type>typename Char</type>
      </param>
    </templateparamlist>
      <sectiondef kind="private-attrib">
      <memberdef kind="variable" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a5ab2810fbd2b0e422e69cbfb60e0abae" prot="private" static="no" mutable="no">
        <type>detail::any::fxn_ptr_table&lt; void, void, Char &gt; *</type>
        <definition>detail::any::fxn_ptr_table&lt;void, void, Char&gt;* hpx::util::basic_any&lt; void, void, Char &gt;::table</definition>
        <argsstring></argsstring>
        <name>table</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="876" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="876" bodyend="-1"/>
      </memberdef>
      <memberdef kind="variable" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ae4be53e1d5304273c7051c6984a9a074" prot="private" static="no" mutable="no">
        <type>void *</type>
        <definition>void* hpx::util::basic_any&lt; void, void, Char &gt;::object</definition>
        <argsstring></argsstring>
        <name>object</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="877" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="877" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="public-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a5ece9652c7bf6e6dcf5321aea544909b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::basic_any&lt; void, void, Char &gt;::basic_any</definition>
        <argsstring>() noexcept</argsstring>
        <name>basic_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="654" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="654" bodyend="659"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1acef968815984b99b72c0c43991e3d01a" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::basic_any&lt; void, void, Char &gt;::basic_any</definition>
        <argsstring>(basic_any const &amp;x)</argsstring>
        <name>basic_any</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="661" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="661" bodyend="667"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ae267c7a5606efccad41056685be87731" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::basic_any&lt; void, void, Char &gt;::basic_any</definition>
        <argsstring>(basic_any &amp;&amp;x) noexcept</argsstring>
        <name>basic_any</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="670" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="670" bodyend="678"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a28928d7872f38e5118cbab1946cb7a65" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type></type>
        <definition>hpx::util::basic_any&lt; void, void, Char &gt;::basic_any</definition>
        <argsstring>(T &amp;&amp;x, typename std::enable_if&lt; !std::is_same&lt; basic_any, typename std::decay&lt; T &gt;::type &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename std::decay&lt; T &gt;::type &gt;::value &gt;::type *=nullptr)</argsstring>
        <name>basic_any</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>x</declname>
        </param>
        <param>
          <type>typename std::enable_if&lt; !std::is_same&lt; <ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>, typename std::decay&lt; T &gt;::type &gt;::value &amp;&amp;std::is_copy_constructible&lt; typename std::decay&lt; T &gt;::type &gt;::value &gt;::type *</type>
          <defval>nullptr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="682" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="682" bodyend="695"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a30732393dc586626b845c6a32f3cfde5" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type></type>
        <definition>hpx::util::basic_any&lt; void, void, Char &gt;::~basic_any</definition>
        <argsstring>()</argsstring>
        <name>~basic_any</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="734" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="734" bodyend="737"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aa6b249f2a7e334667428e3ca400fe6ae" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
        <definition>basic_any&amp; hpx::util::basic_any&lt; void, void, Char &gt;::operator=</definition>
        <argsstring>(basic_any const &amp;x)</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="776" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="776" bodyend="780"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a3ee985b7695fc0103b2fb861cd51d220" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
        <definition>basic_any&amp; hpx::util::basic_any&lt; void, void, Char &gt;::operator=</definition>
        <argsstring>(basic_any &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="783" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="783" bodyend="788"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a95ebc9bd1067fd6b0301dc3cfc50408b" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename Enable</type>
            <defval>typename std::enable_if&lt;                !std::is_same&lt;<ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>, typename std::decay&lt;T&gt;::type&gt;::value &amp;&amp;                std::is_copy_constructible&lt;                    typename std::decay&lt;T&gt;::type&gt;::value&gt;::type</defval>
          </param>
        </templateparamlist>
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
        <definition>basic_any&amp; hpx::util::basic_any&lt; void, void, Char &gt;::operator=</definition>
        <argsstring>(T &amp;&amp;rhs) noexcept</argsstring>
        <name>operator=</name>
        <param>
          <type>T &amp;&amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="796" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="796" bodyend="800"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a9a67c8865daacd7be0a60c0f96268c62" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
        <definition>basic_any&amp; hpx::util::basic_any&lt; void, void, Char &gt;::swap</definition>
        <argsstring>(basic_any &amp;x) noexcept</argsstring>
        <name>swap</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="803" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="803" bodyend="808"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ad964e1bce3132db9eca4a47f190b138e" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>std::type_info const  &amp;</type>
        <definition>std::type_info const&amp; hpx::util::basic_any&lt; void, void, Char &gt;::type</definition>
        <argsstring>() const</argsstring>
        <name>type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="810" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="810" bodyend="813"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aba9d968602e9d9e9ff7d4e40650604c6" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
        </templateparamlist>
        <type>T const  &amp;</type>
        <definition>T const&amp; hpx::util::basic_any&lt; void, void, Char &gt;::cast</definition>
        <argsstring>() const</argsstring>
        <name>cast</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="816" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="816" bodyend="824"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a26175861245e36663d400936d34935b2" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::basic_any&lt; void, void, Char &gt;::has_value</definition>
        <argsstring>() const noexcept</argsstring>
        <name>has_value</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="826" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="826" bodyend="829"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a1e179274447c726bd6750f8afc6e305d" prot="public" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::basic_any&lt; void, void, Char &gt;::reset</definition>
        <argsstring>()</argsstring>
        <name>reset</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="831" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="831" bodyend="840"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aadf6d13fbd20adc76afc318da9f5feac" prot="public" static="no" const="yes" explicit="no" inline="yes" virt="non-virtual">
        <type>bool</type>
        <definition>bool hpx::util::basic_any&lt; void, void, Char &gt;::equal_to</definition>
        <argsstring>(basic_any const &amp;rhs) const noexcept</argsstring>
        <name>equal_to</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> const &amp;</type>
          <declname>rhs</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="843" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="843" bodyend="856"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a8d74fe3b8791416fe2ab36355ff1d051" prot="private" static="no" const="no" explicit="no" inline="yes" virt="non-virtual">
        <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> &amp;</type>
        <definition>basic_any&amp; hpx::util::basic_any&lt; void, void, Char &gt;::assign</definition>
        <argsstring>(basic_any const &amp;x)</argsstring>
        <name>assign</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref> const &amp;</type>
          <declname>x</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="740" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="740" bodyend="758"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="private-static-func">
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ac97fc410989fcadfde3fe4f27e54f26a" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hpx::util::basic_any&lt; void, void, Char &gt;::new_object</definition>
        <argsstring>(void *&amp;object, std::true_type, Ts &amp;&amp;... ts)</argsstring>
        <name>new_object</name>
        <param>
          <type>void *&amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>std::true_type</type>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="761" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="761" bodyend="765"/>
      </memberdef>
      <memberdef kind="function" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a6a120df9c1864b2e3d9a7d4b3b6a6ca8" prot="private" static="yes" const="no" explicit="no" inline="yes" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename...</type>
            <declname>Ts</declname>
            <defname>Ts</defname>
          </param>
        </templateparamlist>
        <type>void</type>
        <definition>static void hpx::util::basic_any&lt; void, void, Char &gt;::new_object</definition>
        <argsstring>(void *&amp;object, std::false_type, Ts &amp;&amp;... ts)</argsstring>
        <name>new_object</name>
        <param>
          <type>void *&amp;</type>
          <declname>object</declname>
        </param>
        <param>
          <type>std::false_type</type>
        </param>
        <param>
          <type>Ts &amp;&amp;...</type>
          <declname>ts</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="768" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="768" bodyend="772"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="friend">
      <memberdef kind="friend" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a385e00efe41cdabe3b0a88df6751d7d5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IArch_</type>
          </param>
          <param>
            <type>typename OArch_</type>
          </param>
          <param>
            <type>typename Char_</type>
          </param>
        </templateparamlist>
        <type>friend std::basic_istream&lt; Char_ &gt; &amp;</type>
        <definition>std::basic_istream&lt;Char_&gt;&amp; operator&gt;&gt;</definition>
        <argsstring>(std::basic_istream&lt; Char_ &gt; &amp;i, basic_any&lt; IArch_, OArch_, Char_ &gt; &amp;obj)</argsstring>
        <name>operator&gt;&gt;</name>
        <param>
          <type>std::basic_istream&lt; Char_ &gt; &amp;</type>
          <declname>i</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch_, OArch_, Char_ &gt; &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="862" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="882" bodyend="886"/>
      </memberdef>
      <memberdef kind="friend" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a2af3bfb87ed203589fc831fd4df84a6a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename IArch_</type>
          </param>
          <param>
            <type>typename OArch_</type>
          </param>
          <param>
            <type>typename Char_</type>
          </param>
        </templateparamlist>
        <type>friend std::basic_ostream&lt; Char_ &gt; &amp;</type>
        <definition>std::basic_ostream&lt;Char_&gt;&amp; operator&lt;&lt;</definition>
        <argsstring>(std::basic_ostream&lt; Char_ &gt; &amp;o, basic_any&lt; IArch_, OArch_, Char_ &gt; const &amp;obj)</argsstring>
        <name>operator&lt;&lt;</name>
        <param>
          <type>std::basic_ostream&lt; Char_ &gt; &amp;</type>
          <declname>o</declname>
        </param>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch_, OArch_, Char_ &gt; const &amp;</type>
          <declname>obj</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="867" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="889" bodyend="893"/>
      </memberdef>
      <memberdef kind="friend" id="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a4928af17f2215fed57ba746e0e743cf0" prot="private" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <templateparamlist>
          <param>
            <type>typename T</type>
          </param>
          <param>
            <type>typename IArch_</type>
          </param>
          <param>
            <type>typename OArch_</type>
          </param>
          <param>
            <type>typename Char_</type>
          </param>
        </templateparamlist>
        <type>friend T *</type>
        <definition>T* any_cast</definition>
        <argsstring>(basic_any&lt; IArch_, OArch_, Char_ &gt; *) noexcept</argsstring>
        <name>any_cast</name>
        <param>
          <type><ref refid="classhpx_1_1util_1_1basic__any" kindref="compound">basic_any</ref>&lt; IArch_, OArch_, Char_ &gt; *</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="873" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/datastructures/include/hpx/datastructures/any.hpp" line="651" column="1" bodyfile="libs/datastructures/include/hpx/datastructures/any.hpp" bodystart="650" bodyend="878"/>
    <listofallmembers>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a4928af17f2215fed57ba746e0e743cf0" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>any_cast</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a8d74fe3b8791416fe2ab36355ff1d051" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>assign</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a5ece9652c7bf6e6dcf5321aea544909b" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>basic_any</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1acef968815984b99b72c0c43991e3d01a" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>basic_any</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ae267c7a5606efccad41056685be87731" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>basic_any</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a28928d7872f38e5118cbab1946cb7a65" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>basic_any</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aba9d968602e9d9e9ff7d4e40650604c6" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>cast</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aadf6d13fbd20adc76afc318da9f5feac" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>equal_to</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a26175861245e36663d400936d34935b2" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>has_value</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ac97fc410989fcadfde3fe4f27e54f26a" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>new_object</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a6a120df9c1864b2e3d9a7d4b3b6a6ca8" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>new_object</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ae4be53e1d5304273c7051c6984a9a074" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>object</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a2af3bfb87ed203589fc831fd4df84a6a" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>operator&lt;&lt;</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1aa6b249f2a7e334667428e3ca400fe6ae" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a3ee985b7695fc0103b2fb861cd51d220" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a95ebc9bd1067fd6b0301dc3cfc50408b" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>operator=</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a385e00efe41cdabe3b0a88df6751d7d5" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>operator&gt;&gt;</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a1e179274447c726bd6750f8afc6e305d" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>reset</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a9a67c8865daacd7be0a60c0f96268c62" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>swap</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a5ab2810fbd2b0e422e69cbfb60e0abae" prot="private" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>table</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1ad964e1bce3132db9eca4a47f190b138e" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>type</name></member>
      <member refid="classhpx_1_1util_1_1basic__any_3_01void_00_01void_00_01_char_01_4_1a30732393dc586626b845c6a32f3cfde5" prot="public" virt="non-virtual"><scope>hpx::util::basic_any&lt; void, void, Char &gt;</scope><name>~basic_any</name></member>
    </listofallmembers>
  </compounddef>
</doxygen>
