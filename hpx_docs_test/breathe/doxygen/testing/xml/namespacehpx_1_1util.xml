<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.8.13">
  <compounddef id="namespacehpx_1_1util" kind="namespace" language="C++">
    <compoundname>hpx::util</compoundname>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="testing_8hpp_1a8a346eb71b75a9453afa9bc40f243dd6" prot="public" static="no">
        <name>counter_type</name>
        <enumvalue id="testing_8hpp_1a8a346eb71b75a9453afa9bc40f243dd6ab7e21dbc03c0966e38d7bc2e2f0e0254" prot="public">
          <name>counter_sanity</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="testing_8hpp_1a8a346eb71b75a9453afa9bc40f243dd6a66e191743f4f5a3743832a39bbf0504d" prot="public">
          <name>counter_test</name>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="34" column="1" bodyfile="libs/testing/include/hpx/testing.hpp" bodystart="33" bodyend="37"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="typedef">
      <memberdef kind="typedef" id="testing_8hpp_1a50854d355e95df911fb5ce01cca20c12" prot="public" static="no">
        <type>std::function&lt; void()&gt;</type>
        <definition>using hpx::util::test_failure_handler_type = typedef std::function&lt;void()&gt;</definition>
        <argsstring></argsstring>
        <name>test_failure_handler_type</name>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="30" column="1" bodyfile="libs/testing/include/hpx/testing.hpp" bodystart="30" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="testing_8hpp_1a74f21e5d5c1e8855cebbc18deb52ba6e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::set_test_failure_handler</definition>
        <argsstring>(test_failure_handler_type f)</argsstring>
        <name>set_test_failure_handler</name>
        <param>
          <type>test_failure_handler_type</type>
          <declname>f</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="31" column="1"/>
      </memberdef>
      <memberdef kind="function" id="testing_8hpp_1afbf0ff58a7808ecc4cdb8a9225cd4164" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int hpx::util::report_errors</definition>
        <argsstring>(std::ostream &amp;stream=std::cerr)</argsstring>
        <name>report_errors</name>
        <param>
          <type>std::ostream &amp;</type>
          <declname>stream</declname>
          <defval>std::cerr</defval>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="191" column="1"/>
      </memberdef>
      <memberdef kind="function" id="testing_8hpp_1a57f12670bfb39ac9f4cf72384d272b27" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::print_cdash_timing</definition>
        <argsstring>(const char *name, double time)</argsstring>
        <name>print_cdash_timing</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>double</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="192" column="1"/>
      </memberdef>
      <memberdef kind="function" id="testing_8hpp_1a2bdcc84e2a9f6db3f6586adcec5a6b57" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void hpx::util::print_cdash_timing</definition>
        <argsstring>(const char *name, std::uint64_t time)</argsstring>
        <name>print_cdash_timing</name>
        <param>
          <type>const char *</type>
          <declname>name</declname>
        </param>
        <param>
          <type>std::uint64_t</type>
          <declname>time</declname>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="libs/testing/include/hpx/testing.hpp" line="193" column="1"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <location file="libs/testing/include/hpx/testing.hpp" line="29" column="1"/>
  </compounddef>
</doxygen>
